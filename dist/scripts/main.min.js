"use strict";function init(){var t={pad:50,width:window.innerWidth,height:window.innerHeight};ropeTop.x=t.width/2,ropeTop.y=0,translate=Matter.Body.translate;var e=Matter.Engine,i=Matter.Render,r=Matter.World,n=(Matter.Body,Matter.Bodies),o=(Matter.Common,Matter.Composite),s=Matter.Composites,a=Matter.Constraint,l=Matter.Vertices;Matter.Sleeping,Matter.Svg;t.engine=e.create(),t.world=r,t.engine.positionIterations=10,t.engine.velocityIterations=10,t.render=i.create({element:document.getElementById("canvas-container"),options:{width:window.innerWidth,height:window.innerHeight},engine:t.engine}),t.leftWall=n.rectangle(-t.pad/2,t.height/2,t.pad,t.height,{isStatic:!0}),t.rightWall=n.rectangle(t.width+t.pad/2,t.height/2,t.pad,t.height,{isStatic:!0}),t.ground=n.rectangle(t.width/2,t.height+t.pad/2,t.width,t.pad,{isStatic:!0}),t.clawRoot=n.rectangle(175,110,100,20,{mass:10,isStatic:!0,collisionFilter:{group:-2}}),t.rthookverts=l.fromPath("40,10 115,10 155,70 125,165 90,190 110,160 120,75 100,45 40,30 33,20"),t.lfhookverts=l.fromPath("160,10 90,10 40,70 75,165 110,190 90,160 80,70 103,46 160,30 168,20"),t.hookbodyverts=l.fromPath("64,3 140,3 150,15 150,30 140,40 60,40 50,30 50,15"),t.lfhook=n.fromVertices(80,180,t.lfhookverts,{mass:10,isStatic:!1,frictionAir:1,collisionFilter:{group:-2}}),t.rthook=n.fromVertices(270,180,t.rthookverts,{mass:10,isStatic:!1,frictionAir:1,collisionFilter:{group:-2}}),t.toy=n.circle(250,180,40,{mass:2,isStatic:!1}),t.rthookConst=a.create({bodyA:t.clawRoot,bodyB:t.rthook,pointA:{x:35,y:0},pointB:{x:-60,y:-68},length:0,stiffness:1,render:{visible:!0}}),t.lfhookConst=a.create({bodyA:t.clawRoot,bodyB:t.lfhook,pointA:{x:-35,y:0},pointB:{x:60,y:-68},length:0,stiffness:1,render:{visible:!0}}),t.rtPull1=a.create({bodyB:t.lfhook,bodyA:t.rthook,pointB:{x:10,y:90},pointA:{x:-10,y:90},length:170,stiffness:.1,render:{visible:!0}}),r.add(t.engine.world,[t.toy,t.lfhook,t.rthook,t.lfhookConst,t.clawRoot,t.rtPull1,t.rthookConst,t.leftWall,t.rightWall,t.ground]);var h=s.stack(ropeTop.x,ropeTop.y+100,1,rope.segments,0,2*rope.jointSize,function(t,e){return n.circle(t,e,rope.jointSize,{collisionFilter:{group:-3},isStatic:!0})});return s.chain(h,0,0,0,0,{stiffness:1,length:3*rope.jointSize}),o.add(h,a.create({pointB:{x:ropeTop.x+10,y:ropeTop.y+100},pointA:{x:0,y:0},bodyA:h.bodies[0],stiffness:1})),r.add(t.engine.world,h),e.run(t.engine),i.run(t.render),t}function resize(){mtr.width=window.innerWidth,mtr.height=window.innerHeight,mtr.render.canvas.width=mtr.width,mtr.render.canvas.height=mtr.height,mtr.render.options.width=mtr.width,mtr.render.options.height=mtr.height,mtr.leftWall=Matter.Bodies.rectangle(-mtr.pad/2,mtr.height/2,mtr.pad,mtr.height,{isStatic:!0})}function keyPressed(t){keys[t.keyCode]&&("left"==keys[t.keyCode].func&&moveClaw(-4),"right"==keys[t.keyCode].func&&moveClaw(4),"grab"==keys[t.keyCode].func&&(TweenLite.to(mtr.rtPull1,.2,{delay:0,length:10}),TweenLite.to(mtr.rtPull1,1,{delay:1.5,length:80})))}function moveClaw(t){translate(mtr.clawRoot,{x:t,y:0})}function keyReleased(t){keys[t.keyCode]&&(claw.velocity=0)}function loop(){requestAnimationFrame(loop)}var mtr,translate,rope={length:200,jointSize:5,segments:20},ropeTop={x:0,y:50},ropeLength=200;window.addEventListener("load",function(){mtr=init()});var grab=function(){TweenLite.to(mtr.rtPull1,1,{delay:3,length:90,ease:Power3.easeInOut}),TweenLite.to(mtr.clawRoot,2.3,{delay:.5,onUpdate:drop}),TweenLite.to(mtr.clawRoot,2.3,{delay:4.5,onUpdate:lift}),TweenLite.to(mtr.clawRoot,2,{delay:8.5,onUpdate:right}),TweenLite.to(mtr.rtPull1,.5,{delay:11.5,length:220})},drop=function(){Matter.Body.translate(mtr.clawRoot,{x:0,y:2})},lift=function(){Matter.Body.translate(mtr.clawRoot,{x:0,y:-2})},right=function(){Matter.Body.translate(mtr.clawRoot,{x:3,y:0})};window.addEventListener("resize",resize),document.addEventListener("keydown",keyPressed),document.addEventListener("keyup",keyReleased);var claw={position:window.innerWidth/2,velocity:0},keys={37:{func:"left"},39:{func:"right"},32:{func:"grab"}};loop();var _gsScope="undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){_gsScope._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var r=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i},n=function(t,e,i){var r,n,o=t.cycle;for(r in o)n=o[r],t[r]="function"==typeof n?n.call(e[i],i):n[i%n.length];delete t.cycle},o=function(t,e,r){i.call(this,t,e,r),this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0,this.render=o.prototype.render},s=1e-10,a=i._internals,l=a.isSelector,h=a.isArray,c=o.prototype=i.to({},.1,{}),u=[];o.version="1.18.5",c.constructor=o,c.kill()._gc=!1,o.killTweensOf=o.killDelayedCallsTo=i.killTweensOf,o.getTweensOf=i.getTweensOf,o.lagSmoothing=i.lagSmoothing,o.ticker=i.ticker,o.render=i.render,c.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),i.prototype.invalidate.call(this)},c.updateTo=function(t,e){var r,n=this.ratio,o=this.vars.immediateRender||t.immediateRender;e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(r in t)this.vars[r]=t[r];if(this._initted||o)if(e)this._initted=!1,o&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&i._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var s=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(s,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||o)for(var a,l=1/(1-n),h=this._firstPT;h;)a=h.s+h.c,h.c*=l,h.s=a-h.c,h=h._next;return this},c.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var r,n,o,l,h,c,u,p,f=this._dirty?this.totalDuration():this._totalDuration,d=this._time,_=this._totalTime,g=this._cycle,m=this._duration,y=this._rawPrevTime;if(t>=f-1e-7?(this._totalTime=f,this._cycle=this._repeat,this._yoyo&&0!==(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=m,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(r=!0,n="onComplete",i=i||this._timeline.autoRemoveChildren),0===m&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(y<0||t<=0&&t>=-1e-7||y===s&&"isPause"!==this.data)&&y!==t&&(i=!0,y>s&&(n="onReverseComplete")),this._rawPrevTime=p=!e||t||y===t?t:s)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==_||0===m&&y>0)&&(n="onReverseComplete",r=this._reversed),t<0&&(this._active=!1,0===m&&(this._initted||!this.vars.lazy||i)&&(y>=0&&(i=!0),this._rawPrevTime=p=!e||t||y===t?t:s)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=m+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&_<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!==(1&this._cycle)&&(this._time=m-this._time),this._time>m?this._time=m:this._time<0&&(this._time=0)),this._easeType?(h=this._time/m,c=this._easeType,u=this._easePower,(1===c||3===c&&h>=.5)&&(h=1-h),3===c&&(h*=2),1===u?h*=h:2===u?h*=h*h:3===u?h*=h*h*h:4===u&&(h*=h*h*h*h),1===c?this.ratio=1-h:2===c?this.ratio=h:this._time/m<.5?this.ratio=h/2:this.ratio=1-h/2):this.ratio=this._ease.getRatio(this._time/m)),d===this._time&&!i&&g===this._cycle)return void(_!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=d,this._totalTime=_,this._rawPrevTime=y,this._cycle=g,a.lazyTweens.push(this),void(this._lazy=[t,e]);this._time&&!r?this.ratio=this._ease.getRatio(this._time/m):r&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==d&&t>=0&&(this._active=!0),0===_&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,e,i):n||(n="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==m||e||this._callback("onStart"))),o=this._firstPT;o;)o.f?o.t[o.p](o.c*this.ratio+o.s):o.t[o.p]=o.c*this.ratio+o.s,o=o._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,e,i),e||(this._totalTime!==_||n)&&this._callback("onUpdate")),this._cycle!==g&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),n&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,e,i),r&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[n]&&this._callback(n),0===m&&this._rawPrevTime===s&&p!==s&&(this._rawPrevTime=0)))},o.to=function(t,e,i){return new o(t,e,i)},o.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new o(t,e,i)},o.fromTo=function(t,e,i,r){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,new o(t,e,r)},o.staggerTo=o.allTo=function(t,e,s,a,c,p,f){a=a||0;var d,_,g,m,y=0,v=[],S=function(){s.onComplete&&s.onComplete.apply(s.onCompleteScope||this,arguments),c.apply(f||s.callbackScope||this,p||u)},x=s.cycle,b=s.startAt&&s.startAt.cycle;for(h(t)||("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=r(t))),t=t||[],a<0&&(t=r(t),t.reverse(),a*=-1),d=t.length-1,g=0;g<=d;g++){_={};for(m in s)_[m]=s[m];if(x&&(n(_,t,g),null!=_.duration&&(e=_.duration,delete _.duration)),b){b=_.startAt={};for(m in s.startAt)b[m]=s.startAt[m];n(_.startAt,t,g)}_.delay=y+(_.delay||0),g===d&&c&&(_.onComplete=S),v[g]=new o(t[g],e,_),y+=a}return v},o.staggerFrom=o.allFrom=function(t,e,i,r,n,s,a){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,o.staggerTo(t,e,i,r,n,s,a)},o.staggerFromTo=o.allFromTo=function(t,e,i,r,n,s,a,l){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,o.staggerTo(t,e,r,n,s,a,l)},o.delayedCall=function(t,e,i,r,n){return new o(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:n,overwrite:0})},o.set=function(t,e){return new o(t,0,e)},o.isTweening=function(t){return i.getTweensOf(t,!0).length>0};var p=function(t,e){for(var r=[],n=0,o=t._first;o;)o instanceof i?r[n++]=o:(e&&(r[n++]=o),r=r.concat(p(o,e)),n=r.length),o=o._next;return r},f=o.getAllTweens=function(e){return p(t._rootTimeline,e).concat(p(t._rootFramesTimeline,e))};o.killAll=function(t,i,r,n){null==i&&(i=!0),null==r&&(r=!0);var o,s,a,l=f(0!=n),h=l.length,c=i&&r&&n;for(a=0;a<h;a++)s=l[a],(c||s instanceof e||(o=s.target===s.vars.onComplete)&&r||i&&!o)&&(t?s.totalTime(s._reversed?0:s.totalDuration()):s._enabled(!1,!1))},o.killChildTweensOf=function(t,e){if(null!=t){var n,s,c,u,p,f=a.tweenLookup;if("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=r(t)),h(t))for(u=t.length;--u>-1;)o.killChildTweensOf(t[u],e);else{n=[];for(c in f)for(s=f[c].target.parentNode;s;)s===t&&(n=n.concat(f[c].tweens)),s=s.parentNode;for(p=n.length,u=0;u<p;u++)e&&n[u].totalTime(n[u].totalDuration()),n[u]._enabled(!1,!1)}}};var d=function(t,i,r,n){i=i!==!1,r=r!==!1,n=n!==!1;for(var o,s,a=f(n),l=i&&r&&n,h=a.length;--h>-1;)s=a[h],(l||s instanceof e||(o=s.target===s.vars.onComplete)&&r||i&&!o)&&s.paused(t)};return o.pauseAll=function(t,e,i){d(!0,t,e,i)},o.resumeAll=function(t,e,i){d(!1,t,e,i)},o.globalTimeScale=function(e){var r=t._rootTimeline,n=i.ticker.time;return arguments.length?(e=e||s,r._startTime=n-(n-r._startTime)*r._timeScale/e,r=t._rootFramesTimeline,n=i.ticker.frame,r._startTime=n-(n-r._startTime)*r._timeScale/e,r._timeScale=t._rootTimeline._timeScale=e,e):r._timeScale},c.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},c.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},c.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},c.duration=function(e){return arguments.length?t.prototype.duration.call(this,e):this._duration},c.totalDuration=function(t){return arguments.length?this._repeat===-1?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},c.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},c.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},c.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},o},!0),_gsScope._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var r=function(t){e.call(this,t),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var i,r,n=this.vars;for(r in n)i=n[r],l(i)&&i.join("").indexOf("{self}")!==-1&&(n[r]=this._swapSelfInParams(i));l(n.tweens)&&this.add(n.tweens,0,n.align,n.stagger)},n=1e-10,o=i._internals,s=r._internals={},a=o.isSelector,l=o.isArray,h=o.lazyTweens,c=o.lazyRender,u=_gsScope._gsDefine.globals,p=function(t){var e,i={};for(e in t)i[e]=t[e];return i},f=function(t,e,i){var r,n,o=t.cycle;for(r in o)n=o[r],t[r]="function"==typeof n?n.call(e[i],i):n[i%n.length];delete t.cycle},d=s.pauseCallback=function(){},_=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i},g=r.prototype=new e;return r.version="1.18.5",g.constructor=r,g.kill()._gc=g._forcingPlayhead=g._hasPause=!1,g.to=function(t,e,r,n){var o=r.repeat&&u.TweenMax||i;return e?this.add(new o(t,e,r),n):this.set(t,r,n)},g.from=function(t,e,r,n){return this.add((r.repeat&&u.TweenMax||i).from(t,e,r),n)},g.fromTo=function(t,e,r,n,o){var s=n.repeat&&u.TweenMax||i;return e?this.add(s.fromTo(t,e,r,n),o):this.set(t,n,o)},g.staggerTo=function(t,e,n,o,s,l,h,c){var u,d,g=new r({onComplete:l,onCompleteParams:h,callbackScope:c,smoothChildTiming:this.smoothChildTiming}),m=n.cycle;for("string"==typeof t&&(t=i.selector(t)||t),t=t||[],a(t)&&(t=_(t)),o=o||0,o<0&&(t=_(t),t.reverse(),o*=-1),d=0;d<t.length;d++)u=p(n),u.startAt&&(u.startAt=p(u.startAt),u.startAt.cycle&&f(u.startAt,t,d)),m&&(f(u,t,d),null!=u.duration&&(e=u.duration,delete u.duration)),g.to(t[d],e,u,d*o);return this.add(g,s)},g.staggerFrom=function(t,e,i,r,n,o,s,a){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,r,n,o,s,a)},g.staggerFromTo=function(t,e,i,r,n,o,s,a,l){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,r,n,o,s,a,l)},g.call=function(t,e,r,n){return this.add(i.delayedCall(0,t,e,r),n)},g.set=function(t,e,r){return r=this._parseTimeOrLabel(r,0,!0),null==e.immediateRender&&(e.immediateRender=r===this._time&&!this._paused),this.add(new i(t,0,e),r)},r.exportRoot=function(t,e){t=t||{},null==t.smoothChildTiming&&(t.smoothChildTiming=!0);var n,o,s=new r(t),a=s._timeline;for(null==e&&(e=!0),a._remove(s,!0),s._startTime=0,s._rawPrevTime=s._time=s._totalTime=a._time,n=a._first;n;)o=n._next,e&&n instanceof i&&n.target===n.vars.onComplete||s.add(n,n._startTime-n._delay),n=o;return a.add(s,0),s},g.add=function(n,o,s,a){var h,c,u,p,f,d;if("number"!=typeof o&&(o=this._parseTimeOrLabel(o,0,!0,n)),!(n instanceof t)){if(n instanceof Array||n&&n.push&&l(n)){for(s=s||"normal",a=a||0,h=o,c=n.length,u=0;u<c;u++)l(p=n[u])&&(p=new r({tweens:p})),this.add(p,h),"string"!=typeof p&&"function"!=typeof p&&("sequence"===s?h=p._startTime+p.totalDuration()/p._timeScale:"start"===s&&(p._startTime-=p.delay())),h+=a;return this._uncache(!0)}if("string"==typeof n)return this.addLabel(n,o);if("function"!=typeof n)throw"Cannot add "+n+" into the timeline; it is not a tween, timeline, function, or string.";n=i.delayedCall(0,n)}if(e.prototype.add.call(this,n,o),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(f=this,d=f.rawTime()>n._startTime;f._timeline;)d&&f._timeline.smoothChildTiming?f.totalTime(f._totalTime,!0):f._gc&&f._enabled(!0,!1),f=f._timeline;return this},g.remove=function(e){if(e instanceof t){this._remove(e,!1);var i=e._timeline=e.vars.useFrames?t._rootFramesTimeline:t._rootTimeline;return e._startTime=(e._paused?e._pauseTime:i._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&l(e)){for(var r=e.length;--r>-1;)this.remove(e[r]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},g._remove=function(t,i){e.prototype._remove.call(this,t,i);var r=this._last;return r?this._time>r._startTime+r._totalDuration/r._timeScale&&(this._time=this.duration(),this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},g.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},g.insert=g.insertMultiple=function(t,e,i,r){return this.add(t,e||0,i,r)},g.appendMultiple=function(t,e,i,r){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,r)},g.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},g.addPause=function(t,e,r,n){var o=i.delayedCall(0,d,r,n||this);return o.vars.onComplete=o.vars.onReverseComplete=e,o.data="isPause",this._hasPause=!0,this.add(o,t)},g.removeLabel=function(t){return delete this._labels[t],this},g.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},g._parseTimeOrLabel=function(e,i,r,n){var o;if(n instanceof t&&n.timeline===this)this.remove(n);else if(n&&(n instanceof Array||n.push&&l(n)))for(o=n.length;--o>-1;)n[o]instanceof t&&n[o].timeline===this&&this.remove(n[o]);if("string"==typeof i)return this._parseTimeOrLabel(i,r&&"number"==typeof e&&null==this._labels[i]?e-this.duration():0,r);if(i=i||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=this.duration());else{if(o=e.indexOf("="),o===-1)return null==this._labels[e]?r?this._labels[e]=this.duration()+i:i:this._labels[e]+i;i=parseInt(e.charAt(o-1)+"1",10)*Number(e.substr(o+1)),e=o>1?this._parseTimeOrLabel(e.substr(0,o-1),0,r):this.duration()}return Number(e)+i},g.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),e!==!1)},g.stop=function(){return this.paused(!0)},g.gotoAndPlay=function(t,e){return this.play(t,e)},g.gotoAndStop=function(t,e){return this.pause(t,e)},g.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var r,o,s,a,l,u,p,f=this._dirty?this.totalDuration():this._totalDuration,d=this._time,_=this._startTime,g=this._timeScale,m=this._paused;if(t>=f-1e-7)this._totalTime=this._time=f,this._reversed||this._hasPausedChild()||(o=!0,a="onComplete",l=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||this._rawPrevTime===n)&&this._rawPrevTime!==t&&this._first&&(l=!0,this._rawPrevTime>n&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:n,t=f+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==d||0===this._duration&&this._rawPrevTime!==n&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(a="onReverseComplete",o=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(l=o=!0,a="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(l=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:n,0===t&&o)for(r=this._first;r&&0===r._startTime;)r._duration||(o=!1),r=r._next;t=0,this._initted||(l=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=d)for(r=this._first;r&&r._startTime<=t&&!u;)r._duration||"isPause"!==r.data||r.ratio||0===r._startTime&&0===this._rawPrevTime||(u=r),r=r._next;else for(r=this._last;r&&r._startTime>=t&&!u;)r._duration||"isPause"===r.data&&r._rawPrevTime>0&&(u=r),r=r._prev;u&&(this._time=t=u._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==d&&this._first||i||l||u){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==d&&t>0&&(this._active=!0),0===d&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),p=this._time,p>=d)for(r=this._first;r&&(s=r._next,p===this._time&&(!this._paused||m));)(r._active||r._startTime<=p&&!r._paused&&!r._gc)&&(u===r&&this.pause(),r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=s;else for(r=this._last;r&&(s=r._prev,p===this._time&&(!this._paused||m));){if(r._active||r._startTime<=d&&!r._paused&&!r._gc){if(u===r){for(u=r._prev;u&&u.endTime()>this._time;)u.render(u._reversed?u.totalDuration()-(t-u._startTime)*u._timeScale:(t-u._startTime)*u._timeScale,e,i),u=u._prev;u=null,this.pause()}r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)}r=s}this._onUpdate&&(e||(h.length&&c(),this._callback("onUpdate"))),a&&(this._gc||_!==this._startTime&&g===this._timeScale||(0===this._time||f>=this.totalDuration())&&(o&&(h.length&&c(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}},g._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof r&&t._hasPausedChild())return!0;t=t._next}return!1},g.getChildren=function(t,e,r,n){n=n||-9999999999;for(var o=[],s=this._first,a=0;s;)s._startTime<n||(s instanceof i?e!==!1&&(o[a++]=s):(r!==!1&&(o[a++]=s),t!==!1&&(o=o.concat(s.getChildren(!0,e,r)),a=o.length))),s=s._next;return o},g.getTweensOf=function(t,e){var r,n,o=this._gc,s=[],a=0;for(o&&this._enabled(!0,!0),r=i.getTweensOf(t),n=r.length;--n>-1;)(r[n].timeline===this||e&&this._contains(r[n]))&&(s[a++]=r[n]);return o&&this._enabled(!1,!0),s},g.recent=function(){return this._recent},g._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},g.shiftChildren=function(t,e,i){i=i||0;for(var r,n=this._first,o=this._labels;n;)n._startTime>=i&&(n._startTime+=t),n=n._next;if(e)for(r in o)o[r]>=i&&(o[r]+=t);return this._uncache(!0)},g._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),r=i.length,n=!1;--r>-1;)i[r]._kill(t,e)&&(n=!0);return n},g.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return t!==!1&&(this._labels={}),this._uncache(!0)},g.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},g._enabled=function(t,i){if(t===this._gc)for(var r=this._first;r;)r._enabled(t,!0),r=r._next;return e.prototype._enabled.call(this,t,i)},g.totalTime=function(e,i,r){this._forcingPlayhead=!0;var n=t.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,n},g.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},g.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,r=0,n=this._last,o=999999999999;n;)e=n._prev,n._dirty&&n.totalDuration(),n._startTime>o&&this._sortChildren&&!n._paused?this.add(n,n._startTime-n._delay):o=n._startTime,n._startTime<0&&!n._paused&&(r-=n._startTime,this._timeline.smoothChildTiming&&(this._startTime+=n._startTime/this._timeScale),this.shiftChildren(-n._startTime,!1,-9999999999),o=0),i=n._startTime+n._totalDuration/n._timeScale,i>r&&(r=i),n=e;this._duration=this._totalDuration=r,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},g.paused=function(e){if(!e)for(var i=this._first,r=this._time;i;)i._startTime===r&&"isPause"===i.data&&(i._rawPrevTime=0),i=i._next;return t.prototype.paused.apply(this,arguments)},g.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===t._rootFramesTimeline},g.rawTime=function(){return this._paused?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},r},!0),_gsScope._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,e,i){var r=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},n=1e-10,o=e._internals,s=o.lazyTweens,a=o.lazyRender,l=new i(null,null,1,0),h=r.prototype=new t;return h.constructor=r,h.kill()._gc=!1,r.version="1.18.5",h.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},h.addCallback=function(t,i,r,n){return this.add(e.delayedCall(0,t,r,n),i)},h.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),r=i.length,n=this._parseTimeOrLabel(e);--r>-1;)i[r]._startTime===n&&i[r]._enabled(!1,!1);return this},h.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},h.tweenTo=function(t,i){i=i||{};var r,n,o,s={ease:l,useFrames:this.usesFrames(),immediateRender:!1};for(n in i)s[n]=i[n];return s.time=this._parseTimeOrLabel(t),r=Math.abs(Number(s.time)-this._time)/this._timeScale||.001,o=new e(this,r,s),s.onStart=function(){o.target.paused(!0),o.vars.time!==o.target.time()&&r===o.duration()&&o.duration(Math.abs(o.vars.time-o.target.time())/o.target._timeScale),i.onStart&&o._callback("onStart")},o},h.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=i.immediateRender!==!1;var r=this.tweenTo(e,i);return r.duration(Math.abs(r.vars.time-t)/this._timeScale||.001)},h.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var r,o,l,h,c,u,p,f,d=this._dirty?this.totalDuration():this._totalDuration,_=this._duration,g=this._time,m=this._totalTime,y=this._startTime,v=this._timeScale,S=this._rawPrevTime,x=this._paused,b=this._cycle;if(t>=d-1e-7)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(o=!0,h="onComplete",c=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||S<0||S===n)&&S!==t&&this._first&&(c=!0,S>n&&(h="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:n,this._yoyo&&0!==(1&this._cycle)?this._time=t=0:(this._time=_,t=_+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==g||0===_&&S!==n&&(S>0||t<0&&S>=0)&&!this._locked)&&(h="onReverseComplete",o=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(c=o=!0,h="onReverseComplete"):S>=0&&this._first&&(c=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=_||!e||t||this._rawPrevTime===t?t:n,0===t&&o)for(r=this._first;r&&0===r._startTime;)r._duration||(o=!1),r=r._next;t=0,this._initted||(c=!0)}else if(0===_&&S<0&&(c=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(u=_+this._repeatDelay,this._cycle=this._totalTime/u>>0,0!==this._cycle&&this._cycle===this._totalTime/u&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*u,this._yoyo&&0!==(1&this._cycle)&&(this._time=_-this._time),this._time>_?(this._time=_,t=_+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if(t=this._time,t>=g)for(r=this._first;r&&r._startTime<=t&&!p;)r._duration||"isPause"!==r.data||r.ratio||0===r._startTime&&0===this._rawPrevTime||(p=r),r=r._next;else for(r=this._last;r&&r._startTime>=t&&!p;)r._duration||"isPause"===r.data&&r._rawPrevTime>0&&(p=r),r=r._prev;p&&(this._time=t=p._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var P=this._yoyo&&0!==(1&b),w=P===(this._yoyo&&0!==(1&this._cycle)),T=this._totalTime,A=this._cycle,C=this._rawPrevTime,V=this._time;if(this._totalTime=b*_,this._cycle<b?P=!P:this._totalTime+=_,this._time=g,this._rawPrevTime=0===_?S-1e-4:S,this._cycle=b,this._locked=!0,g=P?0:_,this.render(g,e,0===_),e||this._gc||this.vars.onRepeat&&this._callback("onRepeat"),g!==this._time)return;if(w&&(g=P?_+1e-4:-1e-4,this.render(g,!0,!1)),this._locked=!1,this._paused&&!x)return;this._time=V,this._totalTime=T,this._cycle=A,this._rawPrevTime=C}if(!(this._time!==g&&this._first||i||c||p))return void(m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==m&&t>0&&(this._active=!0),0===m&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),f=this._time,f>=g)for(r=this._first;r&&(l=r._next,f===this._time&&(!this._paused||x));)(r._active||r._startTime<=this._time&&!r._paused&&!r._gc)&&(p===r&&this.pause(),r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=l;else for(r=this._last;r&&(l=r._prev,f===this._time&&(!this._paused||x));){if(r._active||r._startTime<=g&&!r._paused&&!r._gc){if(p===r){for(p=r._prev;p&&p.endTime()>this._time;)p.render(p._reversed?p.totalDuration()-(t-p._startTime)*p._timeScale:(t-p._startTime)*p._timeScale,e,i),p=p._prev;p=null,this.pause()}r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)}r=l}this._onUpdate&&(e||(s.length&&a(),this._callback("onUpdate"))),h&&(this._locked||this._gc||y!==this._startTime&&v===this._timeScale||(0===this._time||d>=this.totalDuration())&&(o&&(s.length&&a(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[h]&&this._callback(h)))},h.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var r,n,o=[],s=this.getChildren(t,e,i),a=0,l=s.length;for(r=0;r<l;r++)n=s[r],n.isActive()&&(o[a++]=n);return o},h.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),r=i.length;for(e=0;e<r;e++)if(i[e].time>t)return i[e].name;return null},h.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},h.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},h.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},h.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},h.totalDuration=function(e){return arguments.length?this._repeat!==-1&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},h.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),
this.totalTime(t,e)):this._time},h.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},h.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},h.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},h.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},r},!0),function(){var t=180/Math.PI,e=[],i=[],r=[],n={},o=_gsScope._gsDefine.globals,s=function(t,e,i,r){i===r&&(i=r-(r-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=r,this.da=r-t,this.ca=i-t,this.ba=e-t},a=",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",l=function(t,e,i,r){var n={a:t},o={},s={},a={c:r},l=(t+e)/2,h=(e+i)/2,c=(i+r)/2,u=(l+h)/2,p=(h+c)/2,f=(p-u)/8;return n.b=l+(t-l)/4,o.b=u+f,n.c=o.a=(n.b+o.b)/2,o.c=s.a=(u+p)/2,s.b=p-f,a.b=c+(r-c)/4,s.c=a.a=(s.b+a.b)/2,[n,o,s,a]},h=function(t,n,o,s,a){var h,c,u,p,f,d,_,g,m,y,v,S,x,b=t.length-1,P=0,w=t[0].a;for(h=0;h<b;h++)f=t[P],c=f.a,u=f.d,p=t[P+1].d,a?(v=e[h],S=i[h],x=(S+v)*n*.25/(s?.5:r[h]||.5),d=u-(u-c)*(s?.5*n:0!==v?x/v:0),_=u+(p-u)*(s?.5*n:0!==S?x/S:0),g=u-(d+((_-d)*(3*v/(v+S)+.5)/4||0))):(d=u-(u-c)*n*.5,_=u+(p-u)*n*.5,g=u-(d+_)/2),d+=g,_+=g,f.c=m=d,0!==h?f.b=w:f.b=w=f.a+.6*(f.c-f.a),f.da=u-c,f.ca=m-c,f.ba=w-c,o?(y=l(c,w,m,u),t.splice(P,1,y[0],y[1],y[2],y[3]),P+=4):P++,w=_;f=t[P],f.b=w,f.c=w+.4*(f.d-w),f.da=f.d-f.a,f.ca=f.c-f.a,f.ba=w-f.a,o&&(y=l(f.a,w,f.c,f.d),t.splice(P,1,y[0],y[1],y[2],y[3]))},c=function(t,r,n,o){var a,l,h,c,u,p,f=[];if(o)for(t=[o].concat(t),l=t.length;--l>-1;)"string"==typeof(p=t[l][r])&&"="===p.charAt(1)&&(t[l][r]=o[r]+Number(p.charAt(0)+p.substr(2)));if(a=t.length-2,a<0)return f[0]=new s(t[0][r],0,0,t[a<-1?0:1][r]),f;for(l=0;l<a;l++)h=t[l][r],c=t[l+1][r],f[l]=new s(h,0,0,c),n&&(u=t[l+2][r],e[l]=(e[l]||0)+(c-h)*(c-h),i[l]=(i[l]||0)+(u-c)*(u-c));return f[l]=new s(t[l][r],0,0,t[l+1][r]),f},u=function(t,o,s,l,u,p){var f,d,_,g,m,y,v,S,x={},b=[],P=p||t[0];u="string"==typeof u?","+u+",":a,null==o&&(o=1);for(d in t[0])b.push(d);if(t.length>1){for(S=t[t.length-1],v=!0,f=b.length;--f>-1;)if(d=b[f],Math.abs(P[d]-S[d])>.05){v=!1;break}v&&(t=t.concat(),p&&t.unshift(p),t.push(t[1]),p=t[t.length-3])}for(e.length=i.length=r.length=0,f=b.length;--f>-1;)d=b[f],n[d]=u.indexOf(","+d+",")!==-1,x[d]=c(t,d,n[d],p);for(f=e.length;--f>-1;)e[f]=Math.sqrt(e[f]),i[f]=Math.sqrt(i[f]);if(!l){for(f=b.length;--f>-1;)if(n[d])for(_=x[b[f]],y=_.length-1,g=0;g<y;g++)m=_[g+1].da/i[g]+_[g].da/e[g]||0,r[g]=(r[g]||0)+m*m;for(f=r.length;--f>-1;)r[f]=Math.sqrt(r[f])}for(f=b.length,g=s?4:1;--f>-1;)d=b[f],_=x[d],h(_,o,s,l,n[d]),v&&(_.splice(0,g),_.splice(_.length-g,g));return x},p=function(t,e,i){e=e||"soft";var r,n,o,a,l,h,c,u,p,f,d,_={},g="cubic"===e?3:2,m="soft"===e,y=[];if(m&&i&&(t=[i].concat(t)),null==t||t.length<g+1)throw"invalid Bezier data";for(p in t[0])y.push(p);for(h=y.length;--h>-1;){for(p=y[h],_[p]=l=[],f=0,u=t.length,c=0;c<u;c++)r=null==i?t[c][p]:"string"==typeof(d=t[c][p])&&"="===d.charAt(1)?i[p]+Number(d.charAt(0)+d.substr(2)):Number(d),m&&c>1&&c<u-1&&(l[f++]=(r+l[f-2])/2),l[f++]=r;for(u=f-g+1,f=0,c=0;c<u;c+=g)r=l[c],n=l[c+1],o=l[c+2],a=2===g?0:l[c+3],l[f++]=d=3===g?new s(r,n,o,a):new s(r,(2*n+r)/3,(2*n+o)/3,o);l.length=f}return _},f=function(t,e,i){for(var r,n,o,s,a,l,h,c,u,p,f,d=1/i,_=t.length;--_>-1;)for(p=t[_],o=p.a,s=p.d-o,a=p.c-o,l=p.b-o,r=n=0,c=1;c<=i;c++)h=d*c,u=1-h,r=n-(n=(h*h*s+3*u*(h*a+u*l))*h),f=_*i+c-1,e[f]=(e[f]||0)+r*r},d=function(t,e){e=e>>0||6;var i,r,n,o,s=[],a=[],l=0,h=0,c=e-1,u=[],p=[];for(i in t)f(t[i],s,e);for(n=s.length,r=0;r<n;r++)l+=Math.sqrt(s[r]),o=r%e,p[o]=l,o===c&&(h+=l,o=r/e>>0,u[o]=p,a[o]=h,l=0,p=[]);return{length:h,lengths:a,segments:u}},_=_gsScope._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.6",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._round={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var r,n,o,s,a,l=e.values||[],h={},c=l[0],f=e.autoRotate||i.vars.orientToBezier;this._autoRotate=f?f instanceof Array?f:[["x","y","rotation",f===!0?0:Number(f)||0]]:null;for(r in c)this._props.push(r);for(o=this._props.length;--o>-1;)r=this._props[o],this._overwriteProps.push(r),n=this._func[r]="function"==typeof t[r],h[r]=n?t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]():parseFloat(t[r]),a||h[r]!==l[0][r]&&(a=h);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?u(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,a):p(l,e.type,h),this._segCount=this._beziers[r].length,this._timeRes){var _=d(this._beziers,this._timeRes);this._length=_.length,this._lengths=_.lengths,this._segments=_.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(f=this._autoRotate)for(this._initialRotations=[],f[0]instanceof Array||(this._autoRotate=f=[f]),o=f.length;--o>-1;){for(s=0;s<3;s++)r=f[o][s],this._func[r]="function"==typeof t[r]&&t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)];r=f[o][2],this._initialRotations[o]=(this._func[r]?this._func[r].call(this._target):this._target[r])||0}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var i,r,n,o,s,a,l,h,c,u,p=this._segCount,f=this._func,d=this._target,_=e!==this._startRatio;if(this._timeRes){if(c=this._lengths,u=this._curSeg,e*=this._length,n=this._li,e>this._l2&&n<p-1){for(h=p-1;n<h&&(this._l2=c[++n])<=e;);this._l1=c[n-1],this._li=n,this._curSeg=u=this._segments[n],this._s2=u[this._s1=this._si=0]}else if(e<this._l1&&n>0){for(;n>0&&(this._l1=c[--n])>=e;);0===n&&e<this._l1?this._l1=0:n++,this._l2=c[n],this._li=n,this._curSeg=u=this._segments[n],this._s1=u[(this._si=u.length-1)-1]||0,this._s2=u[this._si]}if(i=n,e-=this._l1,n=this._si,e>this._s2&&n<u.length-1){for(h=u.length-1;n<h&&(this._s2=u[++n])<=e;);this._s1=u[n-1],this._si=n}else if(e<this._s1&&n>0){for(;n>0&&(this._s1=u[--n])>=e;);0===n&&e<this._s1?this._s1=0:n++,this._s2=u[n],this._si=n}a=(n+(e-this._s1)/(this._s2-this._s1))*this._prec||0}else i=e<0?0:e>=1?p-1:p*e>>0,a=(e-i*(1/p))*p;for(r=1-a,n=this._props.length;--n>-1;)o=this._props[n],s=this._beziers[o][i],l=(a*a*s.da+3*r*(a*s.ca+r*s.ba))*a+s.a,this._round[o]&&(l=Math.round(l)),f[o]?d[o](l):d[o]=l;if(this._autoRotate){var g,m,y,v,S,x,b,P=this._autoRotate;for(n=P.length;--n>-1;)o=P[n][2],x=P[n][3]||0,b=P[n][4]===!0?1:t,s=this._beziers[P[n][0]],g=this._beziers[P[n][1]],s&&g&&(s=s[i],g=g[i],m=s.a+(s.b-s.a)*a,v=s.b+(s.c-s.b)*a,m+=(v-m)*a,v+=(s.c+(s.d-s.c)*a-v)*a,y=g.a+(g.b-g.a)*a,S=g.b+(g.c-g.b)*a,y+=(S-y)*a,S+=(g.c+(g.d-g.c)*a-S)*a,l=_?Math.atan2(S-y,v-m)*b+x:this._initialRotations[n],f[o]?d[o](l):d[o]=l)}}}),g=_.prototype;_.bezierThrough=u,_.cubicToQuadratic=l,_._autoCSS=!0,_.quadraticToCubic=function(t,e,i){return new s(t,(2*e+t)/3,(2*e+i)/3,i)},_._cssRegister=function(){var t=o.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,r=e._setPluginRatio,n=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,o,s,a,l){e instanceof Array&&(e={values:e}),l=new _;var h,c,u,p=e.values,f=p.length-1,d=[],g={};if(f<0)return a;for(h=0;h<=f;h++)u=i(t,p[h],s,a,l,f!==h),d[h]=u.end;for(c in e)g[c]=e[c];return g.values=d,a=new n(t,"bezier",0,0,u.pt,2),a.data=u,a.plugin=l,a.setRatio=r,0===g.autoRotate&&(g.autoRotate=!0),!g.autoRotate||g.autoRotate instanceof Array||(h=g.autoRotate===!0?0:Number(g.autoRotate),g.autoRotate=null!=u.end.left?[["left","top","rotation",h,!1]]:null!=u.end.x&&[["x","y","rotation",h,!1]]),g.autoRotate&&(s._transform||s._enableTransforms(!1),u.autoRotate=s._target._gsTransform,u.proxy.rotation=u.autoRotate.rotation||0),l._onInitTween(u.proxy,g,s._tween),a}})}},g._roundProps=function(t,e){for(var i=this._overwriteProps,r=i.length;--r>-1;)(t[i[r]]||t.bezier||t.bezierThrough)&&(this._round[i[r]]=e)},g._kill=function(t){var e,i,r=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=r.length;--i>-1;)r[i]===e&&r.splice(i,1);return this._super._kill.call(this,t)}}(),_gsScope._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var i,r,n,o,s=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=s.prototype.setRatio},a=_gsScope._gsDefine.globals,l={},h=s.prototype=new t("css");h.constructor=s,s.version="1.18.5",s.API=2,s.defaultTransformPerspective=0,s.defaultSkewType="compensated",s.defaultSmoothOrigin=!0,h="px",s.suffixMap={top:h,right:h,bottom:h,left:h,width:h,height:h,fontSize:h,padding:h,margin:h,perspective:h,lineHeight:""};var c,u,p,f,d,_,g=/(?:\-|\.|\b)(\d|\.|e\-)+/g,m=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,y=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,v=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,S=/(?:\d|\-|\+|=|#|\.)*/g,x=/opacity *= *([^)]*)/i,b=/opacity:([^;]*)/i,P=/alpha\(opacity *=.+?\)/i,w=/^(rgb|hsl)/,T=/([A-Z])/g,A=/-([a-z])/gi,C=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,V=function(t,e){return e.toUpperCase()},O=/(?:Left|Right|Width)/i,R=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,G=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,k=/,(?=[^\)]*(?:\(|$))/gi,I=/[\s,\(]/i,E=Math.PI/180,M=180/Math.PI,L={},B=document,N=function(t){return B.createElementNS?B.createElementNS("http://www.w3.org/1999/xhtml",t):B.createElement(t)},D=N("div"),F=N("img"),H=s._internals={_specialProps:l},j=navigator.userAgent,z=function(){var t=j.indexOf("Android"),e=N("a");return p=j.indexOf("Safari")!==-1&&j.indexOf("Chrome")===-1&&(t===-1||Number(j.substr(t+8,1))>3),d=p&&Number(j.substr(j.indexOf("Version/")+8,1))<6,f=j.indexOf("Firefox")!==-1,(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(j)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(j))&&(_=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),U=function(t){return x.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},X=function(t){window.console&&console.log(t)},q="",Q="",W=function(t,e){e=e||D;var i,r,n=e.style;if(void 0!==n[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],r=5;--r>-1&&void 0===n[i[r]+t];);return r>=0?(Q=3===r?"ms":i[r],q="-"+Q.toLowerCase()+"-",Q+t):null},Y=B.defaultView?B.defaultView.getComputedStyle:function(){},Z=s.getStyle=function(t,e,i,r,n){var o;return z||"opacity"!==e?(!r&&t.style[e]?o=t.style[e]:(i=i||Y(t))?o=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(T,"-$1").toLowerCase()):t.currentStyle&&(o=t.currentStyle[e]),null==n||o&&"none"!==o&&"auto"!==o&&"auto auto"!==o?o:n):U(t)},$=H.convertToPixels=function(t,i,r,n,o){if("px"===n||!n)return r;if("auto"===n||!r)return 0;var a,l,h,c=O.test(i),u=t,p=D.style,f=r<0,d=1===r;if(f&&(r=-r),d&&(r*=100),"%"===n&&i.indexOf("border")!==-1)a=r/100*(c?t.clientWidth:t.clientHeight);else{if(p.cssText="border:0 solid red;position:"+Z(t,"position")+";line-height:0;","%"!==n&&u.appendChild&&"v"!==n.charAt(0)&&"rem"!==n)p[c?"borderLeftWidth":"borderTopWidth"]=r+n;else{if(u=t.parentNode||B.body,l=u._gsCache,h=e.ticker.frame,l&&c&&l.time===h)return l.width*r/100;p[c?"width":"height"]=r+n}u.appendChild(D),a=parseFloat(D[c?"offsetWidth":"offsetHeight"]),u.removeChild(D),c&&"%"===n&&s.cacheWidths!==!1&&(l=u._gsCache=u._gsCache||{},l.time=h,l.width=a/r*100),0!==a||o||(a=$(t,i,r,n,!0))}return d&&(a/=100),f?-a:a},K=H.calculateOffset=function(t,e,i){if("absolute"!==Z(t,"position",i))return 0;var r="left"===e?"Left":"Top",n=Z(t,"margin"+r,i);return t["offset"+r]-($(t,e,parseFloat(n),n.replace(S,""))||0)},J=function(t,e){var i,r,n,o={};if(e=e||Y(t,null))if(i=e.length)for(;--i>-1;)n=e[i],n.indexOf("-transform")!==-1&&At!==n||(o[n.replace(A,V)]=e.getPropertyValue(n));else for(i in e)i.indexOf("Transform")!==-1&&Tt!==i||(o[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===o[i]&&(o[i.replace(A,V)]=e[i]);return z||(o.opacity=U(t)),r=Dt(t,e,!1),o.rotation=r.rotation,o.skewX=r.skewX,o.scaleX=r.scaleX,o.scaleY=r.scaleY,o.x=r.x,o.y=r.y,Vt&&(o.z=r.z,o.rotationX=r.rotationX,o.rotationY=r.rotationY,o.scaleZ=r.scaleZ),o.filters&&delete o.filters,o},tt=function(t,e,i,r,n){var o,s,a,l={},h=t.style;for(s in i)"cssText"!==s&&"length"!==s&&isNaN(s)&&(e[s]!==(o=i[s])||n&&n[s])&&s.indexOf("Origin")===-1&&("number"!=typeof o&&"string"!=typeof o||(l[s]="auto"!==o||"left"!==s&&"top"!==s?""!==o&&"auto"!==o&&"none"!==o||"string"!=typeof e[s]||""===e[s].replace(v,"")?o:0:K(t,s),void 0!==h[s]&&(a=new _t(h,s,h[s],a))));if(r)for(s in r)"className"!==s&&(l[s]=r[s]);return{difs:l,firstMPT:a}},et={width:["Left","Right"],height:["Top","Bottom"]},it=["marginLeft","marginRight","marginTop","marginBottom"],rt=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||Y(t))[e]||0;if(t.getBBox&&Lt(t))return t.getBBox()[e]||0;var r=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),n=et[e],o=n.length;for(i=i||Y(t,null);--o>-1;)r-=parseFloat(Z(t,"padding"+n[o],i,!0))||0,r-=parseFloat(Z(t,"border"+n[o]+"Width",i,!0))||0;return r},nt=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,r=t.split(" "),n=t.indexOf("left")!==-1?"0%":t.indexOf("right")!==-1?"100%":r[0],o=t.indexOf("top")!==-1?"0%":t.indexOf("bottom")!==-1?"100%":r[1];if(r.length>3&&!e){for(r=t.split(", ").join(",").split(","),t=[],i=0;i<r.length;i++)t.push(nt(r[i]));return t.join(",")}return null==o?o="center"===n?"50%":"0":"center"===o&&(o="50%"),("center"===n||isNaN(parseFloat(n))&&(n+"").indexOf("=")===-1)&&(n="50%"),t=n+" "+o+(r.length>2?" "+r[2]:""),e&&(e.oxp=n.indexOf("%")!==-1,e.oyp=o.indexOf("%")!==-1,e.oxr="="===n.charAt(1),e.oyr="="===o.charAt(1),e.ox=parseFloat(n.replace(v,"")),e.oy=parseFloat(o.replace(v,"")),e.v=t),e||t},ot=function(t,e){return"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},st=function(t,e){return null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},at=function(t,e,i,r){var n,o,s,a,l,h=1e-6;return null==t?a=e:"number"==typeof t?a=t:(n=360,o=t.split("_"),l="="===t.charAt(1),s=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(o[0].substr(2)):parseFloat(o[0]))*(t.indexOf("rad")===-1?1:M)-(l?0:e),o.length&&(r&&(r[i]=e+s),t.indexOf("short")!==-1&&(s%=n,s!==s%(n/2)&&(s=s<0?s+n:s-n)),t.indexOf("_cw")!==-1&&s<0?s=(s+9999999999*n)%n-(s/n|0)*n:t.indexOf("ccw")!==-1&&s>0&&(s=(s-9999999999*n)%n-(s/n|0)*n)),a=e+s),a<h&&a>-h&&(a=0),a},lt={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ht=function(t,e,i){return t=t<0?t+1:t>1?t-1:t,255*(6*t<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},ct=s.parseColor=function(t,e){var i,r,n,o,s,a,l,h,c,u,p;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),lt[t])i=lt[t];else if("#"===t.charAt(0))4===t.length&&(r=t.charAt(1),n=t.charAt(2),o=t.charAt(3),t="#"+r+r+n+n+o+o),t=parseInt(t.substr(1),16),i=[t>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=p=t.match(g),e){if(t.indexOf("=")!==-1)return t.match(m)}else s=Number(i[0])%360/360,a=Number(i[1])/100,l=Number(i[2])/100,n=l<=.5?l*(a+1):l+a-l*a,r=2*l-n,i.length>3&&(i[3]=Number(t[3])),i[0]=ht(s+1/3,r,n),i[1]=ht(s,r,n),i[2]=ht(s-1/3,r,n);else i=t.match(g)||lt.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=lt.black;return e&&!p&&(r=i[0]/255,n=i[1]/255,o=i[2]/255,h=Math.max(r,n,o),c=Math.min(r,n,o),l=(h+c)/2,h===c?s=a=0:(u=h-c,a=l>.5?u/(2-h-c):u/(h+c),s=h===r?(n-o)/u+(n<o?6:0):h===n?(o-r)/u+2:(r-n)/u+4,s*=60),i[0]=s+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},ut=function(t,e){var i,r,n,o=t.match(pt)||[],s=0,a=o.length?"":t;for(i=0;i<o.length;i++)r=o[i],n=t.substr(s,t.indexOf(r,s)-s),s+=n.length+r.length,r=ct(r,e),3===r.length&&r.push(1),a+=n+(e?"hsla("+r[0]+","+r[1]+"%,"+r[2]+"%,"+r[3]:"rgba("+r.join(","))+")";return a+t.substr(s)},pt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(h in lt)pt+="|"+h+"\\b";pt=new RegExp(pt+")","gi"),s.colorStringFilter=function(t){var e,i=t[0]+t[1];pt.test(i)&&(e=i.indexOf("hsl(")!==-1||i.indexOf("hsla(")!==-1,t[0]=ut(t[0],e),t[1]=ut(t[1],e)),pt.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=s.colorStringFilter);var ft=function(t,e,i,r){if(null==t)return function(t){return t};var n,o=e?(t.match(pt)||[""])[0]:"",s=t.split(o).join("").match(y)||[],a=t.substr(0,t.indexOf(s[0])),l=")"===t.charAt(t.length-1)?")":"",h=t.indexOf(" ")!==-1?" ":",",c=s.length,u=c>0?s[0].replace(g,""):"";return c?n=e?function(t){var e,p,f,d;if("number"==typeof t)t+=u;else if(r&&k.test(t)){for(d=t.replace(k,"|").split("|"),f=0;f<d.length;f++)d[f]=n(d[f]);return d.join(",")}if(e=(t.match(pt)||[o])[0],p=t.split(e).join("").match(y)||[],f=p.length,c>f--)for(;++f<c;)p[f]=i?p[(f-1)/2|0]:s[f];return a+p.join(h)+h+e+l+(t.indexOf("inset")!==-1?" inset":"")}:function(t){var e,o,p;if("number"==typeof t)t+=u;else if(r&&k.test(t)){for(o=t.replace(k,"|").split("|"),p=0;p<o.length;p++)o[p]=n(o[p]);return o.join(",")}if(e=t.match(y)||[],p=e.length,c>p--)for(;++p<c;)e[p]=i?e[(p-1)/2|0]:s[p];return a+e.join(h)+l}:function(t){return t}},dt=function(t){return t=t.split(","),function(e,i,r,n,o,s,a){var l,h=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=h[l]=h[l]||h[(l-1)/2>>0];return n.parse(e,a,o,s)}},_t=(H._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,r,n,o,s=this.data,a=s.proxy,l=s.firstMPT,h=1e-6;l;)e=a[l.v],l.r?e=Math.round(e):e<h&&e>-h&&(e=0),l.t[l.p]=e,l=l._next;if(s.autoRotate&&(s.autoRotate.rotation=a.rotation),1===t||0===t)for(l=s.firstMPT,o=1===t?"e":"b";l;){if(i=l.t,i.type){if(1===i.type){for(n=i.xs0+i.s+i.xs1,r=1;r<i.l;r++)n+=i["xn"+r]+i["xs"+(r+1)];i[o]=n}}else i[o]=i.s+i.xs0;l=l._next}},function(t,e,i,r,n){this.t=t,this.p=e,this.v=i,this.r=n,r&&(r._prev=this,this._next=r)}),gt=(H._parseToProxy=function(t,e,i,r,n,o){var s,a,l,h,c,u=r,p={},f={},d=i._transform,_=L;for(i._transform=null,L=e,r=c=i.parse(t,e,r,n),L=_,o&&(i._transform=d,u&&(u._prev=null,u._prev&&(u._prev._next=null)));r&&r!==u;){if(r.type<=1&&(a=r.p,f[a]=r.s+r.c,p[a]=r.s,o||(h=new _t(r,"s",a,h,r.r),r.c=0),1===r.type))for(s=r.l;--s>0;)l="xn"+s,a=r.p+"_"+l,f[a]=r.data[l],p[a]=r[l],o||(h=new _t(r,l,a,h,r.rxp[l]));r=r._next}return{proxy:p,end:f,firstMPT:h,pt:c}},H.CSSPropTween=function(t,e,r,n,s,a,l,h,c,u,p){this.t=t,this.p=e,this.s=r,this.c=n,this.n=l||e,t instanceof gt||o.push(this.n),this.r=h,this.type=a||0,c&&(this.pr=c,i=!0),this.b=void 0===u?r:u,this.e=void 0===p?r+n:p,s&&(this._next=s,s._prev=this)}),mt=function(t,e,i,r,n,o){var s=new gt(t,e,i,r-i,n,(-1),o);return s.b=i,s.e=s.xs0=r,s},yt=s.parseComplex=function(t,e,i,r,n,o,a,l,h,u){i=i||o||"",a=new gt(t,e,0,0,a,u?2:1,null,(!1),l,i,r),r+="",n&&pt.test(r+i)&&(r=[i,r],s.colorStringFilter(r),i=r[0],r=r[1]);var p,f,d,_,y,v,S,x,b,P,w,T,A,C=i.split(", ").join(",").split(" "),V=r.split(", ").join(",").split(" "),O=C.length,R=c!==!1;for(r.indexOf(",")===-1&&i.indexOf(",")===-1||(C=C.join(" ").replace(k,", ").split(" "),V=V.join(" ").replace(k,", ").split(" "),O=C.length),O!==V.length&&(C=(o||"").split(" "),O=C.length),a.plugin=h,a.setRatio=u,pt.lastIndex=0,p=0;p<O;p++)if(_=C[p],y=V[p],x=parseFloat(_),x||0===x)a.appendXtra("",x,ot(y,x),y.replace(m,""),R&&y.indexOf("px")!==-1,!0);else if(n&&pt.test(_))T=y.indexOf(")")+1,T=")"+(T?y.substr(T):""),A=y.indexOf("hsl")!==-1&&z,_=ct(_,A),y=ct(y,A),b=_.length+y.length>6,b&&!z&&0===y[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(V[p]).join("transparent")):(z||(b=!1),A?a.appendXtra(b?"hsla(":"hsl(",_[0],ot(y[0],_[0]),",",!1,!0).appendXtra("",_[1],ot(y[1],_[1]),"%,",!1).appendXtra("",_[2],ot(y[2],_[2]),b?"%,":"%"+T,!1):a.appendXtra(b?"rgba(":"rgb(",_[0],y[0]-_[0],",",!0,!0).appendXtra("",_[1],y[1]-_[1],",",!0).appendXtra("",_[2],y[2]-_[2],b?",":T,!0),b&&(_=_.length<4?1:_[3],a.appendXtra("",_,(y.length<4?1:y[3])-_,T,!1))),pt.lastIndex=0;else if(v=_.match(g)){if(S=y.match(m),!S||S.length!==v.length)return a;for(d=0,f=0;f<v.length;f++)w=v[f],P=_.indexOf(w,d),a.appendXtra(_.substr(d,P-d),Number(w),ot(S[f],w),"",R&&"px"===_.substr(P+w.length,2),0===f),d=P+w.length;a["xs"+a.l]+=_.substr(d)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+y:y;if(r.indexOf("=")!==-1&&a.data){for(T=a.xs0+a.data.s,p=1;p<a.l;p++)T+=a["xs"+p]+a.data["xn"+p];a.e=T+a["xs"+p]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},vt=9;for(h=gt.prototype,h.l=h.pr=0;--vt>0;)h["xn"+vt]=0,h["xs"+vt]="";h.xs0="",h._next=h._prev=h.xfirst=h.data=h.plugin=h.setRatio=h.rxp=null,h.appendXtra=function(t,e,i,r,n,o){var s=this,a=s.l;return s["xs"+a]+=o&&(a||s["xs"+a])?" "+t:t||"",i||0===a||s.plugin?(s.l++,s.type=s.setRatio?2:1,s["xs"+s.l]=r||"",a>0?(s.data["xn"+a]=e+i,s.rxp["xn"+a]=n,s["xn"+a]=e,s.plugin||(s.xfirst=new gt(s,"xn"+a,e,i,s.xfirst||s,0,s.n,n,s.pr),s.xfirst.xs0=0),s):(s.data={s:e+i},s.rxp={},s.s=e,s.c=i,s.r=n,s)):(s["xs"+a]+=e+(r||""),s)};var St=function(t,e){e=e||{},this.p=e.prefix?W(t)||t:t,l[t]=l[this.p]=this,this.format=e.formatter||ft(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},xt=H._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var r,n,o=t.split(","),s=e.defaultValue;for(i=i||[s],r=0;r<o.length;r++)e.prefix=0===r&&e.prefix,e.defaultValue=i[r]||s,n=new St(o[r],e)},bt=function(t){if(!l[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";xt(t,{parser:function(t,i,r,n,o,s,h){var c=a.com.greensock.plugins[e];return c?(c._cssRegister(),l[r].parse(t,i,r,n,o,s,h)):(X("Error: "+e+" js file not loaded."),o)}})}};h=St.prototype,h.parseComplex=function(t,e,i,r,n,o){var s,a,l,h,c,u,p=this.keyword;if(this.multi&&(k.test(i)||k.test(e)?(a=e.replace(k,"|").split("|"),l=i.replace(k,"|").split("|")):p&&(a=[e],l=[i])),l){for(h=l.length>a.length?l.length:a.length,s=0;s<h;s++)e=a[s]=a[s]||this.dflt,i=l[s]=l[s]||this.dflt,p&&(c=e.indexOf(p),u=i.indexOf(p),c!==u&&(u===-1?a[s]=a[s].split(p).join(""):c===-1&&(a[s]+=" "+p)));e=a.join(", "),i=l.join(", ")}return yt(t,this.p,e,i,this.clrs,this.dflt,r,this.pr,n,o)},h.parse=function(t,e,i,r,o,s,a){return this.parseComplex(t.style,this.format(Z(t,this.p,n,!1,this.dflt)),this.format(e),o,s)},s.registerSpecialProp=function(t,e,i){xt(t,{parser:function(t,r,n,o,s,a,l){var h=new gt(t,n,0,0,s,2,n,(!1),i);return h.plugin=a,h.setRatio=e(t,r,o._tween,n),h},priority:i})},s.useSVGTransformAttr=p||f;var Pt,wt="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Tt=W("transform"),At=q+"transform",Ct=W("transformOrigin"),Vt=null!==W("perspective"),Ot=H.Transform=function(){this.perspective=parseFloat(s.defaultTransformPerspective)||0,this.force3D=!(s.defaultForce3D===!1||!Vt)&&(s.defaultForce3D||"auto")},Rt=window.SVGElement,Gt=function(t,e,i){var r,n=B.createElementNS("http://www.w3.org/2000/svg",t),o=/([a-z])([A-Z])/g;for(r in i)n.setAttributeNS(null,r.replace(o,"$1-$2").toLowerCase(),i[r]);return e.appendChild(n),n},kt=B.documentElement,It=function(){var t,e,i,r=_||/Android/i.test(j)&&!window.chrome;return B.createElementNS&&!r&&(t=Gt("svg",kt),e=Gt("rect",t,{width:100,height:50,x:100}),i=e.getBoundingClientRect().width,e.style[Ct]="50% 50%",e.style[Tt]="scaleX(0.5)",r=i===e.getBoundingClientRect().width&&!(f&&Vt),kt.removeChild(t)),r}(),Et=function(t,e,i,r,n,o){var a,l,h,c,u,p,f,d,_,g,m,y,v,S,x=t._gsTransform,b=Nt(t,!0);x&&(v=x.xOrigin,S=x.yOrigin),(!r||(a=r.split(" ")).length<2)&&(f=t.getBBox(),e=nt(e).split(" "),a=[(e[0].indexOf("%")!==-1?parseFloat(e[0])/100*f.width:parseFloat(e[0]))+f.x,(e[1].indexOf("%")!==-1?parseFloat(e[1])/100*f.height:parseFloat(e[1]))+f.y]),i.xOrigin=c=parseFloat(a[0]),i.yOrigin=u=parseFloat(a[1]),r&&b!==Bt&&(p=b[0],f=b[1],d=b[2],_=b[3],g=b[4],m=b[5],y=p*_-f*d,l=c*(_/y)+u*(-d/y)+(d*m-_*g)/y,h=c*(-f/y)+u*(p/y)-(p*m-f*g)/y,c=i.xOrigin=a[0]=l,u=i.yOrigin=a[1]=h),x&&(o&&(i.xOffset=x.xOffset,i.yOffset=x.yOffset,x=i),n||n!==!1&&s.defaultSmoothOrigin!==!1?(l=c-v,h=u-S,x.xOffset+=l*b[0]+h*b[2]-l,x.yOffset+=l*b[1]+h*b[3]-h):x.xOffset=x.yOffset=0),o||t.setAttribute("data-svg-origin",a.join(" "))},Mt=function(t){try{return t.getBBox()}catch(t){}},Lt=function(t){return!!(Rt&&t.getBBox&&t.getCTM&&Mt(t)&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},Bt=[1,0,0,1,0,0],Nt=function(t,e){var i,r,n,o,s,a,l=t._gsTransform||new Ot,h=1e5,c=t.style;if(Tt?r=Z(t,At,null,!0):t.currentStyle&&(r=t.currentStyle.filter.match(R),r=r&&4===r.length?[r[0].substr(4),Number(r[2].substr(4)),Number(r[1].substr(4)),r[3].substr(4),l.x||0,l.y||0].join(","):""),i=!r||"none"===r||"matrix(1, 0, 0, 1, 0, 0)"===r,i&&Tt&&((a="none"===Y(t).display)||!t.parentNode)&&(a&&(o=c.display,c.display="block"),t.parentNode||(s=1,kt.appendChild(t)),r=Z(t,At,null,!0),i=!r||"none"===r||"matrix(1, 0, 0, 1, 0, 0)"===r,o?c.display=o:a&&zt(c,"display"),s&&kt.removeChild(t)),(l.svg||t.getBBox&&Lt(t))&&(i&&(c[Tt]+"").indexOf("matrix")!==-1&&(r=c[Tt],i=0),n=t.getAttribute("transform"),i&&n&&(n.indexOf("matrix")!==-1?(r=n,i=0):n.indexOf("translate")!==-1&&(r="matrix(1,0,0,1,"+n.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return Bt;for(n=(r||"").match(g)||[],vt=n.length;--vt>-1;)o=Number(n[vt]),n[vt]=(s=o-(o|=0))?(s*h+(s<0?-.5:.5)|0)/h+o:o;return e&&n.length>6?[n[0],n[1],n[4],n[5],n[12],n[13]]:n},Dt=H.getTransform=function(t,i,r,n){if(t._gsTransform&&r&&!n)return t._gsTransform;var o,a,l,h,c,u,p=r?t._gsTransform||new Ot:new Ot,f=p.scaleX<0,d=2e-5,_=1e5,g=Vt?parseFloat(Z(t,Ct,i,!1,"0 0 0").split(" ")[2])||p.zOrigin||0:0,m=parseFloat(s.defaultTransformPerspective)||0;if(p.svg=!(!t.getBBox||!Lt(t)),p.svg&&(Et(t,Z(t,Ct,i,!1,"50% 50%")+"",p,t.getAttribute("data-svg-origin")),Pt=s.useSVGTransformAttr||It),o=Nt(t),o!==Bt){if(16===o.length){var y,v,S,x,b,P=o[0],w=o[1],T=o[2],A=o[3],C=o[4],V=o[5],O=o[6],R=o[7],G=o[8],k=o[9],I=o[10],E=o[12],L=o[13],B=o[14],N=o[11],D=Math.atan2(O,I);p.zOrigin&&(B=-p.zOrigin,E=G*B-o[12],L=k*B-o[13],B=I*B+p.zOrigin-o[14]),p.rotationX=D*M,D&&(x=Math.cos(-D),b=Math.sin(-D),y=C*x+G*b,v=V*x+k*b,S=O*x+I*b,G=C*-b+G*x,k=V*-b+k*x,I=O*-b+I*x,N=R*-b+N*x,C=y,V=v,O=S),D=Math.atan2(-T,I),p.rotationY=D*M,D&&(x=Math.cos(-D),b=Math.sin(-D),y=P*x-G*b,v=w*x-k*b,S=T*x-I*b,k=w*b+k*x,I=T*b+I*x,N=A*b+N*x,P=y,w=v,T=S),D=Math.atan2(w,P),p.rotation=D*M,D&&(x=Math.cos(-D),b=Math.sin(-D),P=P*x+C*b,v=w*x+V*b,V=w*-b+V*x,O=T*-b+O*x,w=v),p.rotationX&&Math.abs(p.rotationX)+Math.abs(p.rotation)>359.9&&(p.rotationX=p.rotation=0,p.rotationY=180-p.rotationY),p.scaleX=(Math.sqrt(P*P+w*w)*_+.5|0)/_,p.scaleY=(Math.sqrt(V*V+k*k)*_+.5|0)/_,p.scaleZ=(Math.sqrt(O*O+I*I)*_+.5|0)/_,p.rotationX||p.rotationY?p.skewX=0:(p.skewX=C||V?Math.atan2(C,V)*M+p.rotation:p.skewX||0,Math.abs(p.skewX)>90&&Math.abs(p.skewX)<270&&(f?(p.scaleX*=-1,p.skewX+=p.rotation<=0?180:-180,p.rotation+=p.rotation<=0?180:-180):(p.scaleY*=-1,p.skewX+=p.skewX<=0?180:-180))),p.perspective=N?1/(N<0?-N:N):0,p.x=E,p.y=L,p.z=B,p.svg&&(p.x-=p.xOrigin-(p.xOrigin*P-p.yOrigin*C),p.y-=p.yOrigin-(p.yOrigin*w-p.xOrigin*V))}else if(!Vt||n||!o.length||p.x!==o[4]||p.y!==o[5]||!p.rotationX&&!p.rotationY){var F=o.length>=6,H=F?o[0]:1,j=o[1]||0,z=o[2]||0,U=F?o[3]:1;p.x=o[4]||0,p.y=o[5]||0,l=Math.sqrt(H*H+j*j),h=Math.sqrt(U*U+z*z),c=H||j?Math.atan2(j,H)*M:p.rotation||0,u=z||U?Math.atan2(z,U)*M+c:p.skewX||0,Math.abs(u)>90&&Math.abs(u)<270&&(f?(l*=-1,u+=c<=0?180:-180,c+=c<=0?180:-180):(h*=-1,u+=u<=0?180:-180)),p.scaleX=l,p.scaleY=h,p.rotation=c,p.skewX=u,Vt&&(p.rotationX=p.rotationY=p.z=0,p.perspective=m,p.scaleZ=1),p.svg&&(p.x-=p.xOrigin-(p.xOrigin*H+p.yOrigin*z),p.y-=p.yOrigin-(p.xOrigin*j+p.yOrigin*U))}p.zOrigin=g;for(a in p)p[a]<d&&p[a]>-d&&(p[a]=0)}return r&&(t._gsTransform=p,p.svg&&(Pt&&t.style[Tt]?e.delayedCall(.001,function(){zt(t.style,Tt)}):!Pt&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),p},Ft=function(t){var e,i,r=this.data,n=-r.rotation*E,o=n+r.skewX*E,s=1e5,a=(Math.cos(n)*r.scaleX*s|0)/s,l=(Math.sin(n)*r.scaleX*s|0)/s,h=(Math.sin(o)*-r.scaleY*s|0)/s,c=(Math.cos(o)*r.scaleY*s|0)/s,u=this.t.style,p=this.t.currentStyle;if(p){i=l,l=-h,h=-i,e=p.filter,u.filter="";var f,d,g=this.t.offsetWidth,m=this.t.offsetHeight,y="absolute"!==p.position,v="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+l+", M21="+h+", M22="+c,b=r.x+g*r.xPercent/100,P=r.y+m*r.yPercent/100;if(null!=r.ox&&(f=(r.oxp?g*r.ox*.01:r.ox)-g/2,d=(r.oyp?m*r.oy*.01:r.oy)-m/2,b+=f-(f*a+d*l),P+=d-(f*h+d*c)),y?(f=g/2,d=m/2,v+=", Dx="+(f-(f*a+d*l)+b)+", Dy="+(d-(f*h+d*c)+P)+")"):v+=", sizingMethod='auto expand')",e.indexOf("DXImageTransform.Microsoft.Matrix(")!==-1?u.filter=e.replace(G,v):u.filter=v+" "+e,0!==t&&1!==t||1===a&&0===l&&0===h&&1===c&&(y&&v.indexOf("Dx=0, Dy=0")===-1||x.test(e)&&100!==parseFloat(RegExp.$1)||e.indexOf(e.indexOf("Alpha"))===-1&&u.removeAttribute("filter")),!y){var w,T,A,C=_<8?1:-1;for(f=r.ieOffsetX||0,d=r.ieOffsetY||0,r.ieOffsetX=Math.round((g-((a<0?-a:a)*g+(l<0?-l:l)*m))/2+b),r.ieOffsetY=Math.round((m-((c<0?-c:c)*m+(h<0?-h:h)*g))/2+P),vt=0;vt<4;vt++)T=it[vt],w=p[T],i=w.indexOf("px")!==-1?parseFloat(w):$(this.t,T,parseFloat(w),w.replace(S,""))||0,A=i!==r[T]?vt<2?-r.ieOffsetX:-r.ieOffsetY:vt<2?f-r.ieOffsetX:d-r.ieOffsetY,u[T]=(r[T]=Math.round(i-A*(0===vt||2===vt?1:C)))+"px"}}},Ht=H.set3DTransformRatio=H.setTransformRatio=function(t){var e,i,r,n,o,s,a,l,h,c,u,p,d,_,g,m,y,v,S,x,b,P,w,T=this.data,A=this.t.style,C=T.rotation,V=T.rotationX,O=T.rotationY,R=T.scaleX,G=T.scaleY,k=T.scaleZ,I=T.x,M=T.y,L=T.z,B=T.svg,N=T.perspective,D=T.force3D;if(((1===t||0===t)&&"auto"===D&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!D)&&!L&&!N&&!O&&!V&&1===k||Pt&&B||!Vt)return void(C||T.skewX||B?(C*=E,P=T.skewX*E,w=1e5,e=Math.cos(C)*R,n=Math.sin(C)*R,i=Math.sin(C-P)*-G,o=Math.cos(C-P)*G,P&&"simple"===T.skewType&&(y=Math.tan(P),y=Math.sqrt(1+y*y),i*=y,o*=y,T.skewY&&(e*=y,n*=y)),B&&(I+=T.xOrigin-(T.xOrigin*e+T.yOrigin*i)+T.xOffset,M+=T.yOrigin-(T.xOrigin*n+T.yOrigin*o)+T.yOffset,Pt&&(T.xPercent||T.yPercent)&&(_=this.t.getBBox(),I+=.01*T.xPercent*_.width,M+=.01*T.yPercent*_.height),_=1e-6,I<_&&I>-_&&(I=0),M<_&&M>-_&&(M=0)),S=(e*w|0)/w+","+(n*w|0)/w+","+(i*w|0)/w+","+(o*w|0)/w+","+I+","+M+")",B&&Pt?this.t.setAttribute("transform","matrix("+S):A[Tt]=(T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) matrix(":"matrix(")+S):A[Tt]=(T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+G+","+I+","+M+")");if(f&&(_=1e-4,R<_&&R>-_&&(R=k=2e-5),G<_&&G>-_&&(G=k=2e-5),!N||T.z||T.rotationX||T.rotationY||(N=0)),C||T.skewX)C*=E,g=e=Math.cos(C),m=n=Math.sin(C),T.skewX&&(C-=T.skewX*E,g=Math.cos(C),m=Math.sin(C),"simple"===T.skewType&&(y=Math.tan(T.skewX*E),y=Math.sqrt(1+y*y),g*=y,m*=y,T.skewY&&(e*=y,n*=y))),i=-m,o=g;else{if(!(O||V||1!==k||N||B))return void(A[Tt]=(T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) translate3d(":"translate3d(")+I+"px,"+M+"px,"+L+"px)"+(1!==R||1!==G?" scale("+R+","+G+")":""));e=o=1,i=n=0}h=1,r=s=a=l=c=u=0,p=N?-1/N:0,d=T.zOrigin,_=1e-6,x=",",b="0",C=O*E,C&&(g=Math.cos(C),m=Math.sin(C),a=-m,c=p*-m,r=e*m,s=n*m,h=g,p*=g,e*=g,n*=g),C=V*E,C&&(g=Math.cos(C),m=Math.sin(C),y=i*g+r*m,v=o*g+s*m,l=h*m,u=p*m,r=i*-m+r*g,s=o*-m+s*g,h*=g,p*=g,i=y,o=v),1!==k&&(r*=k,s*=k,h*=k,p*=k),1!==G&&(i*=G,o*=G,l*=G,u*=G),1!==R&&(e*=R,n*=R,a*=R,c*=R),(d||B)&&(d&&(I+=r*-d,M+=s*-d,L+=h*-d+d),B&&(I+=T.xOrigin-(T.xOrigin*e+T.yOrigin*i)+T.xOffset,
M+=T.yOrigin-(T.xOrigin*n+T.yOrigin*o)+T.yOffset),I<_&&I>-_&&(I=b),M<_&&M>-_&&(M=b),L<_&&L>-_&&(L=0)),S=T.xPercent||T.yPercent?"translate("+T.xPercent+"%,"+T.yPercent+"%) matrix3d(":"matrix3d(",S+=(e<_&&e>-_?b:e)+x+(n<_&&n>-_?b:n)+x+(a<_&&a>-_?b:a),S+=x+(c<_&&c>-_?b:c)+x+(i<_&&i>-_?b:i)+x+(o<_&&o>-_?b:o),V||O||1!==k?(S+=x+(l<_&&l>-_?b:l)+x+(u<_&&u>-_?b:u)+x+(r<_&&r>-_?b:r),S+=x+(s<_&&s>-_?b:s)+x+(h<_&&h>-_?b:h)+x+(p<_&&p>-_?b:p)+x):S+=",0,0,0,0,1,0,",S+=I+x+M+x+L+x+(N?1+-L/N:1)+")",A[Tt]=S};h=Ot.prototype,h.x=h.y=h.z=h.skewX=h.skewY=h.rotation=h.rotationX=h.rotationY=h.zOrigin=h.xPercent=h.yPercent=h.xOffset=h.yOffset=0,h.scaleX=h.scaleY=h.scaleZ=1,xt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,r,o,a,l){if(r._lastParsedTransform===l)return o;r._lastParsedTransform=l;var h,c,u,p,f,d,_,g,m,y=t._gsTransform,v=t.style,S=1e-6,x=wt.length,b=l,P={},w="transformOrigin",T=Dt(t,n,!0,l.parseTransform);if(r._transform=T,"string"==typeof b.transform&&Tt)c=D.style,c[Tt]=b.transform,c.display="block",c.position="absolute",B.body.appendChild(D),h=Dt(D,null,!1),T.svg&&(_=T.xOrigin,g=T.yOrigin,h.x-=T.xOffset,h.y-=T.yOffset,(b.transformOrigin||b.svgOrigin)&&(u={},Et(t,nt(b.transformOrigin),u,b.svgOrigin,b.smoothOrigin,!0),_=u.xOrigin,g=u.yOrigin,h.x-=u.xOffset-T.xOffset,h.y-=u.yOffset-T.yOffset),(_||g)&&(m=Nt(D,!0),h.x-=_-(_*m[0]+g*m[2]),h.y-=g-(_*m[1]+g*m[3]))),B.body.removeChild(D),h.perspective||(h.perspective=T.perspective),null!=b.xPercent&&(h.xPercent=st(b.xPercent,T.xPercent)),null!=b.yPercent&&(h.yPercent=st(b.yPercent,T.yPercent));else if("object"==typeof b){if(h={scaleX:st(null!=b.scaleX?b.scaleX:b.scale,T.scaleX),scaleY:st(null!=b.scaleY?b.scaleY:b.scale,T.scaleY),scaleZ:st(b.scaleZ,T.scaleZ),x:st(b.x,T.x),y:st(b.y,T.y),z:st(b.z,T.z),xPercent:st(b.xPercent,T.xPercent),yPercent:st(b.yPercent,T.yPercent),perspective:st(b.transformPerspective,T.perspective)},d=b.directionalRotation,null!=d)if("object"==typeof d)for(c in d)b[c]=d[c];else b.rotation=d;"string"==typeof b.x&&b.x.indexOf("%")!==-1&&(h.x=0,h.xPercent=st(b.x,T.xPercent)),"string"==typeof b.y&&b.y.indexOf("%")!==-1&&(h.y=0,h.yPercent=st(b.y,T.yPercent)),h.rotation=at("rotation"in b?b.rotation:"shortRotation"in b?b.shortRotation+"_short":"rotationZ"in b?b.rotationZ:T.rotation-T.skewY,T.rotation-T.skewY,"rotation",P),Vt&&(h.rotationX=at("rotationX"in b?b.rotationX:"shortRotationX"in b?b.shortRotationX+"_short":T.rotationX||0,T.rotationX,"rotationX",P),h.rotationY=at("rotationY"in b?b.rotationY:"shortRotationY"in b?b.shortRotationY+"_short":T.rotationY||0,T.rotationY,"rotationY",P)),h.skewX=at(b.skewX,T.skewX-T.skewY),(h.skewY=at(b.skewY,T.skewY))&&(h.skewX+=h.skewY,h.rotation+=h.skewY)}for(Vt&&null!=b.force3D&&(T.force3D=b.force3D,f=!0),T.skewType=b.skewType||T.skewType||s.defaultSkewType,p=T.force3D||T.z||T.rotationX||T.rotationY||h.z||h.rotationX||h.rotationY||h.perspective,p||null==b.scale||(h.scaleZ=1);--x>-1;)i=wt[x],u=h[i]-T[i],(u>S||u<-S||null!=b[i]||null!=L[i])&&(f=!0,o=new gt(T,i,T[i],u,o),i in P&&(o.e=P[i]),o.xs0=0,o.plugin=a,r._overwriteProps.push(o.n));return u=b.transformOrigin,T.svg&&(u||b.svgOrigin)&&(_=T.xOffset,g=T.yOffset,Et(t,nt(u),h,b.svgOrigin,b.smoothOrigin),o=mt(T,"xOrigin",(y?T:h).xOrigin,h.xOrigin,o,w),o=mt(T,"yOrigin",(y?T:h).yOrigin,h.yOrigin,o,w),_===T.xOffset&&g===T.yOffset||(o=mt(T,"xOffset",y?_:T.xOffset,T.xOffset,o,w),o=mt(T,"yOffset",y?g:T.yOffset,T.yOffset,o,w)),u=Pt?null:"0px 0px"),(u||Vt&&p&&T.zOrigin)&&(Tt?(f=!0,i=Ct,u=(u||Z(t,i,n,!1,"50% 50%"))+"",o=new gt(v,i,0,0,o,(-1),w),o.b=v[i],o.plugin=a,Vt?(c=T.zOrigin,u=u.split(" "),T.zOrigin=(u.length>2&&(0===c||"0px"!==u[2])?parseFloat(u[2]):c)||0,o.xs0=o.e=u[0]+" "+(u[1]||"50%")+" 0px",o=new gt(T,"zOrigin",0,0,o,(-1),o.n),o.b=c,o.xs0=o.e=T.zOrigin):o.xs0=o.e=u):nt(u+"",T)),f&&(r._transformType=T.svg&&Pt||!p&&3!==this._transformType?2:3),o},prefix:!0}),xt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),xt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,o,s,a){e=this.format(e);var l,h,c,u,p,f,d,_,g,m,y,v,S,x,b,P,w=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],T=t.style;for(g=parseFloat(t.offsetWidth),m=parseFloat(t.offsetHeight),l=e.split(" "),h=0;h<w.length;h++)this.p.indexOf("border")&&(w[h]=W(w[h])),p=u=Z(t,w[h],n,!1,"0px"),p.indexOf(" ")!==-1&&(u=p.split(" "),p=u[0],u=u[1]),f=c=l[h],d=parseFloat(p),v=p.substr((d+"").length),S="="===f.charAt(1),S?(_=parseInt(f.charAt(0)+"1",10),f=f.substr(2),_*=parseFloat(f),y=f.substr((_+"").length-(_<0?1:0))||""):(_=parseFloat(f),y=f.substr((_+"").length)),""===y&&(y=r[i]||v),y!==v&&(x=$(t,"borderLeft",d,v),b=$(t,"borderTop",d,v),"%"===y?(p=x/g*100+"%",u=b/m*100+"%"):"em"===y?(P=$(t,"borderLeft",1,"em"),p=x/P+"em",u=b/P+"em"):(p=x+"px",u=b+"px"),S&&(f=parseFloat(p)+_+y,c=parseFloat(u)+_+y)),s=yt(T,w[h],p+" "+u,f+" "+c,!1,"0px",s);return s},prefix:!0,formatter:ft("0px 0px 0px 0px",!1,!0)}),xt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,r,o,s){return yt(t.style,i,this.format(Z(t,i,n,!1,"0px 0px")),this.format(e),!1,"0px",o)},prefix:!0,formatter:ft("0px 0px",!1,!0)}),xt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,r,o,s){var a,l,h,c,u,p,f="background-position",d=n||Y(t,null),g=this.format((d?_?d.getPropertyValue(f+"-x")+" "+d.getPropertyValue(f+"-y"):d.getPropertyValue(f):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),m=this.format(e);if(g.indexOf("%")!==-1!=(m.indexOf("%")!==-1)&&m.split(",").length<2&&(p=Z(t,"backgroundImage").replace(C,""),p&&"none"!==p)){for(a=g.split(" "),l=m.split(" "),F.setAttribute("src",p),h=2;--h>-1;)g=a[h],c=g.indexOf("%")!==-1,c!==(l[h].indexOf("%")!==-1)&&(u=0===h?t.offsetWidth-F.width:t.offsetHeight-F.height,a[h]=c?parseFloat(g)/100*u+"px":parseFloat(g)/u*100+"%");g=a.join(" ")}return this.parseComplex(t.style,g,m,o,s)},formatter:nt}),xt("backgroundSize",{defaultValue:"0 0",formatter:nt}),xt("perspective",{defaultValue:"0px",prefix:!0}),xt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),xt("transformStyle",{prefix:!0}),xt("backfaceVisibility",{prefix:!0}),xt("userSelect",{prefix:!0}),xt("margin",{parser:dt("marginTop,marginRight,marginBottom,marginLeft")}),xt("padding",{parser:dt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),xt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,r,o,s){var a,l,h;return _<9?(l=t.currentStyle,h=_<8?" ":",",a="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",e=this.format(e).split(",").join(h)):(a=this.format(Z(t,this.p,n,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,o,s)}}),xt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),xt("autoRound,strictUnits",{parser:function(t,e,i,r,n){return n}}),xt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,r,o,s){var a=Z(t,"borderTopWidth",n,!1,"0px"),l=this.format(e).split(" "),h=l[0].replace(S,"");return"px"!==h&&(a=parseFloat(a)/$(t,"borderTopWidth",1,h)+h),this.parseComplex(t.style,this.format(a+" "+Z(t,"borderTopStyle",n,!1,"solid")+" "+Z(t,"borderTopColor",n,!1,"#000")),l.join(" "),o,s)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(pt)||["#000"])[0]}}),xt("borderWidth",{parser:dt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),xt("float,cssFloat,styleFloat",{parser:function(t,e,i,r,n,o){var s=t.style,a="cssFloat"in s?"cssFloat":"styleFloat";return new gt(s,a,0,0,n,(-1),i,(!1),0,s[a],e)}});var jt=function(t){var e,i=this.t,r=i.filter||Z(this.data,"filter")||"",n=this.s+this.c*t|0;100===n&&(r.indexOf("atrix(")===-1&&r.indexOf("radient(")===-1&&r.indexOf("oader(")===-1?(i.removeAttribute("filter"),e=!Z(this.data,"filter")):(i.filter=r.replace(P,""),e=!0)),e||(this.xn1&&(i.filter=r=r||"alpha(opacity="+n+")"),r.indexOf("pacity")===-1?0===n&&this.xn1||(i.filter=r+" alpha(opacity="+n+")"):i.filter=r.replace(x,"opacity="+n))};xt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,r,o,s){var a=parseFloat(Z(t,"opacity",n,!1,"1")),l=t.style,h="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),h&&1===a&&"hidden"===Z(t,"visibility",n)&&0!==e&&(a=0),z?o=new gt(l,"opacity",a,e-a,o):(o=new gt(l,"opacity",100*a,100*(e-a),o),o.xn1=h?1:0,l.zoom=1,o.type=2,o.b="alpha(opacity="+o.s+")",o.e="alpha(opacity="+(o.s+o.c)+")",o.data=t,o.plugin=s,o.setRatio=jt),h&&(o=new gt(l,"visibility",0,0,o,(-1),null,(!1),0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit"),o.xs0="inherit",r._overwriteProps.push(o.n),r._overwriteProps.push(i)),o}});var zt=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(T,"-$1").toLowerCase())):t.removeAttribute(e))},Ut=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:zt(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};xt("className",{parser:function(t,e,r,o,s,a,l){var h,c,u,p,f,d=t.getAttribute("class")||"",_=t.style.cssText;if(s=o._classNamePT=new gt(t,r,0,0,s,2),s.setRatio=Ut,s.pr=-11,i=!0,s.b=d,c=J(t,n),u=t._gsClassPT){for(p={},f=u.data;f;)p[f.p]=1,f=f._next;u.setRatio(1)}return t._gsClassPT=s,s.e="="!==e.charAt(1)?e:d.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",s.e),h=tt(t,c,J(t),l,p),t.setAttribute("class",d),s.data=h.firstMPT,t.style.cssText=_,s=s.xfirst=o.parse(t,h.difs,s,a)}});var Xt=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,r,n,o,s=this.t.style,a=l.transform.parse;if("all"===this.e)s.cssText="",n=!0;else for(e=this.e.split(" ").join("").split(","),r=e.length;--r>-1;)i=e[r],l[i]&&(l[i].parse===a?n=!0:i="transformOrigin"===i?Ct:l[i].p),zt(s,i);n&&(zt(s,Tt),o=this.t._gsTransform,o&&(o.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(xt("clearProps",{parser:function(t,e,r,n,o){return o=new gt(t,r,0,0,o,2),o.setRatio=Xt,o.e=e,o.pr=-10,o.data=n._tween,i=!0,o}}),h="bezier,throwProps,physicsProps,physics2D".split(","),vt=h.length;vt--;)bt(h[vt]);h=s.prototype,h._firstPT=h._lastParsedTransform=h._transform=null,h._onInitTween=function(t,e,a){if(!t.nodeType)return!1;this._target=t,this._tween=a,this._vars=e,c=e.autoRound,i=!1,r=e.suffixMap||s.suffixMap,n=Y(t,""),o=this._overwriteProps;var h,f,_,g,m,y,v,S,x,P=t.style;if(u&&""===P.zIndex&&(h=Z(t,"zIndex",n),"auto"!==h&&""!==h||this._addLazySet(P,"zIndex",0)),"string"==typeof e&&(g=P.cssText,h=J(t,n),P.cssText=g+";"+e,h=tt(t,h,J(t)).difs,!z&&b.test(e)&&(h.opacity=parseFloat(RegExp.$1)),e=h,P.cssText=g),e.className?this._firstPT=f=l.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=f=this.parse(t,e,null),this._transformType){for(x=3===this._transformType,Tt?p&&(u=!0,""===P.zIndex&&(v=Z(t,"zIndex",n),"auto"!==v&&""!==v||this._addLazySet(P,"zIndex",0)),d&&this._addLazySet(P,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(x?"visible":"hidden"))):P.zoom=1,_=f;_&&_._next;)_=_._next;S=new gt(t,"transform",0,0,null,2),this._linkCSSP(S,null,_),S.setRatio=Tt?Ht:Ft,S.data=this._transform||Dt(t,n,!0),S.tween=a,S.pr=-1,o.pop()}if(i){for(;f;){for(y=f._next,_=g;_&&_.pr>f.pr;)_=_._next;(f._prev=_?_._prev:m)?f._prev._next=f:g=f,(f._next=_)?_._prev=f:m=f,f=y}this._firstPT=g}return!0},h.parse=function(t,e,i,o){var s,a,h,u,p,f,d,_,g,m,y=t.style;for(s in e)f=e[s],a=l[s],a?i=a.parse(t,f,s,this,i,o,e):(p=Z(t,s,n)+"",g="string"==typeof f,"color"===s||"fill"===s||"stroke"===s||s.indexOf("Color")!==-1||g&&w.test(f)?(g||(f=ct(f),f=(f.length>3?"rgba(":"rgb(")+f.join(",")+")"),i=yt(y,s,p,f,!0,"transparent",i,0,o)):g&&I.test(f)?i=yt(y,s,p,f,!0,null,i,0,o):(h=parseFloat(p),d=h||0===h?p.substr((h+"").length):"",""!==p&&"auto"!==p||("width"===s||"height"===s?(h=rt(t,s,n),d="px"):"left"===s||"top"===s?(h=K(t,s,n),d="px"):(h="opacity"!==s?0:1,d="")),m=g&&"="===f.charAt(1),m?(u=parseInt(f.charAt(0)+"1",10),f=f.substr(2),u*=parseFloat(f),_=f.replace(S,"")):(u=parseFloat(f),_=g?f.replace(S,""):""),""===_&&(_=s in r?r[s]:d),f=u||0===u?(m?u+h:u)+_:e[s],d!==_&&""!==_&&(u||0===u)&&h&&(h=$(t,s,h,d),"%"===_?(h/=$(t,s,100,"%")/100,e.strictUnits!==!0&&(p=h+"%")):"em"===_||"rem"===_||"vw"===_||"vh"===_?h/=$(t,s,1,_):"px"!==_&&(u=$(t,s,u,_),_="px"),m&&(u||0===u)&&(f=u+h+_)),m&&(u+=h),!h&&0!==h||!u&&0!==u?void 0!==y[s]&&(f||f+""!="NaN"&&null!=f)?(i=new gt(y,s,u||h||0,0,i,(-1),s,(!1),0,p,f),i.xs0="none"!==f||"display"!==s&&s.indexOf("Style")===-1?f:p):X("invalid "+s+" tween value: "+e[s]):(i=new gt(y,s,h,u-h,i,0,s,c!==!1&&("px"===_||"zIndex"===s),0,p,f),i.xs0=_))),o&&i&&!i.plugin&&(i.plugin=o);return i},h.setRatio=function(t){var e,i,r,n=this._firstPT,o=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;n;){if(e=n.c*t+n.s,n.r?e=Math.round(e):e<o&&e>-o&&(e=0),n.type)if(1===n.type)if(r=n.l,2===r)n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2;else if(3===r)n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3;else if(4===r)n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3+n.xn3+n.xs4;else if(5===r)n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3+n.xn3+n.xs4+n.xn4+n.xs5;else{for(i=n.xs0+e+n.xs1,r=1;r<n.l;r++)i+=n["xn"+r]+n["xs"+(r+1)];n.t[n.p]=i}else n.type===-1?n.t[n.p]=n.xs0:n.setRatio&&n.setRatio(t);else n.t[n.p]=e+n.xs0;n=n._next}else for(;n;)2!==n.type?n.t[n.p]=n.b:n.setRatio(t),n=n._next;else for(;n;){if(2!==n.type)if(n.r&&n.type!==-1)if(e=Math.round(n.s+n.c),n.type){if(1===n.type){for(r=n.l,i=n.xs0+e+n.xs1,r=1;r<n.l;r++)i+=n["xn"+r]+n["xs"+(r+1)];n.t[n.p]=i}}else n.t[n.p]=e+n.xs0;else n.t[n.p]=n.e;else n.setRatio(t);n=n._next}},h._enableTransforms=function(t){this._transform=this._transform||Dt(this._target,n,!0),this._transformType=this._transform.svg&&Pt||!t&&3!==this._transformType?2:3};var qt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};h._addLazySet=function(t,e,i){var r=this._firstPT=new gt(t,e,0,0,this._firstPT,2);r.e=i,r.setRatio=qt,r.data=this},h._linkCSSP=function(t,e,i,r){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,r=!0),i?i._next=t:r||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},h._kill=function(e){var i,r,n,o=e;if(e.autoAlpha||e.alpha){o={};for(r in e)o[r]=e[r];o.opacity=1,o.autoAlpha&&(o.visibility=1)}return e.className&&(i=this._classNamePT)&&(n=i.xfirst,n&&n._prev?this._linkCSSP(n._prev,i._next,n._prev._prev):n===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,n._prev),this._classNamePT=null),t.prototype._kill.call(this,o)};var Qt=function(t,e,i){var r,n,o,s;if(t.slice)for(n=t.length;--n>-1;)Qt(t[n],e,i);else for(r=t.childNodes,n=r.length;--n>-1;)o=r[n],s=o.type,o.style&&(e.push(J(o)),i&&i.push(o)),1!==s&&9!==s&&11!==s||!o.childNodes.length||Qt(o,e,i)};return s.cascadeTo=function(t,i,r){var n,o,s,a,l=e.to(t,i,r),h=[l],c=[],u=[],p=[],f=e._internals.reservedProps;for(t=l._targets||l.target,Qt(t,c,p),l.render(i,!0,!0),Qt(t,u),l.render(0,!0,!0),l._enabled(!0),n=p.length;--n>-1;)if(o=tt(p[n],c[n],u[n]),o.firstMPT){o=o.difs;for(s in r)f[s]&&(o[s]=r[s]);a={};for(s in o)a[s]=c[n][s];h.push(e.fromTo(p[n],i,a,o))}return h},t.activate([s]),s},!0),function(){var t=_gsScope._gsDefine.plugin({propName:"roundProps",version:"1.5",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),e=function(t){for(;t;)t.f||t.blob||(t.r=1),t=t._next},i=t.prototype;i._onInitAllProps=function(){for(var t,i,r,n=this._tween,o=n.vars.roundProps.join?n.vars.roundProps:n.vars.roundProps.split(","),s=o.length,a={},l=n._propLookup.roundProps;--s>-1;)a[o[s]]=1;for(s=o.length;--s>-1;)for(t=o[s],i=n._firstPT;i;)r=i._next,i.pg?i.t._roundProps(a,!0):i.n===t&&(2===i.f&&i.t?e(i.t._firstPT):(this._add(i.t,t,i.s,i.c),r&&(r._prev=i._prev),i._prev?i._prev._next=r:n._firstPT===i&&(n._firstPT=r),i._next=i._prev=null,n._propLookup[t]=l)),i=r;return!1},i._add=function(t,e,i,r){this._addTween(t,e,i,i+r,e,!0),this._overwriteProps.push(e)}}(),function(){_gsScope._gsDefine.plugin({propName:"attr",API:2,version:"0.5.0",init:function(t,e,i){var r;if("function"!=typeof t.setAttribute)return!1;for(r in e)this._addTween(t,"setAttribute",t.getAttribute(r)+"",e[r]+"",r,!1,r),this._overwriteProps.push(r);return!0}})}(),_gsScope._gsDefine.plugin({propName:"directionalRotation",version:"0.2.1",API:2,init:function(t,e,i){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,n,o,s,a,l,h=e.useRadians===!0?2*Math.PI:360,c=1e-6;for(r in e)"useRadians"!==r&&(l=(e[r]+"").split("_"),n=l[0],o=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),s=this.finals[r]="string"==typeof n&&"="===n.charAt(1)?o+parseInt(n.charAt(0)+"1",10)*Number(n.substr(2)):Number(n)||0,a=s-o,l.length&&(n=l.join("_"),n.indexOf("short")!==-1&&(a%=h,a!==a%(h/2)&&(a=a<0?a+h:a-h)),n.indexOf("_cw")!==-1&&a<0?a=(a+9999999999*h)%h-(a/h|0)*h:n.indexOf("ccw")!==-1&&a>0&&(a=(a-9999999999*h)%h-(a/h|0)*h)),(a>c||a<-c)&&(this._addTween(t,r,o,o+a,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,_gsScope._gsDefine("easing.Back",["easing.Ease"],function(t){var e,i,r,n=_gsScope.GreenSockGlobals||_gsScope,o=n.com.greensock,s=2*Math.PI,a=Math.PI/2,l=o._class,h=function(e,i){var r=l("easing."+e,function(){},!0),n=r.prototype=new t;return n.constructor=r,n.getRatio=i,r},c=t.register||function(){},u=function(t,e,i,r,n){var o=l("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new r},!0);return c(o,t),o},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},f=function(e,i){var r=l("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),n=r.prototype=new t;return n.constructor=r,n.getRatio=i,n.config=function(t){return new r(t)},r},d=u("Back",f("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),f("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),f("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),_=l("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=i===!0},!0),g=_.prototype=new t;return g.constructor=_,g.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},_.ease=new _(.7,.7),g.config=_.config=function(t,e,i){return new _(t,e,i)},e=l("easing.SteppedEase",function(t){t=t||1,this._p1=1/t,this._p2=t+1},!0),g=e.prototype=new t,g.constructor=e,g.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),(this._p2*t>>0)*this._p1},g.config=e.config=function(t){return new e(t)},i=l("easing.RoughEase",function(e){e=e||{};for(var i,r,n,o,s,a,l=e.taper||"none",h=[],c=0,u=0|(e.points||20),f=u,d=e.randomize!==!1,_=e.clamp===!0,g=e.template instanceof t?e.template:null,m="number"==typeof e.strength?.4*e.strength:.4;--f>-1;)i=d?Math.random():1/u*f,r=g?g.getRatio(i):i,"none"===l?n=m:"out"===l?(o=1-i,n=o*o*m):"in"===l?n=i*i*m:i<.5?(o=2*i,n=o*o*.5*m):(o=2*(1-i),n=o*o*.5*m),d?r+=Math.random()*n-.5*n:f%2?r+=.5*n:r-=.5*n,_&&(r>1?r=1:r<0&&(r=0)),h[c++]={x:i,y:r};for(h.sort(function(t,e){return t.x-e.x}),a=new p(1,1,null),f=u;--f>-1;)s=h[f],a=new p(s.x,s.y,a);this._prev=new p(0,0,0!==a.t?a:a.next)},!0),g=i.prototype=new t,g.constructor=i,g.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},g.config=function(t){return new i(t)},i.ease=new i,u("Bounce",h("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),h("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),h("BounceInOut",function(t){var e=t<.5;return t=e?1-2*t:2*t-1,t=t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),u("Circ",h("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),h("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),h("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),r=function(e,i,r){var n=l("easing."+e,function(t,e){this._p1=t>=1?t:1,this._p2=(e||r)/(t<1?t:1),this._p3=this._p2/s*(Math.asin(1/this._p1)||0),this._p2=s/this._p2},!0),o=n.prototype=new t;return o.constructor=n,o.getRatio=i,o.config=function(t,e){return new n(t,e)},n},u("Elastic",r("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2))},.3),r("ElasticInOut",function(t){return(t*=2)<1?-.5*(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)):this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),u("Expo",h("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),h("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),h("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),u("Sine",h("SineOut",function(t){return Math.sin(t*a)}),h("SineIn",function(t){return-Math.cos(t*a)+1}),h("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),l("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),c(n.SlowMo,"SlowMo","ease,"),c(i,"RoughEase","ease,"),c(e,"SteppedEase","ease,"),d},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(t,e){var i={},r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var n,o,s,a,l,h=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=h("com.greensock"),u=1e-10,p=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i},f=function(){},d=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),_={},g=function(n,o,s,a){this.sc=_[n]?_[n].sc:[],_[n]=this,this.gsClass=null,this.func=s;var l=[];this.check=function(c){for(var u,p,f,d,m,y=o.length,v=y;--y>-1;)(u=_[o[y]]||new g(o[y],[])).gsClass?(l[y]=u.gsClass,v--):c&&u.sc.push(this);if(0===v&&s){if(p=("com.greensock."+n).split("."),f=p.pop(),d=h(p.join("."))[f]=this.gsClass=s.apply(s,l),a)if(r[f]=d,m="undefined"!=typeof module&&module.exports,!m&&"function"==typeof define&&define.amd)define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+n.split(".").pop(),[],function(){return d});else if(m)if(n===e){module.exports=i[e]=d;for(y in i)d[y]=i[y]}else i[e]&&(i[e][f]=d);for(y=0;y<this.sc.length;y++)this.sc[y].check()}},this.check(!0)},m=t._gsDefine=function(t,e,i,r){return new g(t,e,i,r)},y=c._class=function(t,e,i){return e=e||function(){},m(t,[],function(){return e},i),e};m.globals=r;var v=[0,0,1,1],S=[],x=y("easing.Ease",function(t,e,i,r){this._func=t,this._type=i||0,this._power=r||0,this._params=e?v.concat(e):v},!0),b=x.map={},P=x.register=function(t,e,i,r){for(var n,o,s,a,l=e.split(","),h=l.length,u=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(o=l[h],n=r?y("easing."+o,null,!0):c.easing[o]||{},s=u.length;--s>-1;)a=u[s],b[o+"."+a]=b[a+o]=n[a]=t.getRatio?t:t[a]||new t};for(s=x.prototype,s._calcEnd=!1,s.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,r=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?r*=r:2===i?r*=r*r:3===i?r*=r*r*r:4===i&&(r*=r*r*r*r),1===e?1-r:2===e?r:t<.5?r/2:1-r/2},n=["Linear","Quad","Cubic","Quart","Quint,Strong"],o=n.length;--o>-1;)s=n[o]+",Power"+o,P(new x(null,null,1,o),s,"easeOut",!0),P(new x(null,null,2,o),s,"easeIn"+(0===o?",easeNone":"")),P(new x(null,null,3,o),s,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var w=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});s=w.prototype,s.addEventListener=function(t,e,i,r,n){n=n||0;var o,s,h=this._listeners[t],c=0;for(this!==a||l||a.wake(),null==h&&(this._listeners[t]=h=[]),s=h.length;--s>-1;)o=h[s],o.c===e&&o.s===i?h.splice(s,1):0===c&&o.pr<n&&(c=s+1);h.splice(c,0,{c:e,s:i,up:r,pr:n})},s.removeEventListener=function(t,e){var i,r=this._listeners[t];if(r)for(i=r.length;--i>-1;)if(r[i].c===e)return void r.splice(i,1)},s.dispatchEvent=function(t){var e,i,r,n=this._listeners[t];if(n)for(e=n.length,i=this._eventTarget;--e>-1;)r=n[e],r&&(r.up?r.c.call(r.s||i,{type:t,target:i}):r.c.call(r.s||i))};var T=t.requestAnimationFrame,A=t.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},V=C();for(n=["ms","moz","webkit","o"],o=n.length;--o>-1&&!T;)T=t[n[o]+"RequestAnimationFrame"],A=t[n[o]+"CancelAnimationFrame"]||t[n[o]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,r,n,o,s,h=this,c=C(),p=!(e===!1||!T)&&"auto",d=500,_=33,g="tick",m=function(t){var e,a,l=C()-V;l>d&&(c+=l-_),V+=l,h.time=(V-c)/1e3,e=h.time-s,(!i||e>0||t===!0)&&(h.frame++,s+=e+(e>=o?.004:o-e),a=!0),t!==!0&&(n=r(m)),a&&h.dispatchEvent(g)};w.call(h),h.time=h.frame=0,h.tick=function(){m(!0)},h.lagSmoothing=function(t,e){d=t||1/u,_=Math.min(e,d,0)},h.sleep=function(){null!=n&&(p&&A?A(n):clearTimeout(n),r=f,n=null,h===a&&(l=!1))},h.wake=function(t){null!==n?h.sleep():t?c+=-V+(V=C()):h.frame>10&&(V=C()-d+5),r=0===i?f:p&&T?T:function(t){return setTimeout(t,1e3*(s-h.time)+1|0)},h===a&&(l=!0),m(2)},h.fps=function(t){return arguments.length?(i=t,o=1/(i||60),s=this.time+o,void h.wake()):i},h.useRAF=function(t){return arguments.length?(h.sleep(),p=t,void h.fps(i)):p},h.fps(t),setTimeout(function(){"auto"===p&&h.frame<5&&"hidden"!==document.visibilityState&&h.useRAF(!1)},1500)}),s=c.Ticker.prototype=new c.events.EventDispatcher,s.constructor=c.Ticker;var O=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,W){l||a.wake();var i=this.vars.useFrames?Q:W;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});a=O.ticker=new c.Ticker,s=O.prototype,s._dirty=s._gc=s._initted=s._paused=!1,s._totalTime=s._time=0,s._rawPrevTime=-1,s._next=s._last=s._onUpdate=s._timeline=s.timeline=null,s._paused=!1;var R=function(){l&&C()-V>2e3&&a.wake(),setTimeout(R,2e3)};R(),s.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},s.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},s.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},s.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},s.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},s.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},s.render=function(t,e,i){},s.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},s.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&t<i+this.totalDuration()/this._timeScale},s._enabled=function(t,e){return l||a.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},s._kill=function(t,e){return this._enabled(!1,!1)},s.kill=function(t,e){return this._kill(t,e),this},s._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},s._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},s._callback=function(t){var e=this.vars;e[t].apply(e[t+"Scope"]||e.callbackScope||this,e[t+"Params"]||S)},s.eventCallback=function(t,e,i,r){if("on"===(t||"").substr(0,2)){var n=this.vars;if(1===arguments.length)return n[t];null==e?delete n[t]:(n[t]=e,n[t+"Params"]=d(i)&&i.join("").indexOf("{self}")!==-1?this._swapSelfInParams(i):i,n[t+"Scope"]=r),"onUpdate"===t&&(this._onUpdate=e)}return this},s.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},s.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},s.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},s.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},s.totalTime=function(t,e,i){if(l||a.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var r=this._totalDuration,n=this._timeline;if(t>r&&!i&&(t=r),this._startTime=(this._paused?this._pauseTime:n._time)-(this._reversed?r-t:t)/this._timeScale,n._dirty||this._uncache(!1),n._timeline)for(;n._timeline;)n._timeline._time!==(n._startTime+n._totalTime)/n._timeScale&&n.totalTime(n._totalTime,!0),n=n._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(M.length&&Z(),this.render(t,e,!1),M.length&&Z())}return this},s.progress=s.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},s.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},s.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},s.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||u,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},s.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},s.paused=function(t){if(!arguments.length)return this._paused;var e,i,r=this._timeline;return t!=this._paused&&r&&(l||t||a.wake(),e=r.rawTime(),i=e-this._pauseTime,!t&&r.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=r.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,
this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var G=y("core.SimpleTimeline",function(t){O.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});s=G.prototype=new O,s.constructor=G,s.kill()._gc=!1,s._first=s._last=s._recent=null,s._sortChildren=!1,s.add=s.insert=function(t,e,i,r){var n,o;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),n=this._last,this._sortChildren)for(o=t._startTime;n&&n._startTime>o;)n=n._prev;return n?(t._next=n._next,n._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=n,this._recent=t,this._timeline&&this._uncache(!0),this},s._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},s.render=function(t,e,i){var r,n=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;n;)r=n._next,(n._active||t>=n._startTime&&!n._paused)&&(n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=r},s.rawTime=function(){return l||a.wake(),this._totalTime};var k=y("TweenLite",function(e,i,r){if(O.call(this,i,r),this.render=k.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:k.selector(e)||e;var n,o,s,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?q[k.defaultOverwrite]:"number"==typeof l?l>>0:q[l],(a||e instanceof Array||e.push&&d(e))&&"number"!=typeof e[0])for(this._targets=s=p(e),this._propLookup=[],this._siblings=[],n=0;n<s.length;n++)o=s[n],o?"string"!=typeof o?o.length&&o!==t&&o[0]&&(o[0]===t||o[0].nodeType&&o[0].style&&!o.nodeType)?(s.splice(n--,1),this._targets=s=s.concat(p(o))):(this._siblings[n]=$(o,this,!1),1===l&&this._siblings[n].length>1&&J(o,this,null,1,this._siblings[n])):(o=s[n--]=k.selector(o),"string"==typeof o&&s.splice(n+1,1)):s.splice(n--,1);else this._propLookup={},this._siblings=$(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-u,this.render(Math.min(0,-this._delay)))},!0),I=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},E=function(t,e){var i,r={};for(i in t)X[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!j[i]||j[i]&&j[i]._autoCSS)||(r[i]=t[i],delete t[i]);t.css=r};s=k.prototype=new O,s.constructor=k,s.kill()._gc=!1,s.ratio=0,s._firstPT=s._targets=s._overwrittenProps=s._startAt=null,s._notifyPluginsOfEnabled=s._lazy=!1,k.version="1.18.5",k.defaultEase=s._ease=new x(null,null,1,1),k.defaultOverwrite="auto",k.ticker=a,k.autoSleep=120,k.lagSmoothing=function(t,e){a.lagSmoothing(t,e)},k.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(k.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var M=[],L={},B=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,N=function(t){for(var e,i=this._firstPT,r=1e-6;i;)e=i.blob?t?this.join(""):this.start:i.c*t+i.s,i.r?e=Math.round(e):e<r&&e>-r&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},D=function(t,e,i,r){var n,o,s,a,l,h,c,u=[t,e],p=0,f="",d=0;for(u.start=t,i&&(i(u),t=u[0],e=u[1]),u.length=0,n=t.match(B)||[],o=e.match(B)||[],r&&(r._next=null,r.blob=1,u._firstPT=r),l=o.length,a=0;a<l;a++)c=o[a],h=e.substr(p,e.indexOf(c,p)-p),f+=h||!a?h:",",p+=h.length,d?d=(d+1)%5:"rgba("===h.substr(-5)&&(d=1),c===n[a]||n.length<=a?f+=c:(f&&(u.push(f),f=""),s=parseFloat(n[a]),u.push(s),u._firstPT={_next:u._firstPT,t:u,p:u.length-1,s:s,c:("="===c.charAt(1)?parseInt(c.charAt(0)+"1",10)*parseFloat(c.substr(2)):parseFloat(c)-s)||0,f:0,r:d&&d<4}),p+=c.length;return f+=e.substr(p),f&&u.push(f),u.setRatio=N,u},F=function(t,e,i,r,n,o,s,a){var l,h,c="get"===i?t[e]:i,u=typeof t[e],p="string"==typeof r&&"="===r.charAt(1),f={t:t,p:e,s:c,f:"function"===u,pg:0,n:n||e,r:o,pr:0,c:p?parseInt(r.charAt(0)+"1",10)*parseFloat(r.substr(2)):parseFloat(r)-c||0};if("number"!==u&&("function"===u&&"get"===i&&(h=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),f.s=c=s?t[h](s):t[h]()),"string"==typeof c&&(s||isNaN(c))?(f.fp=s,l=D(c,r,a||k.defaultStringFilter,f),f={t:l,p:"setRatio",s:0,c:1,f:2,pg:0,n:n||e,pr:0}):p||(f.s=parseFloat(c),f.c=parseFloat(r)-f.s||0)),f.c)return(f._next=this._firstPT)&&(f._next._prev=f),this._firstPT=f,f},H=k._internals={isArray:d,isSelector:I,lazyTweens:M,blobDif:D},j=k._plugins={},z=H.tweenLookup={},U=0,X=H.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1},q={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,"true":1,"false":0},Q=O._rootFramesTimeline=new G,W=O._rootTimeline=new G,Y=30,Z=H.lazyRender=function(){var t,e=M.length;for(L={};--e>-1;)t=M[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);M.length=0};W._startTime=a.time,Q._startTime=a.frame,W._active=Q._active=!0,setTimeout(Z,1),O._updateRoot=k.render=function(){var t,e,i;if(M.length&&Z(),W.render((a.time-W._startTime)*W._timeScale,!1,!1),Q.render((a.frame-Q._startTime)*Q._timeScale,!1,!1),M.length&&Z(),a.frame>=Y){Y=a.frame+(parseInt(k.autoSleep,10)||120);for(i in z){for(e=z[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete z[i]}if(i=W._first,(!i||i._paused)&&k.autoSleep&&!Q._first&&1===a._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||a.sleep()}}},a.addEventListener("tick",O._updateRoot);var $=function(t,e,i){var r,n,o=t._gsTweenID;if(z[o||(t._gsTweenID=o="t"+U++)]||(z[o]={target:t,tweens:[]}),e&&(r=z[o].tweens,r[n=r.length]=e,i))for(;--n>-1;)r[n]===e&&r.splice(n,1);return z[o].tweens},K=function(t,e,i,r){var n,o,s=t.vars.onOverwrite;return s&&(n=s(t,e,i,r)),s=k.onOverwrite,s&&(o=s(t,e,i,r)),n!==!1&&o!==!1},J=function(t,e,i,r,n){var o,s,a,l;if(1===r||r>=4){for(l=n.length,o=0;o<l;o++)if((a=n[o])!==e)a._gc||a._kill(null,t,e)&&(s=!0);else if(5===r)break;return s}var h,c=e._startTime+u,p=[],f=0,d=0===e._duration;for(o=n.length;--o>-1;)(a=n[o])===e||a._gc||a._paused||(a._timeline!==e._timeline?(h=h||tt(e,0,d),0===tt(a,h,d)&&(p[f++]=a)):a._startTime<=c&&a._startTime+a.totalDuration()/a._timeScale>c&&((d||!a._initted)&&c-a._startTime<=2e-10||(p[f++]=a)));for(o=f;--o>-1;)if(a=p[o],2===r&&a._kill(i,t,e)&&(s=!0),2!==r||!a._firstPT&&a._initted){if(2!==r&&!K(a,e))continue;a._enabled(!1,!1)&&(s=!0)}return s},tt=function(t,e,i){for(var r=t._timeline,n=r._timeScale,o=t._startTime;r._timeline;){if(o+=r._startTime,n*=r._timeScale,r._paused)return-100;r=r._timeline}return o/=n,o>e?o-e:i&&o===e||!t._initted&&o-e<2*u?u:(o+=t.totalDuration()/t._timeScale/n)>e+u?0:o-e-u};s._init=function(){var t,e,i,r,n,o=this.vars,s=this._overwrittenProps,a=this._duration,l=!!o.immediateRender,h=o.ease;if(o.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),n={};for(r in o.startAt)n[r]=o.startAt[r];if(n.overwrite=!1,n.immediateRender=!0,n.lazy=l&&o.lazy!==!1,n.startAt=n.delay=null,this._startAt=k.to(this.target,0,n),l)if(this._time>0)this._startAt=null;else if(0!==a)return}else if(o.runBackwards&&0!==a)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(l=!1),i={};for(r in o)X[r]&&"autoCSS"!==r||(i[r]=o[r]);if(i.overwrite=0,i.data="isFromStart",i.lazy=l&&o.lazy!==!1,i.immediateRender=l,this._startAt=k.to(this.target,0,i),l){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=h=h?h instanceof x?h:"function"==typeof h?new x(h,o.easeParams):b[h]||k.defaultEase:k.defaultEase,o.easeParams instanceof Array&&h.config&&(this._ease=h.config.apply(h,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(t=this._targets.length;--t>-1;)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],s?s[t]:null)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,s);if(e&&k._onPluginEvent("_onInitAllProps",this),s&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},s._initProps=function(e,i,r,n){var o,s,a,l,h,c;if(null==e)return!1;L[e._gsTweenID]&&Z(),this.vars.css||e.style&&e!==t&&e.nodeType&&j.css&&this.vars.autoCSS!==!1&&E(this.vars,e);for(o in this.vars)if(c=this.vars[o],X[o])c&&(c instanceof Array||c.push&&d(c))&&c.join("").indexOf("{self}")!==-1&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(j[o]&&(l=new j[o])._onInitTween(e,this.vars[o],this)){for(this._firstPT=h={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:l._priority},s=l._overwriteProps.length;--s>-1;)i[l._overwriteProps[s]]=this._firstPT;(l._priority||l._onInitAllProps)&&(a=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0),h._next&&(h._next._prev=h)}else i[o]=F.call(this,e,o,"get",c,o,0,null,this.vars.stringFilter);return n&&this._kill(n,e)?this._initProps(e,i,r,n):this._overwrite>1&&this._firstPT&&r.length>1&&J(e,this,i,this._overwrite,r)?(this._kill(i,e),this._initProps(e,i,r,n)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(L[e._gsTweenID]=!0),a)},s.render=function(t,e,i){var r,n,o,s,a=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(r=!0,n="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&t>=-1e-7||h===u&&"isPause"!==this.data)&&h!==t&&(i=!0,h>u&&(n="onReverseComplete")),this._rawPrevTime=s=!e||t||h===t?t:u);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&h>0)&&(n="onReverseComplete",r=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(h!==u||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=s=!e||t||h===t?t:u)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var c=t/l,p=this._easeType,f=this._easePower;(1===p||3===p&&c>=.5)&&(c=1-c),3===p&&(c*=2),1===f?c*=c:2===f?c*=c*c:3===f?c*=c*c*c:4===f&&(c*=c*c*c*c),1===p?this.ratio=1-c:2===p?this.ratio=c:t/l<.5?this.ratio=c/2:this.ratio=1-c/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=h,M.push(this),void(this._lazy=[t,e]);this._time&&!r?this.ratio=this._ease.getRatio(this._time/l):r&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):n||(n="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),o=this._firstPT;o;)o.f?o.t[o.p](o.c*this.ratio+o.s):o.t[o.p]=o.c*this.ratio+o.s,o=o._next;this._onUpdate&&(t<0&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==a||r||i)&&this._callback("onUpdate")),n&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),r&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[n]&&this._callback(n),0===l&&this._rawPrevTime===u&&s!==u&&(this._rawPrevTime=0)))}},s._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:k.selector(e)||e;var r,n,o,s,a,l,h,c,u,p=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((d(e)||I(e))&&"number"!=typeof e[0])for(r=e.length;--r>-1;)this._kill(t,e[r],i)&&(l=!0);else{if(this._targets){for(r=this._targets.length;--r>-1;)if(e===this._targets[r]){a=this._propLookup[r]||{},this._overwrittenProps=this._overwrittenProps||[],n=this._overwrittenProps[r]=t?this._overwrittenProps[r]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,n=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(h=t||a,c=t!==n&&"all"!==n&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(k.onOverwrite||this.vars.onOverwrite)){for(o in h)a[o]&&(u||(u=[]),u.push(o));if((u||!t)&&!K(this,i,e,u))return!1}for(o in h)(s=a[o])&&(p&&(s.f?s.t[s.p](s.s):s.t[s.p]=s.s,l=!0),s.pg&&s.t._kill(h)&&(l=!0),s.pg&&0!==s.t._overwriteProps.length||(s._prev?s._prev._next=s._next:s===this._firstPT&&(this._firstPT=s._next),s._next&&(s._next._prev=s._prev),s._next=s._prev=null),delete a[o]),c&&(n[o]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},s.invalidate=function(){return this._notifyPluginsOfEnabled&&k._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],O.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-u,this.render(Math.min(0,-this._delay))),this},s._enabled=function(t,e){if(l||a.wake(),t&&this._gc){var i,r=this._targets;if(r)for(i=r.length;--i>-1;)this._siblings[i]=$(r[i],this,!0);else this._siblings=$(this.target,this,!0)}return O.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&k._onPluginEvent(t?"_onEnable":"_onDisable",this)},k.to=function(t,e,i){return new k(t,e,i)},k.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new k(t,e,i)},k.fromTo=function(t,e,i,r){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,new k(t,e,r)},k.delayedCall=function(t,e,i,r,n){return new k(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:n,overwrite:0})},k.set=function(t,e){return new k(t,0,e)},k.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:k.selector(t)||t;var i,r,n,o;if((d(t)||I(t))&&"number"!=typeof t[0]){for(i=t.length,r=[];--i>-1;)r=r.concat(k.getTweensOf(t[i],e));for(i=r.length;--i>-1;)for(o=r[i],n=i;--n>-1;)o===r[n]&&r.splice(i,1)}else for(r=$(t).concat(),i=r.length;--i>-1;)(r[i]._gc||e&&!r[i].isActive())&&r.splice(i,1);return r},k.killTweensOf=k.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var r=k.getTweensOf(t,e),n=r.length;--n>-1;)r[n]._kill(i,t)};var et=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(s=et.prototype,et.version="1.18.0",et.API=2,s._firstPT=null,s._addTween=F,s.setRatio=N,s._kill=function(t){var e,i=this._overwriteProps,r=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;r;)null!=t[r.n]&&(r._next&&(r._next._prev=r._prev),r._prev?(r._prev._next=r._next,r._prev=null):this._firstPT===r&&(this._firstPT=r._next)),r=r._next;return!1},s._roundProps=function(t,e){for(var i=this._firstPT;i;)(t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&(i.r=e),i=i._next},k._onPluginEvent=function(t,e){var i,r,n,o,s,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(s=a._next,r=n;r&&r.pr>a.pr;)r=r._next;(a._prev=r?r._prev:o)?a._prev._next=a:n=a,(a._next=r)?r._prev=a:o=a,a=s}a=e._firstPT=n}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(j[(new t[e])._propName]=t[e]);return!0},m.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,r=t.priority||0,n=t.overwriteProps,o={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_roundProps",initAll:"_onInitAllProps"},s=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,r),this._overwriteProps=n||[]},t.global===!0),a=s.prototype=new et(i);a.constructor=s,s.API=t.API;for(e in o)"function"==typeof t[e]&&(a[o[e]]=t[e]);return s.version=t.version,et.activate([s]),s},n=t._gsQueue){for(o=0;o<n.length;o++)n[o]();for(s in _)_[s].func||t.console.log("GSAP encountered missing dependency: com.greensock."+s)}l=!1}}("undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window,"TweenMax"),!function(t){"object"==typeof exports?module.exports=t():"function"==typeof define&&define.amd?define(t):"undefined"!=typeof window?window.decomp=t():"undefined"!=typeof global?global.decomp=t():"undefined"!=typeof self&&(self.decomp=t())}(function(){return function t(e,i,r){function n(s,a){if(!i[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);throw new Error("Cannot find module '"+s+"'")}var h=i[s]={exports:{}};e[s][0].call(h.exports,function(t){var i=e[s][1][t];return n(i?i:t)},h,h.exports,t,e,i,r)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)n(r[s]);return n}({1:[function(t,e,i){function r(){}var n=t("./Scalar");e.exports=r,r.lineInt=function(t,e,i){i=i||0;var r,o,s,a,l,h,c,u=[0,0];return r=t[1][1]-t[0][1],o=t[0][0]-t[1][0],s=r*t[0][0]+o*t[0][1],a=e[1][1]-e[0][1],l=e[0][0]-e[1][0],h=a*e[0][0]+l*e[0][1],c=r*l-a*o,n.eq(c,0,i)||(u[0]=(l*s-o*h)/c,u[1]=(r*h-a*s)/c),u},r.segmentsIntersect=function(t,e,i,r){var n=e[0]-t[0],o=e[1]-t[1],s=r[0]-i[0],a=r[1]-i[1];if(s*o-a*n==0)return!1;var l=(n*(i[1]-t[1])+o*(t[0]-i[0]))/(s*o-a*n),h=(s*(t[1]-i[1])+a*(i[0]-t[0]))/(a*n-s*o);return l>=0&&l<=1&&h>=0&&h<=1}},{"./Scalar":4}],2:[function(t,e,i){function r(){}e.exports=r,r.area=function(t,e,i){return(e[0]-t[0])*(i[1]-t[1])-(i[0]-t[0])*(e[1]-t[1])},r.left=function(t,e,i){return r.area(t,e,i)>0},r.leftOn=function(t,e,i){return r.area(t,e,i)>=0},r.right=function(t,e,i){return r.area(t,e,i)<0},r.rightOn=function(t,e,i){return r.area(t,e,i)<=0};var n=[],o=[];r.collinear=function(t,e,i,s){if(s){var a=n,l=o;a[0]=e[0]-t[0],a[1]=e[1]-t[1],l[0]=i[0]-e[0],l[1]=i[1]-e[1];var h=a[0]*l[0]+a[1]*l[1],c=Math.sqrt(a[0]*a[0]+a[1]*a[1]),u=Math.sqrt(l[0]*l[0]+l[1]*l[1]),p=Math.acos(h/(c*u));return p<s}return 0==r.area(t,e,i)},r.sqdist=function(t,e){var i=e[0]-t[0],r=e[1]-t[1];return i*i+r*r}},{}],3:[function(t,e,i){function r(){this.vertices=[]}function n(t,e,i,r,n){n=n||0;var o=e[1]-t[1],s=t[0]-e[0],l=o*t[0]+s*t[1],h=r[1]-i[1],c=i[0]-r[0],u=h*i[0]+c*i[1],p=o*c-h*s;return a.eq(p,0,n)?[0,0]:[(c*l-s*u)/p,(o*u-h*l)/p]}var o=t("./Line"),s=t("./Point"),a=t("./Scalar");e.exports=r,r.prototype.at=function(t){var e=this.vertices,i=e.length;return e[t<0?t%i+i:t%i]},r.prototype.first=function(){return this.vertices[0]},r.prototype.last=function(){return this.vertices[this.vertices.length-1]},r.prototype.clear=function(){this.vertices.length=0},r.prototype.append=function(t,e,i){if("undefined"==typeof e)throw new Error("From is not given!");if("undefined"==typeof i)throw new Error("To is not given!");if(i-1<e)throw new Error("lol1");if(i>t.vertices.length)throw new Error("lol2");if(e<0)throw new Error("lol3");for(var r=e;r<i;r++)this.vertices.push(t.vertices[r])},r.prototype.makeCCW=function(){for(var t=0,e=this.vertices,i=1;i<this.vertices.length;++i)(e[i][1]<e[t][1]||e[i][1]==e[t][1]&&e[i][0]>e[t][0])&&(t=i);s.left(this.at(t-1),this.at(t),this.at(t+1))||this.reverse()},r.prototype.reverse=function(){for(var t=[],e=0,i=this.vertices.length;e!==i;e++)t.push(this.vertices.pop());this.vertices=t},r.prototype.isReflex=function(t){return s.right(this.at(t-1),this.at(t),this.at(t+1))};var l=[],h=[];r.prototype.canSee=function(t,e){var i,r,n=l,a=h;if(s.leftOn(this.at(t+1),this.at(t),this.at(e))&&s.rightOn(this.at(t-1),this.at(t),this.at(e)))return!1;r=s.sqdist(this.at(t),this.at(e));for(var c=0;c!==this.vertices.length;++c)if((c+1)%this.vertices.length!==t&&c!==t&&s.leftOn(this.at(t),this.at(e),this.at(c+1))&&s.rightOn(this.at(t),this.at(e),this.at(c))&&(n[0]=this.at(t),n[1]=this.at(e),a[0]=this.at(c),a[1]=this.at(c+1),i=o.lineInt(n,a),s.sqdist(this.at(t),i)<r))return!1;return!0},r.prototype.copy=function(t,e,i){var n=i||new r;if(n.clear(),t<e)for(var o=t;o<=e;o++)n.vertices.push(this.vertices[o]);else{for(var o=0;o<=e;o++)n.vertices.push(this.vertices[o]);for(var o=t;o<this.vertices.length;o++)n.vertices.push(this.vertices[o])}return n},r.prototype.getCutEdges=function(){for(var t=[],e=[],i=[],n=new r,o=Number.MAX_VALUE,s=0;s<this.vertices.length;++s)if(this.isReflex(s))for(var a=0;a<this.vertices.length;++a)if(this.canSee(s,a)){e=this.copy(s,a,n).getCutEdges(),i=this.copy(a,s,n).getCutEdges();for(var l=0;l<i.length;l++)e.push(i[l]);e.length<o&&(t=e,o=e.length,t.push([this.at(s),this.at(a)]))}return t},r.prototype.decomp=function(){var t=this.getCutEdges();return t.length>0?this.slice(t):[this]},r.prototype.slice=function(t){if(0==t.length)return[this];if(t instanceof Array&&t.length&&t[0]instanceof Array&&2==t[0].length&&t[0][0]instanceof Array){for(var e=[this],i=0;i<t.length;i++)for(var r=t[i],n=0;n<e.length;n++){var o=e[n],s=o.slice(r);if(s){e.splice(n,1),e.push(s[0],s[1]);break}}return e}var r=t,i=this.vertices.indexOf(r[0]),n=this.vertices.indexOf(r[1]);return i!=-1&&n!=-1&&[this.copy(i,n),this.copy(n,i)]},r.prototype.isSimple=function(){for(var t=this.vertices,e=0;e<t.length-1;e++)for(var i=0;i<e-1;i++)if(o.segmentsIntersect(t[e],t[e+1],t[i],t[i+1]))return!1;for(var e=1;e<t.length-2;e++)if(o.segmentsIntersect(t[0],t[t.length-1],t[e],t[e+1]))return!1;return!0},r.prototype.quickDecomp=function(t,e,i,o,a,l){a=a||100,l=l||0,o=o||25,t="undefined"!=typeof t?t:[],e=e||[],i=i||[];var h=[0,0],c=[0,0],u=[0,0],p=0,f=0,d=0,_=0,g=0,m=0,y=0,v=new r,S=new r,x=this,b=this.vertices;if(b.length<3)return t;if(l++,l>a)return console.warn("quickDecomp: max level ("+a+") reached."),t;for(var P=0;P<this.vertices.length;++P)if(x.isReflex(P)){e.push(x.vertices[P]),p=f=Number.MAX_VALUE;for(var w=0;w<this.vertices.length;++w)s.left(x.at(P-1),x.at(P),x.at(w))&&s.rightOn(x.at(P-1),x.at(P),x.at(w-1))&&(u=n(x.at(P-1),x.at(P),x.at(w),x.at(w-1)),s.right(x.at(P+1),x.at(P),u)&&(d=s.sqdist(x.vertices[P],u),d<f&&(f=d,c=u,m=w))),s.left(x.at(P+1),x.at(P),x.at(w+1))&&s.rightOn(x.at(P+1),x.at(P),x.at(w))&&(u=n(x.at(P+1),x.at(P),x.at(w),x.at(w+1)),s.left(x.at(P-1),x.at(P),u)&&(d=s.sqdist(x.vertices[P],u),d<p&&(p=d,h=u,g=w)));if(m==(g+1)%this.vertices.length)u[0]=(c[0]+h[0])/2,u[1]=(c[1]+h[1])/2,i.push(u),P<g?(v.append(x,P,g+1),v.vertices.push(u),S.vertices.push(u),0!=m&&S.append(x,m,x.vertices.length),S.append(x,0,P+1)):(0!=P&&v.append(x,P,x.vertices.length),v.append(x,0,g+1),v.vertices.push(u),S.vertices.push(u),S.append(x,m,P+1));else{if(m>g&&(g+=this.vertices.length),_=Number.MAX_VALUE,g<m)return t;for(var w=m;w<=g;++w)s.leftOn(x.at(P-1),x.at(P),x.at(w))&&s.rightOn(x.at(P+1),x.at(P),x.at(w))&&(d=s.sqdist(x.at(P),x.at(w)),d<_&&(_=d,y=w%this.vertices.length));P<y?(v.append(x,P,y+1),0!=y&&S.append(x,y,b.length),S.append(x,0,P+1)):(0!=P&&v.append(x,P,b.length),v.append(x,0,y+1),S.append(x,y,P+1))}return v.vertices.length<S.vertices.length?(v.quickDecomp(t,e,i,o,a,l),S.quickDecomp(t,e,i,o,a,l)):(S.quickDecomp(t,e,i,o,a,l),v.quickDecomp(t,e,i,o,a,l)),t}return t.push(this),t},r.prototype.removeCollinearPoints=function(t){for(var e=0,i=this.vertices.length-1;this.vertices.length>3&&i>=0;--i)s.collinear(this.at(i-1),this.at(i),this.at(i+1),t)&&(this.vertices.splice(i%this.vertices.length,1),i--,e++);return e}},{"./Line":1,"./Point":2,"./Scalar":4}],4:[function(t,e,i){function r(){}e.exports=r,r.eq=function(t,e,i){return i=i||0,Math.abs(t-e)<i}},{}],5:[function(t,e,i){e.exports={Polygon:t("./Polygon"),Point:t("./Point")}},{"./Point":2,"./Polygon":3}]},{},[5])(5)}),function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.Matter=t()}}(function(){return function t(e,i,r){function n(s,a){if(!i[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var c=i[s]={exports:{}};e[s][0].call(c.exports,function(t){var i=e[s][1][t];return n(i?i:t)},c,c.exports,t,e,i,r)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)n(r[s]);return n}({1:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../geometry/Vector"),s=t("../core/Sleeping"),a=(t("../render/Render"),t("../core/Common")),l=t("../geometry/Bounds"),h=t("../geometry/Axes");!function(){r._inertiaScale=4,r._nextCollidingGroupId=1,r._nextNonCollidingGroupId=-1,r._nextCategory=1,r.create=function(e){var i={id:a.nextId(),type:"body",label:"Body",parts:[],angle:0,vertices:n.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0},lineWidth:1.5}},r=a.extend(i,e);return t(r,e),r},r.nextGroup=function(t){return t?r._nextNonCollidingGroupId--:r._nextCollidingGroupId++},r.nextCategory=function(){return r._nextCategory=r._nextCategory<<1,r._nextCategory};var t=function(t,e){r.set(t,{bounds:t.bounds||l.create(t.vertices),positionPrev:t.positionPrev||o.clone(t.position),anglePrev:t.anglePrev||t.angle,vertices:t.vertices,parts:t.parts||[t],isStatic:t.isStatic,isSleeping:t.isSleeping,parent:t.parent||t}),n.rotate(t.vertices,t.angle,t.position),h.rotate(t.axes,t.angle),l.update(t.bounds,t.vertices,t.velocity),r.set(t,{axes:e.axes||t.axes,area:e.area||t.area,mass:e.mass||t.mass,inertia:e.inertia||t.inertia});var i=t.isStatic?"#eeeeee":a.choose(["#556270","#4ECDC4","#C7F464","#FF6B6B","#C44D58"]),s=a.shadeColor(i,-20);t.render.fillStyle=t.render.fillStyle||i,t.render.strokeStyle=t.render.strokeStyle||s,t.render.sprite.xOffset+=-(t.bounds.min.x-t.position.x)/(t.bounds.max.x-t.bounds.min.x),t.render.sprite.yOffset+=-(t.bounds.min.y-t.position.y)/(t.bounds.max.y-t.bounds.min.y)};r.set=function(t,e,i){var n;"string"==typeof e&&(n=e,e={},e[n]=i);for(n in e)if(i=e[n],e.hasOwnProperty(n))switch(n){case"isStatic":r.setStatic(t,i);break;case"isSleeping":s.set(t,i);break;case"mass":r.setMass(t,i);break;case"density":r.setDensity(t,i);break;case"inertia":r.setInertia(t,i);break;case"vertices":r.setVertices(t,i);break;case"position":r.setPosition(t,i);break;case"angle":r.setAngle(t,i);break;case"velocity":r.setVelocity(t,i);break;case"angularVelocity":r.setAngularVelocity(t,i);break;case"parts":r.setParts(t,i);break;default:t[n]=i}},r.setStatic=function(t,e){for(var i=0;i<t.parts.length;i++){var r=t.parts[i];r.isStatic=e,e&&(r.restitution=0,r.friction=1,r.mass=r.inertia=r.density=1/0,r.inverseMass=r.inverseInertia=0,r.positionPrev.x=r.position.x,r.positionPrev.y=r.position.y,r.anglePrev=r.angle,r.angularVelocity=0,r.speed=0,r.angularSpeed=0,r.motion=0)}},r.setMass=function(t,e){t.mass=e,t.inverseMass=1/t.mass,t.density=t.mass/t.area},r.setDensity=function(t,e){r.setMass(t,e*t.area),t.density=e},r.setInertia=function(t,e){t.inertia=e,t.inverseInertia=1/t.inertia},r.setVertices=function(t,e){e[0].body===t?t.vertices=e:t.vertices=n.create(e,t),t.axes=h.fromVertices(t.vertices),t.area=n.area(t.vertices),r.setMass(t,t.density*t.area);var i=n.centre(t.vertices);n.translate(t.vertices,i,-1),r.setInertia(t,r._inertiaScale*n.inertia(t.vertices,t.mass)),n.translate(t.vertices,t.position),l.update(t.bounds,t.vertices,t.velocity)},r.setParts=function(t,i,o){var s;for(i=i.slice(0),t.parts.length=0,t.parts.push(t),t.parent=t,s=0;s<i.length;s++){var a=i[s];a!==t&&(a.parent=t,t.parts.push(a))}if(1!==t.parts.length){if(o="undefined"==typeof o||o){var l=[];for(s=0;s<i.length;s++)l=l.concat(i[s].vertices);n.clockwiseSort(l);var h=n.hull(l),c=n.centre(h);r.setVertices(t,h),n.translate(t.vertices,c)}var u=e(t);t.area=u.area,t.parent=t,t.position.x=u.centre.x,t.position.y=u.centre.y,t.positionPrev.x=u.centre.x,t.positionPrev.y=u.centre.y,r.setMass(t,u.mass),r.setInertia(t,u.inertia),r.setPosition(t,u.centre)}},r.setPosition=function(t,e){var i=o.sub(e,t.position);t.positionPrev.x+=i.x,t.positionPrev.y+=i.y;for(var r=0;r<t.parts.length;r++){var s=t.parts[r];s.position.x+=i.x,s.position.y+=i.y,n.translate(s.vertices,i),l.update(s.bounds,s.vertices,t.velocity)}},r.setAngle=function(t,e){var i=e-t.angle;t.anglePrev+=i;for(var r=0;r<t.parts.length;r++){var s=t.parts[r];s.angle+=i,n.rotate(s.vertices,i,t.position),h.rotate(s.axes,i),l.update(s.bounds,s.vertices,t.velocity),r>0&&o.rotateAbout(s.position,i,t.position,s.position)}},r.setVelocity=function(t,e){t.positionPrev.x=t.position.x-e.x,t.positionPrev.y=t.position.y-e.y,t.velocity.x=e.x,t.velocity.y=e.y,t.speed=o.magnitude(t.velocity)},r.setAngularVelocity=function(t,e){t.anglePrev=t.angle-e,t.angularVelocity=e,t.angularSpeed=Math.abs(t.angularVelocity)},r.translate=function(t,e){r.setPosition(t,o.add(t.position,e))},r.rotate=function(t,e){r.setAngle(t,t.angle+e)},r.scale=function(t,i,o,s){for(var a=0;a<t.parts.length;a++){var c=t.parts[a];n.scale(c.vertices,i,o,t.position),c.axes=h.fromVertices(c.vertices),t.isStatic||(c.area=n.area(c.vertices),r.setMass(c,t.density*c.area),n.translate(c.vertices,{x:-c.position.x,y:-c.position.y}),r.setInertia(c,n.inertia(c.vertices,c.mass)),n.translate(c.vertices,{x:c.position.x,y:c.position.y})),l.update(c.bounds,c.vertices,t.velocity)}if(t.circleRadius&&(i===o?t.circleRadius*=i:t.circleRadius=null),!t.isStatic){var u=e(t);t.area=u.area,r.setMass(t,u.mass),r.setInertia(t,u.inertia)}},r.update=function(t,e,i,r){var s=Math.pow(e*i*t.timeScale,2),a=1-t.frictionAir*i*t.timeScale,c=t.position.x-t.positionPrev.x,u=t.position.y-t.positionPrev.y;t.velocity.x=c*a*r+t.force.x/t.mass*s,t.velocity.y=u*a*r+t.force.y/t.mass*s,t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.position.x+=t.velocity.x,t.position.y+=t.velocity.y,t.angularVelocity=(t.angle-t.anglePrev)*a*r+t.torque/t.inertia*s,t.anglePrev=t.angle,t.angle+=t.angularVelocity,t.speed=o.magnitude(t.velocity),t.angularSpeed=Math.abs(t.angularVelocity);for(var p=0;p<t.parts.length;p++){var f=t.parts[p];n.translate(f.vertices,t.velocity),p>0&&(f.position.x+=t.velocity.x,f.position.y+=t.velocity.y),0!==t.angularVelocity&&(n.rotate(f.vertices,t.angularVelocity,t.position),h.rotate(f.axes,t.angularVelocity),p>0&&o.rotateAbout(f.position,t.angularVelocity,t.position,f.position)),l.update(f.bounds,f.vertices,t.velocity)}},r.applyForce=function(t,e,i){t.force.x+=i.x,
t.force.y+=i.y;var r={x:e.x-t.position.x,y:e.y-t.position.y};t.torque+=r.x*i.y-r.y*i.x};var e=function(t){for(var e={mass:0,area:0,inertia:0,centre:{x:0,y:0}},i=1===t.parts.length?0:1;i<t.parts.length;i++){var r=t.parts[i];e.mass+=r.mass,e.area+=r.area,e.inertia+=r.inertia,e.centre=o.add(e.centre,o.mult(r.position,r.mass!==1/0?r.mass:1))}return e.centre=o.div(e.centre,e.mass!==1/0?e.mass:t.parts.length),e}}()},{"../core/Common":14,"../core/Sleeping":20,"../geometry/Axes":23,"../geometry/Bounds":24,"../geometry/Vector":26,"../geometry/Vertices":27,"../render/Render":29}],2:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Events"),o=t("../core/Common"),s=t("./Body");!function(){r.create=function(t){return o.extend({id:o.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite"},t)},r.setModified=function(t,e,i,n){if(t.isModified=e,i&&t.parent&&r.setModified(t.parent,e,i,n),n)for(var o=0;o<t.composites.length;o++){var s=t.composites[o];r.setModified(s,e,i,n)}},r.add=function(t,e){var i=[].concat(e);n.trigger(t,"beforeAdd",{object:e});for(var s=0;s<i.length;s++){var a=i[s];switch(a.type){case"body":if(a.parent!==a){o.log("Composite.add: skipped adding a compound body part (you must add its parent instead)","warn");break}r.addBody(t,a);break;case"constraint":r.addConstraint(t,a);break;case"composite":r.addComposite(t,a);break;case"mouseConstraint":r.addConstraint(t,a.constraint)}}return n.trigger(t,"afterAdd",{object:e}),t},r.remove=function(t,e,i){var o=[].concat(e);n.trigger(t,"beforeRemove",{object:e});for(var s=0;s<o.length;s++){var a=o[s];switch(a.type){case"body":r.removeBody(t,a,i);break;case"constraint":r.removeConstraint(t,a,i);break;case"composite":r.removeComposite(t,a,i);break;case"mouseConstraint":r.removeConstraint(t,a.constraint)}}return n.trigger(t,"afterRemove",{object:e}),t},r.addComposite=function(t,e){return t.composites.push(e),e.parent=t,r.setModified(t,!0,!0,!1),t},r.removeComposite=function(t,e,i){var n=o.indexOf(t.composites,e);if(n!==-1&&(r.removeCompositeAt(t,n),r.setModified(t,!0,!0,!1)),i)for(var s=0;s<t.composites.length;s++)r.removeComposite(t.composites[s],e,!0);return t},r.removeCompositeAt=function(t,e){return t.composites.splice(e,1),r.setModified(t,!0,!0,!1),t},r.addBody=function(t,e){return t.bodies.push(e),r.setModified(t,!0,!0,!1),t},r.removeBody=function(t,e,i){var n=o.indexOf(t.bodies,e);if(n!==-1&&(r.removeBodyAt(t,n),r.setModified(t,!0,!0,!1)),i)for(var s=0;s<t.composites.length;s++)r.removeBody(t.composites[s],e,!0);return t},r.removeBodyAt=function(t,e){return t.bodies.splice(e,1),r.setModified(t,!0,!0,!1),t},r.addConstraint=function(t,e){return t.constraints.push(e),r.setModified(t,!0,!0,!1),t},r.removeConstraint=function(t,e,i){var n=o.indexOf(t.constraints,e);if(n!==-1&&r.removeConstraintAt(t,n),i)for(var s=0;s<t.composites.length;s++)r.removeConstraint(t.composites[s],e,!0);return t},r.removeConstraintAt=function(t,e){return t.constraints.splice(e,1),r.setModified(t,!0,!0,!1),t},r.clear=function(t,e,i){if(i)for(var n=0;n<t.composites.length;n++)r.clear(t.composites[n],e,!0);return e?t.bodies=t.bodies.filter(function(t){return t.isStatic}):t.bodies.length=0,t.constraints.length=0,t.composites.length=0,r.setModified(t,!0,!0,!1),t},r.allBodies=function(t){for(var e=[].concat(t.bodies),i=0;i<t.composites.length;i++)e=e.concat(r.allBodies(t.composites[i]));return e},r.allConstraints=function(t){for(var e=[].concat(t.constraints),i=0;i<t.composites.length;i++)e=e.concat(r.allConstraints(t.composites[i]));return e},r.allComposites=function(t){for(var e=[].concat(t.composites),i=0;i<t.composites.length;i++)e=e.concat(r.allComposites(t.composites[i]));return e},r.get=function(t,e,i){var n,o;switch(i){case"body":n=r.allBodies(t);break;case"constraint":n=r.allConstraints(t);break;case"composite":n=r.allComposites(t).concat(t)}return n?(o=n.filter(function(t){return t.id.toString()===e.toString()}),0===o.length?null:o[0]):null},r.move=function(t,e,i){return r.remove(t,e),r.add(i,e),t},r.rebase=function(t){for(var e=r.allBodies(t).concat(r.allConstraints(t)).concat(r.allComposites(t)),i=0;i<e.length;i++)e[i].id=o.nextId();return r.setModified(t,!0,!0,!1),t},r.translate=function(t,e,i){for(var n=i?r.allBodies(t):t.bodies,o=0;o<n.length;o++)s.translate(n[o],e);return r.setModified(t,!0,!0,!1),t},r.rotate=function(t,e,i,n){for(var o=Math.cos(e),a=Math.sin(e),l=n?r.allBodies(t):t.bodies,h=0;h<l.length;h++){var c=l[h],u=c.position.x-i.x,p=c.position.y-i.y;s.setPosition(c,{x:i.x+(u*o-p*a),y:i.y+(u*a+p*o)}),s.rotate(c,e)}return r.setModified(t,!0,!0,!1),t},r.scale=function(t,e,i,n,o){for(var a=o?r.allBodies(t):t.bodies,l=0;l<a.length;l++){var h=a[l],c=h.position.x-n.x,u=h.position.y-n.y;s.setPosition(h,{x:n.x+c*e,y:n.y+u*i}),s.scale(h,e,i)}return r.setModified(t,!0,!0,!1),t}}()},{"../core/Common":14,"../core/Events":16,"./Body":1}],3:[function(t,e,i){var r={};e.exports=r;var n=t("./Composite"),o=(t("../constraint/Constraint"),t("../core/Common"));!function(){r.create=function(t){var e=n.create(),i={label:"World",gravity:{x:0,y:1,scale:.001},bounds:{min:{x:-(1/0),y:-(1/0)},max:{x:1/0,y:1/0}}};return o.extend(e,i,t)}}()},{"../constraint/Constraint":12,"../core/Common":14,"./Composite":2}],4:[function(t,e,i){var r={};e.exports=r,function(){r.create=function(t){return{id:r.id(t),vertex:t,normalImpulse:0,tangentImpulse:0}},r.id=function(t){return t.body.id+"_"+t.index}}()},{}],5:[function(t,e,i){var r={};e.exports=r;var n=t("./SAT"),o=t("./Pair"),s=t("../geometry/Bounds");!function(){r.collisions=function(t,e){for(var i=[],a=e.pairs.table,l=0;l<t.length;l++){var h=t[l][0],c=t[l][1];if((!h.isStatic&&!h.isSleeping||!c.isStatic&&!c.isSleeping)&&r.canCollide(h.collisionFilter,c.collisionFilter)&&s.overlaps(h.bounds,c.bounds))for(var u=h.parts.length>1?1:0;u<h.parts.length;u++)for(var p=h.parts[u],f=c.parts.length>1?1:0;f<c.parts.length;f++){var d=c.parts[f];if(p===h&&d===c||s.overlaps(p.bounds,d.bounds)){var _,g=o.id(p,d),m=a[g];_=m&&m.isActive?m.collision:null;var y=n.collides(p,d,_);y.collided&&i.push(y)}}}return i},r.canCollide=function(t,e){return t.group===e.group&&0!==t.group?t.group>0:0!==(t.mask&e.category)&&0!==(e.mask&t.category)}}()},{"../geometry/Bounds":24,"./Pair":7,"./SAT":11}],6:[function(t,e,i){var r={};e.exports=r;var n=t("./Pair"),o=t("./Detector"),s=t("../core/Common");!function(){r.create=function(t){var e={controller:r,detector:o.collisions,buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48};return s.extend(e,t)},r.update=function(i,r,n,o){var s,p,f,d,_,g=n.world,m=i.buckets,y=!1;for(s=0;s<r.length;s++){var v=r[s];if((!v.isSleeping||o)&&!(v.bounds.max.x<g.bounds.min.x||v.bounds.min.x>g.bounds.max.x||v.bounds.max.y<g.bounds.min.y||v.bounds.min.y>g.bounds.max.y)){var S=e(i,v);if(!v.region||S.id!==v.region.id||o){v.region&&!o||(v.region=S);var x=t(S,v.region);for(p=x.startCol;p<=x.endCol;p++)for(f=x.startRow;f<=x.endRow;f++){_=a(p,f),d=m[_];var b=p>=S.startCol&&p<=S.endCol&&f>=S.startRow&&f<=S.endRow,P=p>=v.region.startCol&&p<=v.region.endCol&&f>=v.region.startRow&&f<=v.region.endRow;!b&&P&&P&&d&&c(i,d,v),(v.region===S||b&&!P||o)&&(d||(d=l(m,_)),h(i,d,v))}v.region=S,y=!0}}}y&&(i.pairsList=u(i))},r.clear=function(t){t.buckets={},t.pairs={},t.pairsList=[]};var t=function(t,e){var r=Math.min(t.startCol,e.startCol),n=Math.max(t.endCol,e.endCol),o=Math.min(t.startRow,e.startRow),s=Math.max(t.endRow,e.endRow);return i(r,n,o,s)},e=function(t,e){var r=e.bounds,n=Math.floor(r.min.x/t.bucketWidth),o=Math.floor(r.max.x/t.bucketWidth),s=Math.floor(r.min.y/t.bucketHeight),a=Math.floor(r.max.y/t.bucketHeight);return i(n,o,s,a)},i=function(t,e,i,r){return{id:t+","+e+","+i+","+r,startCol:t,endCol:e,startRow:i,endRow:r}},a=function(t,e){return t+","+e},l=function(t,e){var i=t[e]=[];return i},h=function(t,e,i){for(var r=0;r<e.length;r++){var o=e[r];if(!(i.id===o.id||i.isStatic&&o.isStatic)){var s=n.id(i,o),a=t.pairs[s];a?a[2]+=1:t.pairs[s]=[i,o,1]}}e.push(i)},c=function(t,e,i){e.splice(s.indexOf(e,i),1);for(var r=0;r<e.length;r++){var o=e[r],a=n.id(i,o),l=t.pairs[a];l&&(l[2]-=1)}},u=function(t){var e,i,r=[];e=s.keys(t.pairs);for(var n=0;n<e.length;n++)i=t.pairs[e[n]],i[2]>0?r.push(i):delete t.pairs[e[n]];return r}}()},{"../core/Common":14,"./Detector":5,"./Pair":7}],7:[function(t,e,i){var r={};e.exports=r;var n=t("./Contact");!function(){r.create=function(t,e){var i=t.bodyA,n=t.bodyB,o=t.parentA,s=t.parentB,a={id:r.id(i,n),bodyA:i,bodyB:n,contacts:{},activeContacts:[],separation:0,isActive:!0,isSensor:i.isSensor||n.isSensor,timeCreated:e,timeUpdated:e,inverseMass:o.inverseMass+s.inverseMass,friction:Math.min(o.friction,s.friction),frictionStatic:Math.max(o.frictionStatic,s.frictionStatic),restitution:Math.max(o.restitution,s.restitution),slop:Math.max(o.slop,s.slop)};return r.update(a,t,e),a},r.update=function(t,e,i){var o=t.contacts,s=e.supports,a=t.activeContacts,l=e.parentA,h=e.parentB;if(t.collision=e,t.inverseMass=l.inverseMass+h.inverseMass,t.friction=Math.min(l.friction,h.friction),t.frictionStatic=Math.max(l.frictionStatic,h.frictionStatic),t.restitution=Math.max(l.restitution,h.restitution),t.slop=Math.max(l.slop,h.slop),a.length=0,e.collided){for(var c=0;c<s.length;c++){var u=s[c],p=n.id(u),f=o[p];f?a.push(f):a.push(o[p]=n.create(u))}t.separation=e.depth,r.setActive(t,!0,i)}else t.isActive===!0&&r.setActive(t,!1,i)},r.setActive=function(t,e,i){e?(t.isActive=!0,t.timeUpdated=i):(t.isActive=!1,t.activeContacts.length=0)},r.id=function(t,e){return t.id<e.id?t.id+"_"+e.id:e.id+"_"+t.id}}()},{"./Contact":4}],8:[function(t,e,i){var r={};e.exports=r;var n=t("./Pair"),o=t("../core/Common");!function(){var t=1e3;r.create=function(t){return o.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},t)},r.update=function(t,e,i){var r,s,a,l,h=t.list,c=t.table,u=t.collisionStart,p=t.collisionEnd,f=t.collisionActive,d=[];for(u.length=0,p.length=0,f.length=0,l=0;l<e.length;l++)r=e[l],r.collided&&(s=n.id(r.bodyA,r.bodyB),d.push(s),a=c[s],a?(a.isActive?f.push(a):u.push(a),n.update(a,r,i)):(a=n.create(r,i),c[s]=a,u.push(a),h.push(a)));for(l=0;l<h.length;l++)a=h[l],a.isActive&&o.indexOf(d,a.id)===-1&&(n.setActive(a,!1,i),p.push(a))},r.removeOld=function(e,i){var r,n,o,s,a=e.list,l=e.table,h=[];for(s=0;s<a.length;s++)r=a[s],n=r.collision,n.bodyA.isSleeping||n.bodyB.isSleeping?r.timeUpdated=i:i-r.timeUpdated>t&&h.push(s);for(s=0;s<h.length;s++)o=h[s]-s,r=a[o],delete l[r.id],a.splice(o,1)},r.clear=function(t){return t.table={},t.list.length=0,t.collisionStart.length=0,t.collisionActive.length=0,t.collisionEnd.length=0,t}}()},{"../core/Common":14,"./Pair":7}],9:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),o=t("./SAT"),s=t("../geometry/Bounds"),a=t("../factory/Bodies"),l=t("../geometry/Vertices");!function(){r.ray=function(t,e,i,r){r=r||1e-100;for(var l=n.angle(e,i),h=n.magnitude(n.sub(e,i)),c=.5*(i.x+e.x),u=.5*(i.y+e.y),p=a.rectangle(c,u,h,r,{angle:l}),f=[],d=0;d<t.length;d++){var _=t[d];if(s.overlaps(_.bounds,p.bounds))for(var g=1===_.parts.length?0:1;g<_.parts.length;g++){var m=_.parts[g];if(s.overlaps(m.bounds,p.bounds)){var y=o.collides(m,p);if(y.collided){y.body=y.bodyA=y.bodyB=_,f.push(y);break}}}}return f},r.region=function(t,e,i){for(var r=[],n=0;n<t.length;n++){var o=t[n],a=s.overlaps(o.bounds,e);(a&&!i||!a&&i)&&r.push(o)}return r},r.point=function(t,e){for(var i=[],r=0;r<t.length;r++){var n=t[r];if(s.contains(n.bounds,e))for(var o=1===n.parts.length?0:1;o<n.parts.length;o++){var a=n.parts[o];if(s.contains(a.bounds,e)&&l.contains(a.vertices,e)){i.push(n);break}}}return i}}()},{"../factory/Bodies":21,"../geometry/Bounds":24,"../geometry/Vector":26,"../geometry/Vertices":27,"./SAT":11}],10:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../geometry/Vector"),s=t("../core/Common"),a=t("../geometry/Bounds");!function(){r._restingThresh=4,r._restingThreshTangent=6,r._positionDampen=.9,r._positionWarming=.8,r._frictionNormalMultiplier=5,r.preSolvePosition=function(t){var e,i,r;for(e=0;e<t.length;e++)i=t[e],i.isActive&&(r=i.activeContacts.length,i.collision.parentA.totalContacts+=r,i.collision.parentB.totalContacts+=r)},r.solvePosition=function(t,e){var i,n,s,a,l,h,c,u,p,f=o._temp[0],d=o._temp[1],_=o._temp[2],g=o._temp[3];for(i=0;i<t.length;i++)n=t[i],n.isActive&&!n.isSensor&&(s=n.collision,a=s.parentA,l=s.parentB,h=s.normal,c=o.sub(o.add(l.positionImpulse,l.position,f),o.add(a.positionImpulse,o.sub(l.position,s.penetration,d),_),g),n.separation=o.dot(h,c));for(i=0;i<t.length;i++)n=t[i],!n.isActive||n.isSensor||n.separation<0||(s=n.collision,a=s.parentA,l=s.parentB,h=s.normal,p=(n.separation-n.slop)*e,(a.isStatic||l.isStatic)&&(p*=2),a.isStatic||a.isSleeping||(u=r._positionDampen/a.totalContacts,a.positionImpulse.x+=h.x*p*u,a.positionImpulse.y+=h.y*p*u),l.isStatic||l.isSleeping||(u=r._positionDampen/l.totalContacts,l.positionImpulse.x-=h.x*p*u,l.positionImpulse.y-=h.y*p*u))},r.postSolvePosition=function(t){for(var e=0;e<t.length;e++){var i=t[e];if(i.totalContacts=0,0!==i.positionImpulse.x||0!==i.positionImpulse.y){for(var s=0;s<i.parts.length;s++){var l=i.parts[s];n.translate(l.vertices,i.positionImpulse),a.update(l.bounds,l.vertices,i.velocity),l.position.x+=i.positionImpulse.x,l.position.y+=i.positionImpulse.y}i.positionPrev.x+=i.positionImpulse.x,i.positionPrev.y+=i.positionImpulse.y,o.dot(i.positionImpulse,i.velocity)<0?(i.positionImpulse.x=0,i.positionImpulse.y=0):(i.positionImpulse.x*=r._positionWarming,i.positionImpulse.y*=r._positionWarming)}}},r.preSolveVelocity=function(t){var e,i,r,n,s,a,l,h,c,u,p,f,d,_,g=o._temp[0],m=o._temp[1];for(e=0;e<t.length;e++)if(r=t[e],r.isActive&&!r.isSensor)for(n=r.activeContacts,s=r.collision,a=s.parentA,l=s.parentB,h=s.normal,c=s.tangent,i=0;i<n.length;i++)u=n[i],p=u.vertex,f=u.normalImpulse,d=u.tangentImpulse,0===f&&0===d||(g.x=h.x*f+c.x*d,g.y=h.y*f+c.y*d,a.isStatic||a.isSleeping||(_=o.sub(p,a.position,m),a.positionPrev.x+=g.x*a.inverseMass,a.positionPrev.y+=g.y*a.inverseMass,a.anglePrev+=o.cross(_,g)*a.inverseInertia),l.isStatic||l.isSleeping||(_=o.sub(p,l.position,m),l.positionPrev.x-=g.x*l.inverseMass,l.positionPrev.y-=g.y*l.inverseMass,l.anglePrev-=o.cross(_,g)*l.inverseInertia))},r.solveVelocity=function(t,e){for(var i=e*e,n=o._temp[0],a=o._temp[1],l=o._temp[2],h=o._temp[3],c=o._temp[4],u=o._temp[5],p=0;p<t.length;p++){var f=t[p];if(f.isActive&&!f.isSensor){var d=f.collision,_=d.parentA,g=d.parentB,m=d.normal,y=d.tangent,v=f.activeContacts,S=1/v.length;_.velocity.x=_.position.x-_.positionPrev.x,_.velocity.y=_.position.y-_.positionPrev.y,g.velocity.x=g.position.x-g.positionPrev.x,g.velocity.y=g.position.y-g.positionPrev.y,_.angularVelocity=_.angle-_.anglePrev,g.angularVelocity=g.angle-g.anglePrev;for(var x=0;x<v.length;x++){var b=v[x],P=b.vertex,w=o.sub(P,_.position,a),T=o.sub(P,g.position,l),A=o.add(_.velocity,o.mult(o.perp(w),_.angularVelocity),h),C=o.add(g.velocity,o.mult(o.perp(T),g.angularVelocity),c),V=o.sub(A,C,u),O=o.dot(m,V),R=o.dot(y,V),G=Math.abs(R),k=s.sign(R),I=(1+f.restitution)*O,E=s.clamp(f.separation+O,0,1)*r._frictionNormalMultiplier,M=R,L=1/0;G>f.friction*f.frictionStatic*E*i&&(L=G,M=s.clamp(f.friction*k*i,-L,L));var B=o.cross(w,m),N=o.cross(T,m),D=S/(_.inverseMass+g.inverseMass+_.inverseInertia*B*B+g.inverseInertia*N*N);if(I*=D,M*=D,O<0&&O*O>r._restingThresh*i)b.normalImpulse=0;else{var F=b.normalImpulse;b.normalImpulse=Math.min(b.normalImpulse+I,0),I=b.normalImpulse-F}if(R*R>r._restingThreshTangent*i)b.tangentImpulse=0;else{var H=b.tangentImpulse;b.tangentImpulse=s.clamp(b.tangentImpulse+M,-L,L),M=b.tangentImpulse-H}n.x=m.x*I+y.x*M,n.y=m.y*I+y.y*M,_.isStatic||_.isSleeping||(_.positionPrev.x+=n.x*_.inverseMass,_.positionPrev.y+=n.y*_.inverseMass,_.anglePrev+=o.cross(w,n)*_.inverseInertia),g.isStatic||g.isSleeping||(g.positionPrev.x-=n.x*g.inverseMass,g.positionPrev.y-=n.y*g.inverseMass,g.anglePrev-=o.cross(T,n)*g.inverseInertia)}}}}}()},{"../core/Common":14,"../geometry/Bounds":24,"../geometry/Vector":26,"../geometry/Vertices":27}],11:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../geometry/Vector");!function(){r.collides=function(e,r,s){var a,l,h,c,u=s,p=!1;if(u){var f=e.parent,d=r.parent,_=f.speed*f.speed+f.angularSpeed*f.angularSpeed+d.speed*d.speed+d.angularSpeed*d.angularSpeed;p=u&&u.collided&&_<.2,c=u}else c={collided:!1,bodyA:e,bodyB:r};if(u&&p){var g=c.axisBody,m=g===e?r:e,y=[g.axes[u.axisNumber]];if(h=t(g.vertices,m.vertices,y),c.reused=!0,h.overlap<=0)return c.collided=!1,c}else{if(a=t(e.vertices,r.vertices,e.axes),a.overlap<=0)return c.collided=!1,c;if(l=t(r.vertices,e.vertices,r.axes),l.overlap<=0)return c.collided=!1,c;a.overlap<l.overlap?(h=a,c.axisBody=e):(h=l,c.axisBody=r),c.axisNumber=h.axisNumber}c.bodyA=e.id<r.id?e:r,c.bodyB=e.id<r.id?r:e,c.collided=!0,c.normal=h.axis,c.depth=h.overlap,c.parentA=c.bodyA.parent,c.parentB=c.bodyB.parent,e=c.bodyA,r=c.bodyB,o.dot(c.normal,o.sub(r.position,e.position))>0&&(c.normal=o.neg(c.normal)),c.tangent=o.perp(c.normal),c.penetration={x:c.normal.x*c.depth,y:c.normal.y*c.depth};var v=i(e,r,c.normal),S=c.supports||[];if(S.length=0,n.contains(e.vertices,v[0])&&S.push(v[0]),n.contains(e.vertices,v[1])&&S.push(v[1]),S.length<2){var x=i(r,e,o.neg(c.normal));n.contains(r.vertices,x[0])&&S.push(x[0]),S.length<2&&n.contains(r.vertices,x[1])&&S.push(x[1])}return S.length<1&&(S=[v[0]]),c.supports=S,c};var t=function(t,i,r){for(var n,s,a=o._temp[0],l=o._temp[1],h={overlap:Number.MAX_VALUE},c=0;c<r.length;c++){if(s=r[c],e(a,t,s),e(l,i,s),n=Math.min(a.max-l.min,l.max-a.min),n<=0)return h.overlap=n,h;n<h.overlap&&(h.overlap=n,h.axis=s,h.axisNumber=c)}return h},e=function(t,e,i){for(var r=o.dot(e[0],i),n=r,s=1;s<e.length;s+=1){var a=o.dot(e[s],i);a>n?n=a:a<r&&(r=a)}t.min=r,t.max=n},i=function(t,e,i){for(var r,n,s,a,l=Number.MAX_VALUE,h=o._temp[0],c=e.vertices,u=t.position,p=0;p<c.length;p++)n=c[p],h.x=n.x-u.x,h.y=n.y-u.y,r=-o.dot(i,h),r<l&&(l=r,s=n);var f=s.index-1>=0?s.index-1:c.length-1;n=c[f],h.x=n.x-u.x,h.y=n.y-u.y,l=-o.dot(i,h),a=n;var d=(s.index+1)%c.length;return n=c[d],h.x=n.x-u.x,h.y=n.y-u.y,r=-o.dot(i,h),r<l&&(a=n),[s,a]}}()},{"../geometry/Vector":26,"../geometry/Vertices":27}],12:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../geometry/Vector"),s=t("../core/Sleeping"),a=t("../geometry/Bounds"),l=t("../geometry/Axes"),h=t("../core/Common");!function(){var t=1e-6,e=.001;r.create=function(e){var i=e;i.bodyA&&!i.pointA&&(i.pointA={x:0,y:0}),i.bodyB&&!i.pointB&&(i.pointB={x:0,y:0});var r=i.bodyA?o.add(i.bodyA.position,i.pointA):i.pointA,n=i.bodyB?o.add(i.bodyB.position,i.pointB):i.pointB,s=o.magnitude(o.sub(r,n));i.length=i.length||s||t;var a={visible:!0,lineWidth:2,strokeStyle:"#666"};return i.render=h.extend(a,i.render),i.id=i.id||h.nextId(),i.label=i.label||"Constraint",i.type="constraint",i.stiffness=i.stiffness||1,i.angularStiffness=i.angularStiffness||0,i.angleA=i.bodyA?i.bodyA.angle:i.angleA,i.angleB=i.bodyB?i.bodyB.angle:i.angleB,i},r.solveAll=function(t,e){for(var i=0;i<t.length;i++)r.solve(t[i],e)},r.solve=function(i,r){var n=i.bodyA,s=i.bodyB,a=i.pointA,l=i.pointB;n&&!n.isStatic&&(i.pointA=o.rotate(a,n.angle-i.angleA),i.angleA=n.angle),s&&!s.isStatic&&(i.pointB=o.rotate(l,s.angle-i.angleB),i.angleB=s.angle);var h=a,c=l;if(n&&(h=o.add(n.position,a)),s&&(c=o.add(s.position,l)),h&&c){var u=o.sub(h,c),p=o.magnitude(u);0===p&&(p=t);var f=(p-i.length)/p,d=o.div(u,p),_=o.mult(u,.5*f*i.stiffness*r*r);if(!(Math.abs(1-p/i.length)<e*r)){var g,m,y,v,S,x,b,P;n&&!n.isStatic?(y={x:h.x-n.position.x+_.x,y:h.y-n.position.y+_.y},n.velocity.x=n.position.x-n.positionPrev.x,n.velocity.y=n.position.y-n.positionPrev.y,n.angularVelocity=n.angle-n.anglePrev,g=o.add(n.velocity,o.mult(o.perp(y),n.angularVelocity)),S=o.dot(y,d),b=n.inverseMass+n.inverseInertia*S*S):(g={x:0,y:0},b=n?n.inverseMass:0),s&&!s.isStatic?(v={x:c.x-s.position.x-_.x,y:c.y-s.position.y-_.y},s.velocity.x=s.position.x-s.positionPrev.x,s.velocity.y=s.position.y-s.positionPrev.y,s.angularVelocity=s.angle-s.anglePrev,m=o.add(s.velocity,o.mult(o.perp(v),s.angularVelocity)),x=o.dot(v,d),P=s.inverseMass+s.inverseInertia*x*x):(m={x:0,y:0},P=s?s.inverseMass:0);var w=o.sub(m,g),T=o.dot(d,w)/(b+P);T>0&&(T=0);var A,C={x:d.x*T,y:d.y*T};n&&!n.isStatic&&(A=o.cross(y,C)*n.inverseInertia*(1-i.angularStiffness),n.constraintImpulse.x-=_.x,n.constraintImpulse.y-=_.y,n.constraintImpulse.angle+=A,n.position.x-=_.x,n.position.y-=_.y,n.angle+=A),s&&!s.isStatic&&(A=o.cross(v,C)*s.inverseInertia*(1-i.angularStiffness),s.constraintImpulse.x+=_.x,s.constraintImpulse.y+=_.y,s.constraintImpulse.angle-=A,s.position.x+=_.x,s.position.y+=_.y,s.angle-=A)}}},r.postSolveAll=function(t){for(var e=0;e<t.length;e++){var i=t[e],r=i.constraintImpulse;if(0!==r.x||0!==r.y||0!==r.angle){s.set(i,!1);for(var h=0;h<i.parts.length;h++){var c=i.parts[h];n.translate(c.vertices,r),h>0&&(c.position.x+=r.x,c.position.y+=r.y),0!==r.angle&&(n.rotate(c.vertices,r.angle,i.position),l.rotate(c.axes,r.angle),h>0&&o.rotateAbout(c.position,r.angle,i.position,c.position)),a.update(c.bounds,c.vertices,i.velocity)}r.angle=0,r.x=0,r.y=0}}}}()},{"../core/Common":14,"../core/Sleeping":20,"../geometry/Axes":23,"../geometry/Bounds":24,"../geometry/Vector":26,"../geometry/Vertices":27}],13:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../core/Sleeping"),s=t("../core/Mouse"),a=t("../core/Events"),l=t("../collision/Detector"),h=t("./Constraint"),c=t("../body/Composite"),u=t("../core/Common"),p=t("../geometry/Bounds");!function(){r.create=function(e,i){var n=(e?e.mouse:null)||(i?i.mouse:null);n||(e&&e.render&&e.render.canvas?n=s.create(e.render.canvas):i&&i.element?n=s.create(i.element):(n=s.create(),u.log("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected","warn")));var o=h.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),l={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:o,collisionFilter:{category:1,mask:4294967295,group:0}},p=u.extend(l,i);return a.on(e,"tick",function(){var i=c.allBodies(e.world);r.update(p,i),t(p)}),p},r.update=function(t,e){var i=t.mouse,r=t.constraint,s=t.body;if(0===i.button){if(r.bodyB)o.set(r.bodyB,!1),r.pointA=i.position;else for(var h=0;h<e.length;h++)if(s=e[h],p.contains(s.bounds,i.position)&&l.canCollide(s.collisionFilter,t.collisionFilter))for(var c=s.parts.length>1?1:0;c<s.parts.length;c++){var u=s.parts[c];if(n.contains(u.vertices,i.position)){r.pointA=i.position,r.bodyB=t.body=s,r.pointB={x:i.position.x-s.position.x,y:i.position.y-s.position.y},r.angleB=s.angle,o.set(s,!1),a.trigger(t,"startdrag",{mouse:i,body:s});break}}}else r.bodyB=t.body=null,r.pointB=null,s&&a.trigger(t,"enddrag",{mouse:i,body:s})};var t=function(t){var e=t.mouse,i=e.sourceEvents;i.mousemove&&a.trigger(t,"mousemove",{mouse:e}),i.mousedown&&a.trigger(t,"mousedown",{mouse:e}),i.mouseup&&a.trigger(t,"mouseup",{mouse:e}),s.clearSourceEvents(e)}}()},{"../body/Composite":2,"../collision/Detector":5,"../core/Common":14,"../core/Events":16,"../core/Mouse":18,"../core/Sleeping":20,"../geometry/Bounds":24,"../geometry/Vertices":27,"./Constraint":12}],14:[function(t,e,i){var r={};e.exports=r,function(){r._nextId=0,r._seed=0,r.extend=function(t,e){var i,n,o;"boolean"==typeof e?(i=2,o=e):(i=1,o=!0),n=Array.prototype.slice.call(arguments,i);for(var s=0;s<n.length;s++){var a=n[s];if(a)for(var l in a)o&&a[l]&&a[l].constructor===Object?t[l]&&t[l].constructor!==Object?t[l]=a[l]:(t[l]=t[l]||{},r.extend(t[l],o,a[l])):t[l]=a[l]}return t},r.clone=function(t,e){return r.extend({},e,t)},r.keys=function(t){if(Object.keys)return Object.keys(t);var e=[];for(var i in t)e.push(i);return e},r.values=function(t){var e=[];if(Object.keys){for(var i=Object.keys(t),r=0;r<i.length;r++)e.push(t[i[r]]);return e}for(var n in t)e.push(t[n]);return e},r.shadeColor=function(t,e){var i=parseInt(t.slice(1),16),r=Math.round(2.55*e),n=(i>>16)+r,o=(i>>8&255)+r,s=(255&i)+r;return"#"+(16777216+65536*(n<255?n<1?0:n:255)+256*(o<255?o<1?0:o:255)+(s<255?s<1?0:s:255)).toString(16).slice(1)},r.shuffle=function(t){for(var e=t.length-1;e>0;e--){var i=Math.floor(r.random()*(e+1)),n=t[e];t[e]=t[i],t[i]=n}return t},r.choose=function(t){return t[Math.floor(r.random()*t.length)]},r.isElement=function(t){try{return t instanceof HTMLElement}catch(e){return"object"==typeof t&&1===t.nodeType&&"object"==typeof t.style&&"object"==typeof t.ownerDocument}},r.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)},r.clamp=function(t,e,i){return t<e?e:t>i?i:t},r.sign=function(t){return t<0?-1:1},r.now=function(){var t=window.performance||{};return t.now=function(){return t.now||t.webkitNow||t.msNow||t.oNow||t.mozNow||function(){return+new Date}}(),t.now()},r.random=function(e,i){return e="undefined"!=typeof e?e:0,i="undefined"!=typeof i?i:1,e+t()*(i-e)},r.colorToNumber=function(t){return t=t.replace("#",""),3==t.length&&(t=t.charAt(0)+t.charAt(0)+t.charAt(1)+t.charAt(1)+t.charAt(2)+t.charAt(2)),parseInt(t,16)},r.log=function(t,e){if(console&&console.log&&console.warn)switch(e){case"warn":console.warn("Matter.js:",t);break;case"error":console.log("Matter.js:",t)}},r.nextId=function(){return r._nextId++},r.indexOf=function(t,e){if(t.indexOf)return t.indexOf(e);for(var i=0;i<t.length;i++)if(t[i]===e)return i;return-1};var t=function(){return r._seed=(9301*r._seed+49297)%233280,r._seed/233280}}()},{}],15:[function(t,e,i){var r={};e.exports=r;var n=t("../body/World"),o=t("./Sleeping"),s=t("../collision/Resolver"),a=t("../render/Render"),l=t("../collision/Pairs"),h=(t("./Metrics"),t("../collision/Grid")),c=t("./Events"),u=t("../body/Composite"),p=t("../constraint/Constraint"),f=t("./Common"),d=t("../body/Body");!function(){r.create=function(t,e){e=f.isElement(t)?e:t,t=f.isElement(t)?t:null,e=e||{},(t||e.render)&&f.log("Engine.create: engine.render is deprecated (see docs)","warn");var i={positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],timing:{timestamp:0,timeScale:1},broadphase:{controller:h}},r=f.extend(i,e);if(t||r.render){var o={element:t,controller:a};r.render=f.extend(o,r.render)}return r.render&&r.render.controller&&(r.render=r.render.controller.create(r.render)),r.render&&(r.render.engine=r),r.world=e.world||n.create(r.world),r.pairs=l.create(),r.broadphase=r.broadphase.controller.create(r.broadphase),r.metrics=r.metrics||{extended:!1},r},r.update=function(r,n,a){n=n||1e3/60,a=a||1;var h,f=r.world,d=r.timing,_=r.broadphase,g=[];d.timestamp+=n*d.timeScale;var m={timestamp:d.timestamp};c.trigger(r,"beforeUpdate",m);var y=u.allBodies(f),v=u.allConstraints(f);for(r.enableSleeping&&o.update(y,d.timeScale),e(y,f.gravity),i(y,n,d.timeScale,a,f.bounds),h=0;h<r.constraintIterations;h++)p.solveAll(v,d.timeScale);p.postSolveAll(y),_.controller?(f.isModified&&_.controller.clear(_),_.controller.update(_,y,r,f.isModified),g=_.pairsList):g=y,f.isModified&&u.setModified(f,!1,!1,!0);var S=_.detector(g,r),x=r.pairs,b=d.timestamp;for(l.update(x,S,b),l.removeOld(x,b),r.enableSleeping&&o.afterCollisions(x.list,d.timeScale),x.collisionStart.length>0&&c.trigger(r,"collisionStart",{pairs:x.collisionStart}),s.preSolvePosition(x.list),h=0;h<r.positionIterations;h++)s.solvePosition(x.list,d.timeScale);for(s.postSolvePosition(y),s.preSolveVelocity(x.list),h=0;h<r.velocityIterations;h++)s.solveVelocity(x.list,d.timeScale);return x.collisionActive.length>0&&c.trigger(r,"collisionActive",{pairs:x.collisionActive}),x.collisionEnd.length>0&&c.trigger(r,"collisionEnd",{pairs:x.collisionEnd}),t(y),c.trigger(r,"afterUpdate",m),r},r.merge=function(t,e){if(f.extend(t,e),e.world){t.world=e.world,r.clear(t);for(var i=u.allBodies(t.world),n=0;n<i.length;n++){var s=i[n];o.set(s,!1),s.id=f.nextId()}}},r.clear=function(t){var e=t.world;l.clear(t.pairs);var i=t.broadphase;if(i.controller){var r=u.allBodies(e);i.controller.clear(i),i.controller.update(i,r,t,!0)}};var t=function(t){for(var e=0;e<t.length;e++){var i=t[e];i.force.x=0,i.force.y=0,i.torque=0}},e=function(t,e){var i="undefined"!=typeof e.scale?e.scale:.001;if((0!==e.x||0!==e.y)&&0!==i)for(var r=0;r<t.length;r++){var n=t[r];n.isStatic||n.isSleeping||(n.force.y+=n.mass*e.y*i,n.force.x+=n.mass*e.x*i)}},i=function(t,e,i,r,n){for(var o=0;o<t.length;o++){var s=t[o];s.isStatic||s.isSleeping||d.update(s,e,i,r)}}}()},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Grid":6,"../collision/Pairs":8,"../collision/Resolver":10,"../constraint/Constraint":12,"../render/Render":29,"./Common":14,"./Events":16,"./Metrics":17,"./Sleeping":20}],16:[function(t,e,i){var r={};e.exports=r;var n=t("./Common");!function(){r.on=function(t,e,i){for(var r,n=e.split(" "),o=0;o<n.length;o++)r=n[o],t.events=t.events||{},t.events[r]=t.events[r]||[],t.events[r].push(i);return i},r.off=function(t,e,i){if(!e)return void(t.events={});"function"==typeof e&&(i=e,e=n.keys(t.events).join(" "));for(var r=e.split(" "),o=0;o<r.length;o++){var s=t.events[r[o]],a=[];if(i&&s)for(var l=0;l<s.length;l++)s[l]!==i&&a.push(s[l]);t.events[r[o]]=a}},r.trigger=function(t,e,i){var r,o,s,a;if(t.events){i||(i={}),r=e.split(" ");for(var l=0;l<r.length;l++)if(o=r[l],s=t.events[o]){a=n.clone(i,!1),a.name=o,a.source=t;for(var h=0;h<s.length;h++)s[h].apply(t,[a])}}}}()},{"./Common":14}],17:[function(t,e,i){},{"../body/Composite":2,"./Common":14}],18:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Common");!function(){r.create=function(e){var i={};return e||n.log("Mouse.create: element was undefined, defaulting to document.body","warn"),i.element=e||document.body,i.absolute={x:0,y:0},i.position={x:0,y:0},i.mousedownPosition={x:0,y:0},i.mouseupPosition={x:0,y:0},i.offset={x:0,y:0},i.scale={x:1,y:1},i.wheelDelta=0,i.button=-1,i.pixelRatio=i.element.getAttribute("data-pixel-ratio")||1,i.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},i.mousemove=function(e){var r=t(e,i.element,i.pixelRatio),n=e.changedTouches;n&&(i.button=0,e.preventDefault()),i.absolute.x=r.x,i.absolute.y=r.y,i.position.x=i.absolute.x*i.scale.x+i.offset.x,i.position.y=i.absolute.y*i.scale.y+i.offset.y,i.sourceEvents.mousemove=e},i.mousedown=function(e){var r=t(e,i.element,i.pixelRatio),n=e.changedTouches;n?(i.button=0,e.preventDefault()):i.button=e.button,i.absolute.x=r.x,i.absolute.y=r.y,i.position.x=i.absolute.x*i.scale.x+i.offset.x,i.position.y=i.absolute.y*i.scale.y+i.offset.y,i.mousedownPosition.x=i.position.x,i.mousedownPosition.y=i.position.y,i.sourceEvents.mousedown=e},i.mouseup=function(e){var r=t(e,i.element,i.pixelRatio),n=e.changedTouches;n&&e.preventDefault(),i.button=-1,i.absolute.x=r.x,i.absolute.y=r.y,i.position.x=i.absolute.x*i.scale.x+i.offset.x,i.position.y=i.absolute.y*i.scale.y+i.offset.y,i.mouseupPosition.x=i.position.x,i.mouseupPosition.y=i.position.y,i.sourceEvents.mouseup=e},i.mousewheel=function(t){i.wheelDelta=Math.max(-1,Math.min(1,t.wheelDelta||-t.detail)),t.preventDefault()},r.setElement(i,i.element),i},r.setElement=function(t,e){t.element=e,e.addEventListener("mousemove",t.mousemove),e.addEventListener("mousedown",t.mousedown),e.addEventListener("mouseup",t.mouseup),e.addEventListener("mousewheel",t.mousewheel),e.addEventListener("DOMMouseScroll",t.mousewheel),e.addEventListener("touchmove",t.mousemove),e.addEventListener("touchstart",t.mousedown),e.addEventListener("touchend",t.mouseup)},r.clearSourceEvents=function(t){t.sourceEvents.mousemove=null,t.sourceEvents.mousedown=null,t.sourceEvents.mouseup=null,t.sourceEvents.mousewheel=null,t.wheelDelta=0},r.setOffset=function(t,e){t.offset.x=e.x,t.offset.y=e.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y},r.setScale=function(t,e){t.scale.x=e.x,t.scale.y=e.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y};var t=function(t,e,i){var r,n,o=e.getBoundingClientRect(),s=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:s.scrollLeft,l=void 0!==window.pageYOffset?window.pageYOffset:s.scrollTop,h=t.changedTouches;
return h?(r=h[0].pageX-o.left-a,n=h[0].pageY-o.top-l):(r=t.pageX-o.left-a,n=t.pageY-o.top-l),{x:r/(e.clientWidth/e.width*i),y:n/(e.clientHeight/e.height*i)}}}()},{"../core/Common":14}],19:[function(t,e,i){var r={};e.exports=r;var n=t("./Events"),o=t("./Engine"),s=t("./Common");!function(){var t,e;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout(function(){t(s.now())},1e3/60)},e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(t){var e={fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},i=s.extend(e,t);return i.delta=i.delta||1e3/i.fps,i.deltaMin=i.deltaMin||1e3/i.fps,i.deltaMax=i.deltaMax||1e3/(.5*i.fps),i.fps=1e3/i.delta,i},r.run=function(e,i){return"undefined"!=typeof e.positionIterations&&(i=e,e=r.create()),function n(o){e.frameRequestId=t(n),o&&e.enabled&&r.tick(e,i,o)}(),e},r.tick=function(t,e,i){var r,s=e.timing,a=1,l={timestamp:s.timestamp};n.trigger(t,"beforeTick",l),n.trigger(e,"beforeTick",l),t.isFixed?r=t.delta:(r=i-t.timePrev||t.delta,t.timePrev=i,t.deltaHistory.push(r),t.deltaHistory=t.deltaHistory.slice(-t.deltaSampleSize),r=Math.min.apply(null,t.deltaHistory),r=r<t.deltaMin?t.deltaMin:r,r=r>t.deltaMax?t.deltaMax:r,a=r/t.delta,t.delta=r),0!==t.timeScalePrev&&(a*=s.timeScale/t.timeScalePrev),0===s.timeScale&&(a=0),t.timeScalePrev=s.timeScale,t.correction=a,t.frameCounter+=1,i-t.counterTimestamp>=1e3&&(t.fps=t.frameCounter*((i-t.counterTimestamp)/1e3),t.counterTimestamp=i,t.frameCounter=0),n.trigger(t,"tick",l),n.trigger(e,"tick",l),e.world.isModified&&e.render&&e.render.controller&&e.render.controller.clear&&e.render.controller.clear(e.render),n.trigger(t,"beforeUpdate",l),o.update(e,r,a),n.trigger(t,"afterUpdate",l),e.render&&e.render.controller&&(n.trigger(t,"beforeRender",l),n.trigger(e,"beforeRender",l),e.render.controller.world(e.render),n.trigger(t,"afterRender",l),n.trigger(e,"afterRender",l)),n.trigger(t,"afterTick",l),n.trigger(e,"afterTick",l)},r.stop=function(t){e(t.frameRequestId)},r.start=function(t,e){r.run(t,e)}}()},{"./Common":14,"./Engine":15,"./Events":16}],20:[function(t,e,i){var r={};e.exports=r;var n=t("./Events");!function(){r._motionWakeThreshold=.18,r._motionSleepThreshold=.08,r._minBias=.9,r.update=function(t,e){for(var i=e*e*e,n=0;n<t.length;n++){var o=t[n],s=o.speed*o.speed+o.angularSpeed*o.angularSpeed;if(0===o.force.x&&0===o.force.y){var a=Math.min(o.motion,s),l=Math.max(o.motion,s);o.motion=r._minBias*a+(1-r._minBias)*l,o.sleepThreshold>0&&o.motion<r._motionSleepThreshold*i?(o.sleepCounter+=1,o.sleepCounter>=o.sleepThreshold&&r.set(o,!0)):o.sleepCounter>0&&(o.sleepCounter-=1)}else r.set(o,!1)}},r.afterCollisions=function(t,e){for(var i=e*e*e,n=0;n<t.length;n++){var o=t[n];if(o.isActive){var s=o.collision,a=s.bodyA.parent,l=s.bodyB.parent;if(!(a.isSleeping&&l.isSleeping||a.isStatic||l.isStatic)&&(a.isSleeping||l.isSleeping)){var h=a.isSleeping&&!a.isStatic?a:l,c=h===a?l:a;!h.isStatic&&c.motion>r._motionWakeThreshold*i&&r.set(h,!1)}}}},r.set=function(t,e){var i=t.isSleeping;e?(t.isSleeping=!0,t.sleepCounter=t.sleepThreshold,t.positionImpulse.x=0,t.positionImpulse.y=0,t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.anglePrev=t.angle,t.speed=0,t.angularSpeed=0,t.motion=0,i||n.trigger(t,"sleepStart")):(t.isSleeping=!1,t.sleepCounter=0,i&&n.trigger(t,"sleepEnd"))}}()},{"./Events":16}],21:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vertices"),o=t("../core/Common"),s=t("../body/Body"),a=t("../geometry/Bounds"),l=t("../geometry/Vector");!function(){r.rectangle=function(t,e,i,r,a){a=a||{};var l={label:"Rectangle Body",position:{x:t,y:e},vertices:n.fromPath("L 0 0 L "+i+" 0 L "+i+" "+r+" L 0 "+r)};if(a.chamfer){var h=a.chamfer;l.vertices=n.chamfer(l.vertices,h.radius,h.quality,h.qualityMin,h.qualityMax),delete a.chamfer}return s.create(o.extend({},l,a))},r.trapezoid=function(t,e,i,r,a,l){l=l||{},a*=.5;var h,c=(1-2*a)*i,u=i*a,p=u+c,f=p+u;h=a<.5?"L 0 0 L "+u+" "+-r+" L "+p+" "+-r+" L "+f+" 0":"L 0 0 L "+p+" "+-r+" L "+f+" 0";var d={label:"Trapezoid Body",position:{x:t,y:e},vertices:n.fromPath(h)};if(l.chamfer){var _=l.chamfer;d.vertices=n.chamfer(d.vertices,_.radius,_.quality,_.qualityMin,_.qualityMax),delete l.chamfer}return s.create(o.extend({},d,l))},r.circle=function(t,e,i,n,s){n=n||{};var a={label:"Circle Body",circleRadius:i};s=s||25;var l=Math.ceil(Math.max(10,Math.min(s,i)));return l%2===1&&(l+=1),r.polygon(t,e,l,i,o.extend({},a,n))},r.polygon=function(t,e,i,a,l){if(l=l||{},i<3)return r.circle(t,e,a,l);for(var h=2*Math.PI/i,c="",u=.5*h,p=0;p<i;p+=1){var f=u+p*h,d=Math.cos(f)*a,_=Math.sin(f)*a;c+="L "+d.toFixed(3)+" "+_.toFixed(3)+" "}var g={label:"Polygon Body",position:{x:t,y:e},vertices:n.fromPath(c)};if(l.chamfer){var m=l.chamfer;g.vertices=n.chamfer(g.vertices,m.radius,m.quality,m.qualityMin,m.qualityMax),delete l.chamfer}return s.create(o.extend({},g,l))},r.fromVertices=function(t,e,i,r,h,c,u){var p,f,d,_,g,m,y,v,S;for(r=r||{},f=[],h="undefined"!=typeof h&&h,c="undefined"!=typeof c?c:.01,u="undefined"!=typeof u?u:10,window.decomp||o.log("Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.","warn"),o.isArray(i[0])||(i=[i]),v=0;v<i.length;v+=1)if(_=i[v],d=n.isConvex(_),d||!window.decomp)_=d?n.clockwiseSort(_):n.hull(_),f.push({position:{x:t,y:e},vertices:_});else{var x=new decomp.Polygon;for(g=0;g<_.length;g++)x.vertices.push([_[g].x,_[g].y]);x.makeCCW(),c!==!1&&x.removeCollinearPoints(c);var b=x.quickDecomp();for(g=0;g<b.length;g++){var P=b[g],w=[];for(m=0;m<P.vertices.length;m++)w.push({x:P.vertices[m][0],y:P.vertices[m][1]});u>0&&n.area(w)<u||f.push({position:n.centre(w),vertices:w})}}for(g=0;g<f.length;g++)f[g]=s.create(o.extend(f[g],r));if(h){var T=5;for(g=0;g<f.length;g++){var A=f[g];for(m=g+1;m<f.length;m++){var C=f[m];if(a.overlaps(A.bounds,C.bounds)){var V=A.vertices,O=C.vertices;for(y=0;y<A.vertices.length;y++)for(S=0;S<C.vertices.length;S++){var R=l.magnitudeSquared(l.sub(V[(y+1)%V.length],O[S])),G=l.magnitudeSquared(l.sub(V[y],O[(S+1)%O.length]));R<T&&G<T&&(V[y].isInternal=!0,O[S].isInternal=!0)}}}}}return f.length>1?(p=s.create(o.extend({parts:f.slice(0)},r)),s.setPosition(p,{x:t,y:e}),p):f[0]}}()},{"../body/Body":1,"../core/Common":14,"../geometry/Bounds":24,"../geometry/Vector":26,"../geometry/Vertices":27}],22:[function(t,e,i){var r={};e.exports=r;var n=t("../body/Composite"),o=t("../constraint/Constraint"),s=t("../core/Common"),a=t("../body/Body"),l=t("./Bodies");!function(){r.stack=function(t,e,i,r,o,s,l){for(var h,c=n.create({label:"Stack"}),u=t,p=e,f=0,d=0;d<r;d++){for(var _=0,g=0;g<i;g++){var m=l(u,p,g,d,h,f);if(m){var y=m.bounds.max.y-m.bounds.min.y,v=m.bounds.max.x-m.bounds.min.x;y>_&&(_=y),a.translate(m,{x:.5*v,y:.5*y}),u=m.bounds.max.x+o,n.addBody(c,m),h=m,f+=1}else u+=o}p+=_+s,u=t}return c},r.chain=function(t,e,i,r,a,l){for(var h=t.bodies,c=1;c<h.length;c++){var u=h[c-1],p=h[c],f=u.bounds.max.y-u.bounds.min.y,d=u.bounds.max.x-u.bounds.min.x,_=p.bounds.max.y-p.bounds.min.y,g=p.bounds.max.x-p.bounds.min.x,m={bodyA:u,pointA:{x:d*e,y:f*i},bodyB:p,pointB:{x:g*r,y:_*a}},y=s.extend(m,l);n.addConstraint(t,o.create(y))}return t.label+=" Chain",t},r.mesh=function(t,e,i,r,a){var l,h,c,u,p,f=t.bodies;for(l=0;l<i;l++){for(h=1;h<e;h++)c=f[h-1+l*e],u=f[h+l*e],n.addConstraint(t,o.create(s.extend({bodyA:c,bodyB:u},a)));if(l>0)for(h=0;h<e;h++)c=f[h+(l-1)*e],u=f[h+l*e],n.addConstraint(t,o.create(s.extend({bodyA:c,bodyB:u},a))),r&&h>0&&(p=f[h-1+(l-1)*e],n.addConstraint(t,o.create(s.extend({bodyA:p,bodyB:u},a)))),r&&h<e-1&&(p=f[h+1+(l-1)*e],n.addConstraint(t,o.create(s.extend({bodyA:p,bodyB:u},a))))}return t.label+=" Mesh",t},r.pyramid=function(t,e,i,n,o,s,l){return r.stack(t,e,i,n,o,s,function(e,r,s,h,c,u){var p=Math.min(n,Math.ceil(i/2)),f=c?c.bounds.max.x-c.bounds.min.x:0;if(!(h>p)){h=p-h;var d=h,_=i-1-h;if(!(s<d||s>_)){1===u&&a.translate(c,{x:(s+(i%2===1?1:-1))*f,y:0});var g=c?s*f:0;return l(t+g+s*o,r,s,h,c,u)}}})},r.newtonsCradle=function(t,e,i,r,s){for(var a=n.create({label:"Newtons Cradle"}),h=0;h<i;h++){var c=1.9,u=l.circle(t+h*(r*c),e+s,r,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),p=o.create({pointA:{x:t+h*(r*c),y:e},bodyB:u});n.addBody(a,u),n.addConstraint(a,p)}return a},r.car=function(t,e,i,r,s){var h=a.nextGroup(!0),c=-20,u=.5*-i+c,p=.5*i-c,f=0,d=n.create({label:"Car"}),_=l.trapezoid(t,e,i,r,.3,{collisionFilter:{group:h},friction:.01,chamfer:{radius:10}}),g=l.circle(t+u,e+f,s,{collisionFilter:{group:h},friction:.8,density:.01}),m=l.circle(t+p,e+f,s,{collisionFilter:{group:h},friction:.8,density:.01}),y=o.create({bodyA:_,pointA:{x:u,y:f},bodyB:g,stiffness:.2}),v=o.create({bodyA:_,pointA:{x:p,y:f},bodyB:m,stiffness:.2});return n.addBody(d,_),n.addBody(d,g),n.addBody(d,m),n.addConstraint(d,y),n.addConstraint(d,v),d},r.softBody=function(t,e,i,n,o,a,h,c,u,p){u=s.extend({inertia:1/0},u),p=s.extend({stiffness:.4},p);var f=r.stack(t,e,i,n,o,a,function(t,e){return l.circle(t,e,c,u)});return r.mesh(f,i,n,h,p),f.label="Soft Body",f}}()},{"../body/Body":1,"../body/Composite":2,"../constraint/Constraint":12,"../core/Common":14,"./Bodies":21}],23:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),o=t("../core/Common");!function(){r.fromVertices=function(t){for(var e={},i=0;i<t.length;i++){var r=(i+1)%t.length,s=n.normalise({x:t[r].y-t[i].y,y:t[i].x-t[r].x}),a=0===s.y?1/0:s.x/s.y;a=a.toFixed(3).toString(),e[a]=s}return o.values(e)},r.rotate=function(t,e){if(0!==e)for(var i=Math.cos(e),r=Math.sin(e),n=0;n<t.length;n++){var o,s=t[n];o=s.x*i-s.y*r,s.y=s.x*r+s.y*i,s.x=o}}}()},{"../core/Common":14,"../geometry/Vector":26}],24:[function(t,e,i){var r={};e.exports=r,function(){r.create=function(t){var e={min:{x:0,y:0},max:{x:0,y:0}};return t&&r.update(e,t),e},r.update=function(t,e,i){t.min.x=1/0,t.max.x=-(1/0),t.min.y=1/0,t.max.y=-(1/0);for(var r=0;r<e.length;r++){var n=e[r];n.x>t.max.x&&(t.max.x=n.x),n.x<t.min.x&&(t.min.x=n.x),n.y>t.max.y&&(t.max.y=n.y),n.y<t.min.y&&(t.min.y=n.y)}i&&(i.x>0?t.max.x+=i.x:t.min.x+=i.x,i.y>0?t.max.y+=i.y:t.min.y+=i.y)},r.contains=function(t,e){return e.x>=t.min.x&&e.x<=t.max.x&&e.y>=t.min.y&&e.y<=t.max.y},r.overlaps=function(t,e){return t.min.x<=e.max.x&&t.max.x>=e.min.x&&t.max.y>=e.min.y&&t.min.y<=e.max.y},r.translate=function(t,e){t.min.x+=e.x,t.max.x+=e.x,t.min.y+=e.y,t.max.y+=e.y},r.shift=function(t,e){var i=t.max.x-t.min.x,r=t.max.y-t.min.y;t.min.x=e.x,t.max.x=e.x+i,t.min.y=e.y,t.max.y=e.y+r}}()},{}],25:[function(t,e,i){var r={};e.exports=r;t("../geometry/Bounds");!function(){r.pathToVertices=function(e,i){var r,n,o,s,a,l,h,c,u,p,f,d,_=[],g=0,m=0,y=0;i=i||15;var v=function(t,e,i){var r=i%2===1&&i>1;if(!u||t!=u.x||e!=u.y){u&&r?(f=u.x,d=u.y):(f=0,d=0);var n={x:f+t,y:d+e};!r&&u||(u=n),_.push(n),m=f+t,y=d+e}},S=function(t){var e=t.pathSegTypeAsLetter.toUpperCase();if("Z"!==e){switch(e){case"M":case"L":case"T":case"C":case"S":case"Q":m=t.x,y=t.y;break;case"H":m=t.x;break;case"V":y=t.y}v(m,y,t.pathSegType)}};for(t(e),o=e.getTotalLength(),l=[],r=0;r<e.pathSegList.numberOfItems;r+=1)l.push(e.pathSegList.getItem(r));for(h=l.concat();g<o;){if(p=e.getPathSegAtLength(g),a=l[p],a!=c){for(;h.length&&h[0]!=a;)S(h.shift());c=a}switch(a.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":s=e.getPointAtLength(g),v(s.x,s.y,0)}g+=i}for(r=0,n=h.length;r<n;++r)S(h[r]);return _};var t=function(t){for(var e,i,r,n,o,s,a=t.pathSegList,l=0,h=0,c=a.numberOfItems,u=0;u<c;++u){var p=a.getItem(u),f=p.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(f))"x"in p&&(l=p.x),"y"in p&&(h=p.y);else switch("x1"in p&&(r=l+p.x1),"x2"in p&&(o=l+p.x2),"y1"in p&&(n=h+p.y1),"y2"in p&&(s=h+p.y2),"x"in p&&(l+=p.x),"y"in p&&(h+=p.y),f){case"m":a.replaceItem(t.createSVGPathSegMovetoAbs(l,h),u);break;case"l":a.replaceItem(t.createSVGPathSegLinetoAbs(l,h),u);break;case"h":a.replaceItem(t.createSVGPathSegLinetoHorizontalAbs(l),u);break;case"v":a.replaceItem(t.createSVGPathSegLinetoVerticalAbs(h),u);break;case"c":a.replaceItem(t.createSVGPathSegCurvetoCubicAbs(l,h,r,n,o,s),u);break;case"s":a.replaceItem(t.createSVGPathSegCurvetoCubicSmoothAbs(l,h,o,s),u);break;case"q":a.replaceItem(t.createSVGPathSegCurvetoQuadraticAbs(l,h,r,n),u);break;case"t":a.replaceItem(t.createSVGPathSegCurvetoQuadraticSmoothAbs(l,h),u);break;case"a":a.replaceItem(t.createSVGPathSegArcAbs(l,h,p.r1,p.r2,p.angle,p.largeArcFlag,p.sweepFlag),u);break;case"z":case"Z":l=e,h=i}"M"!=f&&"m"!=f||(e=l,i=h)}}}()},{"../geometry/Bounds":24}],26:[function(t,e,i){var r={};e.exports=r,function(){r.create=function(t,e){return{x:t||0,y:e||0}},r.clone=function(t){return{x:t.x,y:t.y}},r.magnitude=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},r.magnitudeSquared=function(t){return t.x*t.x+t.y*t.y},r.rotate=function(t,e){var i=Math.cos(e),r=Math.sin(e);return{x:t.x*i-t.y*r,y:t.x*r+t.y*i}},r.rotateAbout=function(t,e,i,r){var n=Math.cos(e),o=Math.sin(e);r||(r={});var s=i.x+((t.x-i.x)*n-(t.y-i.y)*o);return r.y=i.y+((t.x-i.x)*o+(t.y-i.y)*n),r.x=s,r},r.normalise=function(t){var e=r.magnitude(t);return 0===e?{x:0,y:0}:{x:t.x/e,y:t.y/e}},r.dot=function(t,e){return t.x*e.x+t.y*e.y},r.cross=function(t,e){return t.x*e.y-t.y*e.x},r.cross3=function(t,e,i){return(e.x-t.x)*(i.y-t.y)-(e.y-t.y)*(i.x-t.x)},r.add=function(t,e,i){return i||(i={}),i.x=t.x+e.x,i.y=t.y+e.y,i},r.sub=function(t,e,i){return i||(i={}),i.x=t.x-e.x,i.y=t.y-e.y,i},r.mult=function(t,e){return{x:t.x*e,y:t.y*e}},r.div=function(t,e){return{x:t.x/e,y:t.y/e}},r.perp=function(t,e){return e=e===!0?-1:1,{x:e*-t.y,y:e*t.x}},r.neg=function(t){return{x:-t.x,y:-t.y}},r.angle=function(t,e){return Math.atan2(e.y-t.y,e.x-t.x)},r._temp=[r.create(),r.create(),r.create(),r.create(),r.create(),r.create()]}()},{}],27:[function(t,e,i){var r={};e.exports=r;var n=t("../geometry/Vector"),o=t("../core/Common");!function(){r.create=function(t,e){for(var i=[],r=0;r<t.length;r++){var n=t[r],o={x:n.x,y:n.y,index:r,body:e,isInternal:!1};i.push(o)}return i},r.fromPath=function(t,e){var i=/L?\s*([\-\d\.e]+)[\s,]*([\-\d\.e]+)*/gi,n=[];return t.replace(i,function(t,e,i){n.push({x:parseFloat(e),y:parseFloat(i)})}),r.create(n,e)},r.centre=function(t){for(var e,i,o,s=r.area(t,!0),a={x:0,y:0},l=0;l<t.length;l++)o=(l+1)%t.length,e=n.cross(t[l],t[o]),i=n.mult(n.add(t[l],t[o]),e),a=n.add(a,i);return n.div(a,6*s)},r.mean=function(t){for(var e={x:0,y:0},i=0;i<t.length;i++)e.x+=t[i].x,e.y+=t[i].y;return n.div(e,t.length)},r.area=function(t,e){for(var i=0,r=t.length-1,n=0;n<t.length;n++)i+=(t[r].x-t[n].x)*(t[r].y+t[n].y),r=n;return e?i/2:Math.abs(i)/2},r.inertia=function(t,e){for(var i,r,o=0,s=0,a=t,l=0;l<a.length;l++)r=(l+1)%a.length,i=Math.abs(n.cross(a[r],a[l])),o+=i*(n.dot(a[r],a[r])+n.dot(a[r],a[l])+n.dot(a[l],a[l])),s+=i;return e/6*(o/s)},r.translate=function(t,e,i){var r;if(i)for(r=0;r<t.length;r++)t[r].x+=e.x*i,t[r].y+=e.y*i;else for(r=0;r<t.length;r++)t[r].x+=e.x,t[r].y+=e.y;return t},r.rotate=function(t,e,i){if(0!==e){for(var r=Math.cos(e),n=Math.sin(e),o=0;o<t.length;o++){var s=t[o],a=s.x-i.x,l=s.y-i.y;s.x=i.x+(a*r-l*n),s.y=i.y+(a*n+l*r)}return t}},r.contains=function(t,e){for(var i=0;i<t.length;i++){var r=t[i],n=t[(i+1)%t.length];if((e.x-r.x)*(n.y-r.y)+(e.y-r.y)*(r.x-n.x)>0)return!1}return!0},r.scale=function(t,e,i,o){if(1===e&&1===i)return t;o=o||r.centre(t);for(var s,a,l=0;l<t.length;l++)s=t[l],a=n.sub(s,o),t[l].x=o.x+a.x*e,t[l].y=o.y+a.y*i;return t},r.chamfer=function(t,e,i,r,s){e=e||[8],e.length||(e=[e]),i="undefined"!=typeof i?i:-1,r=r||2,s=s||14;for(var a=[],l=0;l<t.length;l++){var h=t[l-1>=0?l-1:t.length-1],c=t[l],u=t[(l+1)%t.length],p=e[l<e.length?l:e.length-1];if(0!==p){var f=n.normalise({x:c.y-h.y,y:h.x-c.x}),d=n.normalise({x:u.y-c.y,y:c.x-u.x}),_=Math.sqrt(2*Math.pow(p,2)),g=n.mult(o.clone(f),p),m=n.normalise(n.mult(n.add(f,d),.5)),y=n.sub(c,n.mult(m,_)),v=i;i===-1&&(v=1.75*Math.pow(p,.32)),v=o.clamp(v,r,s),v%2===1&&(v+=1);for(var S=Math.acos(n.dot(f,d)),x=S/v,b=0;b<v;b++)a.push(n.add(n.rotate(g,x*b),y))}else a.push(c)}return a},r.clockwiseSort=function(t){var e=r.mean(t);return t.sort(function(t,i){return n.angle(e,t)-n.angle(e,i)}),t},r.isConvex=function(t){var e,i,r,n,o=0,s=t.length;if(s<3)return null;for(e=0;e<s;e++)if(i=(e+1)%s,r=(e+2)%s,n=(t[i].x-t[e].x)*(t[r].y-t[i].y),n-=(t[i].y-t[e].y)*(t[r].x-t[i].x),n<0?o|=1:n>0&&(o|=2),3===o)return!1;return 0!==o||null},r.hull=function(t){var e,i,r=[],o=[];for(t=t.slice(0),t.sort(function(t,e){var i=t.x-e.x;return 0!==i?i:t.y-e.y}),i=0;i<t.length;i++){for(e=t[i];o.length>=2&&n.cross3(o[o.length-2],o[o.length-1],e)<=0;)o.pop();o.push(e)}for(i=t.length-1;i>=0;i--){for(e=t[i];r.length>=2&&n.cross3(r[r.length-2],r[r.length-1],e)<=0;)r.pop();r.push(e)}return r.pop(),o.pop(),r.concat(o)}}()},{"../core/Common":14,"../geometry/Vector":26}],28:[function(t,e,i){var r=e.exports={};r.version="master",r.Body=t("../body/Body"),r.Composite=t("../body/Composite"),r.World=t("../body/World"),r.Contact=t("../collision/Contact"),r.Detector=t("../collision/Detector"),r.Grid=t("../collision/Grid"),r.Pairs=t("../collision/Pairs"),r.Pair=t("../collision/Pair"),r.Query=t("../collision/Query"),r.Resolver=t("../collision/Resolver"),r.SAT=t("../collision/SAT"),r.Constraint=t("../constraint/Constraint"),r.MouseConstraint=t("../constraint/MouseConstraint"),r.Common=t("../core/Common"),r.Engine=t("../core/Engine"),r.Events=t("../core/Events"),r.Mouse=t("../core/Mouse"),r.Runner=t("../core/Runner"),r.Sleeping=t("../core/Sleeping"),r.Bodies=t("../factory/Bodies"),r.Composites=t("../factory/Composites"),r.Axes=t("../geometry/Axes"),r.Bounds=t("../geometry/Bounds"),r.Svg=t("../geometry/Svg"),r.Vector=t("../geometry/Vector"),r.Vertices=t("../geometry/Vertices"),r.Render=t("../render/Render"),r.RenderPixi=t("../render/RenderPixi"),r.World.add=r.Composite.add,r.World.remove=r.Composite.remove,r.World.addComposite=r.Composite.addComposite,r.World.addBody=r.Composite.addBody,r.World.addConstraint=r.Composite.addConstraint,r.World.clear=r.Composite.clear,r.Engine.run=r.Runner.run},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Contact":4,"../collision/Detector":5,"../collision/Grid":6,"../collision/Pair":7,"../collision/Pairs":8,"../collision/Query":9,"../collision/Resolver":10,"../collision/SAT":11,"../constraint/Constraint":12,"../constraint/MouseConstraint":13,"../core/Common":14,"../core/Engine":15,"../core/Events":16,"../core/Metrics":17,"../core/Mouse":18,"../core/Runner":19,"../core/Sleeping":20,"../factory/Bodies":21,"../factory/Composites":22,"../geometry/Axes":23,"../geometry/Bounds":24,"../geometry/Svg":25,"../geometry/Vector":26,"../geometry/Vertices":27,"../render/Render":29,"../render/RenderPixi":30}],29:[function(t,e,i){var r={};e.exports=r;var n=t("../core/Common"),o=t("../body/Composite"),s=t("../geometry/Bounds"),a=t("../core/Events"),l=t("../collision/Grid"),h=t("../geometry/Vector");!function(){var t,e;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout(function(){t(n.now())},1e3/60)},e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(t){var e={controller:r,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,options:{width:800,height:600,pixelRatio:1,background:"#fafafa",wireframeBackground:"#222",hasBounds:!!t.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},o=n.extend(e,t);return o.canvas&&(o.canvas.width=o.options.width||o.canvas.width,o.canvas.height=o.options.height||o.canvas.height),o.mouse=t.mouse,o.engine=t.engine,o.canvas=o.canvas||i(o.options.width,o.options.height),o.context=o.canvas.getContext("2d"),o.textures={},o.bounds=o.bounds||{min:{x:0,y:0},max:{x:o.canvas.width,y:o.canvas.height}},1!==o.options.pixelRatio&&r.setPixelRatio(o,o.options.pixelRatio),n.isElement(o.element)?o.element.appendChild(o.canvas):n.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),o},r.run=function(e){!function i(n){e.frameRequestId=t(i),r.world(e)}()},r.stop=function(t){e(t.frameRequestId)},r.setPixelRatio=function(t,e){var i=t.options,r=t.canvas;"auto"===e&&(e=c(r)),i.pixelRatio=e,r.setAttribute("data-pixel-ratio",e),r.width=i.width*e,r.height=i.height*e,r.style.width=i.width+"px",r.style.height=i.height+"px",t.context.scale(e,e)},r.world=function(t){var e,i=t.engine,n=i.world,c=t.canvas,u=t.context,f=t.options,d=o.allBodies(n),_=o.allConstraints(n),g=f.wireframes?f.wireframeBackground:f.background,m=[],y=[],v={timestamp:i.timing.timestamp};if(a.trigger(t,"beforeRender",v),t.currentBackground!==g&&p(t,g),u.globalCompositeOperation="source-in",u.fillStyle="transparent",u.fillRect(0,0,c.width,c.height),u.globalCompositeOperation="source-over",f.hasBounds){var S=t.bounds.max.x-t.bounds.min.x,x=t.bounds.max.y-t.bounds.min.y,b=S/f.width,P=x/f.height;for(e=0;e<d.length;e++){var w=d[e];s.overlaps(w.bounds,t.bounds)&&m.push(w)}for(e=0;e<_.length;e++){var T=_[e],A=T.bodyA,C=T.bodyB,V=T.pointA,O=T.pointB;A&&(V=h.add(A.position,T.pointA)),C&&(O=h.add(C.position,T.pointB)),V&&O&&(s.contains(t.bounds,V)||s.contains(t.bounds,O))&&y.push(T)}u.scale(1/b,1/P),u.translate(-t.bounds.min.x,-t.bounds.min.y)}else y=_,m=d;!f.wireframes||i.enableSleeping&&f.showSleeping?r.bodies(t,m,u):(f.showConvexHulls&&r.bodyConvexHulls(t,m,u),r.bodyWireframes(t,m,u)),f.showBounds&&r.bodyBounds(t,m,u),(f.showAxes||f.showAngleIndicator)&&r.bodyAxes(t,m,u),f.showPositions&&r.bodyPositions(t,m,u),f.showVelocity&&r.bodyVelocity(t,m,u),f.showIds&&r.bodyIds(t,m,u),f.showSeparations&&r.separations(t,i.pairs.list,u),f.showCollisions&&r.collisions(t,i.pairs.list,u),f.showVertexNumbers&&r.vertexNumbers(t,m,u),f.showMousePosition&&r.mousePosition(t,t.mouse,u),r.constraints(y,u),f.showBroadphase&&i.broadphase.controller===l&&r.grid(t,i.broadphase,u),f.showDebug&&r.debug(t,u),f.hasBounds&&u.setTransform(f.pixelRatio,0,0,f.pixelRatio,0,0),a.trigger(t,"afterRender",v)},r.debug=function(t,e){var i=e,r=t.engine,n=r.world,s=r.metrics,a=t.options,l=(o.allBodies(n),"    ");if(r.timing.timestamp-(t.debugTimestamp||0)>=500){var h="";s.timing&&(h+="fps: "+Math.round(s.timing.fps)+l),t.debugString=h,t.debugTimestamp=r.timing.timestamp}if(t.debugString){i.font="12px Arial",a.wireframes?i.fillStyle="rgba(255,255,255,0.5)":i.fillStyle="rgba(0,0,0,0.5)";for(var c=t.debugString.split("\n"),u=0;u<c.length;u++)i.fillText(c[u],50,50+18*u)}},r.constraints=function(t,e){for(var i=e,r=0;r<t.length;r++){var n=t[r];if(n.render.visible&&n.pointA&&n.pointB){var o=n.bodyA,s=n.bodyB;o?(i.beginPath(),i.moveTo(o.position.x+n.pointA.x,o.position.y+n.pointA.y)):(i.beginPath(),i.moveTo(n.pointA.x,n.pointA.y)),s?i.lineTo(s.position.x+n.pointB.x,s.position.y+n.pointB.y):i.lineTo(n.pointB.x,n.pointB.y),i.lineWidth=n.render.lineWidth,i.strokeStyle=n.render.strokeStyle,i.stroke()}}},r.bodyShadows=function(t,e,i){for(var r=i,n=(t.engine,0);n<e.length;n++){var o=e[n];if(o.render.visible){if(o.circleRadius)r.beginPath(),r.arc(o.position.x,o.position.y,o.circleRadius,0,2*Math.PI),r.closePath();else{r.beginPath(),r.moveTo(o.vertices[0].x,o.vertices[0].y);for(var s=1;s<o.vertices.length;s++)r.lineTo(o.vertices[s].x,o.vertices[s].y);r.closePath()}var a=o.position.x-.5*t.options.width,l=o.position.y-.2*t.options.height,h=Math.abs(a)+Math.abs(l);r.shadowColor="rgba(0,0,0,0.15)",r.shadowOffsetX=.05*a,r.shadowOffsetY=.05*l,r.shadowBlur=1+12*Math.min(1,h/1e3),r.fill(),r.shadowColor=null,r.shadowOffsetX=null,r.shadowOffsetY=null,r.shadowBlur=null}}},r.bodies=function(t,e,i){var r,n,o,s,a=i,l=(t.engine,t.options),h=l.showInternalEdges||!l.wireframes;for(o=0;o<e.length;o++)if(r=e[o],r.render.visible)for(s=r.parts.length>1?1:0;s<r.parts.length;s++)if(n=r.parts[s],n.render.visible){if(l.showSleeping&&r.isSleeping?a.globalAlpha=.5*n.render.opacity:1!==n.render.opacity&&(a.globalAlpha=n.render.opacity),n.render.sprite&&n.render.sprite.texture&&!l.wireframes){var c=n.render.sprite,p=u(t,c.texture);a.translate(n.position.x,n.position.y),a.rotate(n.angle),a.drawImage(p,p.width*-c.xOffset*c.xScale,p.height*-c.yOffset*c.yScale,p.width*c.xScale,p.height*c.yScale),a.rotate(-n.angle),a.translate(-n.position.x,-n.position.y)}else{if(n.circleRadius)a.beginPath(),a.arc(n.position.x,n.position.y,n.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(n.vertices[0].x,n.vertices[0].y);for(var f=1;f<n.vertices.length;f++)!n.vertices[f-1].isInternal||h?a.lineTo(n.vertices[f].x,n.vertices[f].y):a.moveTo(n.vertices[f].x,n.vertices[f].y),n.vertices[f].isInternal&&!h&&a.moveTo(n.vertices[(f+1)%n.vertices.length].x,n.vertices[(f+1)%n.vertices.length].y);a.lineTo(n.vertices[0].x,n.vertices[0].y),a.closePath()}l.wireframes?(a.lineWidth=1,a.strokeStyle="#bbb"):(a.fillStyle=n.render.fillStyle,a.lineWidth=n.render.lineWidth,a.strokeStyle=n.render.strokeStyle,a.fill()),a.stroke()}a.globalAlpha=1}},r.bodyWireframes=function(t,e,i){var r,n,o,s,a,l=i,h=t.options.showInternalEdges;for(l.beginPath(),o=0;o<e.length;o++)if(r=e[o],r.render.visible)for(a=r.parts.length>1?1:0;a<r.parts.length;a++){for(n=r.parts[a],l.moveTo(n.vertices[0].x,n.vertices[0].y),s=1;s<n.vertices.length;s++)!n.vertices[s-1].isInternal||h?l.lineTo(n.vertices[s].x,n.vertices[s].y):l.moveTo(n.vertices[s].x,n.vertices[s].y),n.vertices[s].isInternal&&!h&&l.moveTo(n.vertices[(s+1)%n.vertices.length].x,n.vertices[(s+1)%n.vertices.length].y);l.lineTo(n.vertices[0].x,n.vertices[0].y)}l.lineWidth=1,l.strokeStyle="#bbb",l.stroke()},r.bodyConvexHulls=function(t,e,i){var r,n,o,s=i;for(s.beginPath(),n=0;n<e.length;n++)if(r=e[n],r.render.visible&&1!==r.parts.length){for(s.moveTo(r.vertices[0].x,r.vertices[0].y),o=1;o<r.vertices.length;o++)s.lineTo(r.vertices[o].x,r.vertices[o].y);s.lineTo(r.vertices[0].x,r.vertices[0].y)}s.lineWidth=1,s.strokeStyle="rgba(255,255,255,0.2)",s.stroke()},r.vertexNumbers=function(t,e,i){var r,n,o,s=i;for(r=0;r<e.length;r++){var a=e[r].parts;for(o=a.length>1?1:0;o<a.length;o++){var l=a[o];for(n=0;n<l.vertices.length;n++)s.fillStyle="rgba(255,255,255,0.2)",s.fillText(r+"_"+n,l.position.x+.8*(l.vertices[n].x-l.position.x),l.position.y+.8*(l.vertices[n].y-l.position.y))}}},r.mousePosition=function(t,e,i){var r=i;r.fillStyle="rgba(255,255,255,0.8)",r.fillText(e.position.x+"  "+e.position.y,e.position.x+5,e.position.y-5)},r.bodyBounds=function(t,e,i){var r=i,n=(t.engine,t.options);r.beginPath();for(var o=0;o<e.length;o++){var s=e[o];if(s.render.visible)for(var a=e[o].parts,l=a.length>1?1:0;l<a.length;l++){var h=a[l];r.rect(h.bounds.min.x,h.bounds.min.y,h.bounds.max.x-h.bounds.min.x,h.bounds.max.y-h.bounds.min.y)}}n.wireframes?r.strokeStyle="rgba(255,255,255,0.08)":r.strokeStyle="rgba(0,0,0,0.1)",r.lineWidth=1,r.stroke()},r.bodyAxes=function(t,e,i){var r,n,o,s,a=i,l=(t.engine,t.options);for(a.beginPath(),n=0;n<e.length;n++){var h=e[n],c=h.parts;if(h.render.visible)if(l.showAxes)for(o=c.length>1?1:0;o<c.length;o++)for(r=c[o],s=0;s<r.axes.length;s++){var u=r.axes[s];a.moveTo(r.position.x,r.position.y),a.lineTo(r.position.x+20*u.x,r.position.y+20*u.y)}else for(o=c.length>1?1:0;o<c.length;o++)for(r=c[o],s=0;s<r.axes.length;s++)a.moveTo(r.position.x,r.position.y),a.lineTo((r.vertices[0].x+r.vertices[r.vertices.length-1].x)/2,(r.vertices[0].y+r.vertices[r.vertices.length-1].y)/2)}l.wireframes?a.strokeStyle="indianred":(a.strokeStyle="rgba(0,0,0,0.8)",a.globalCompositeOperation="overlay"),a.lineWidth=1,a.stroke(),a.globalCompositeOperation="source-over"},r.bodyPositions=function(t,e,i){var r,n,o,s,a=i,l=(t.engine,t.options);for(a.beginPath(),o=0;o<e.length;o++)if(r=e[o],r.render.visible)for(s=0;s<r.parts.length;s++)n=r.parts[s],a.arc(n.position.x,n.position.y,3,0,2*Math.PI,!1),a.closePath();for(l.wireframes?a.fillStyle="indianred":a.fillStyle="rgba(0,0,0,0.5)",a.fill(),a.beginPath(),o=0;o<e.length;o++)r=e[o],r.render.visible&&(a.arc(r.positionPrev.x,r.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle="rgba(255,165,0,0.8)",a.fill()},r.bodyVelocity=function(t,e,i){var r=i;r.beginPath();for(var n=0;n<e.length;n++){var o=e[n];o.render.visible&&(r.moveTo(o.position.x,o.position.y),r.lineTo(o.position.x+2*(o.position.x-o.positionPrev.x),o.position.y+2*(o.position.y-o.positionPrev.y)))}r.lineWidth=3,r.strokeStyle="cornflowerblue",r.stroke()},r.bodyIds=function(t,e,i){var r,n,o=i;for(r=0;r<e.length;r++)if(e[r].render.visible){var s=e[r].parts;for(n=s.length>1?1:0;n<s.length;n++){var a=s[n];o.font="12px Arial",o.fillStyle="rgba(255,255,255,0.5)",o.fillText(a.id,a.position.x+10,a.position.y-10)}}},r.collisions=function(t,e,i){var r,n,o,s,a=i,l=t.options;for(a.beginPath(),o=0;o<e.length;o++)if(r=e[o],r.isActive)for(n=r.collision,s=0;s<r.activeContacts.length;s++){var h=r.activeContacts[s],c=h.vertex;a.rect(c.x-1.5,c.y-1.5,3.5,3.5)}for(l.wireframes?a.fillStyle="rgba(255,255,255,0.7)":a.fillStyle="orange",a.fill(),a.beginPath(),o=0;o<e.length;o++)if(r=e[o],r.isActive&&(n=r.collision,r.activeContacts.length>0)){var u=r.activeContacts[0].vertex.x,p=r.activeContacts[0].vertex.y;2===r.activeContacts.length&&(u=(r.activeContacts[0].vertex.x+r.activeContacts[1].vertex.x)/2,p=(r.activeContacts[0].vertex.y+r.activeContacts[1].vertex.y)/2),n.bodyB===n.supports[0].body||n.bodyA.isStatic===!0?a.moveTo(u-8*n.normal.x,p-8*n.normal.y):a.moveTo(u+8*n.normal.x,p+8*n.normal.y),a.lineTo(u,p)}l.wireframes?a.strokeStyle="rgba(255,165,0,0.7)":a.strokeStyle="orange",a.lineWidth=1,a.stroke()},r.separations=function(t,e,i){var r,n,o,s,a,l=i,h=t.options;for(l.beginPath(),a=0;a<e.length;a++)if(r=e[a],r.isActive){n=r.collision,o=n.bodyA,s=n.bodyB;var c=1;s.isStatic||o.isStatic||(c=.5),s.isStatic&&(c=0),l.moveTo(s.position.x,s.position.y),l.lineTo(s.position.x-n.penetration.x*c,s.position.y-n.penetration.y*c),c=1,s.isStatic||o.isStatic||(c=.5),o.isStatic&&(c=0),l.moveTo(o.position.x,o.position.y),l.lineTo(o.position.x+n.penetration.x*c,o.position.y+n.penetration.y*c)}h.wireframes?l.strokeStyle="rgba(255,165,0,0.5)":l.strokeStyle="orange",l.stroke()},r.grid=function(t,e,i){var r=i,o=t.options;o.wireframes?r.strokeStyle="rgba(255,180,0,0.1)":r.strokeStyle="rgba(255,180,0,0.5)",r.beginPath();for(var s=n.keys(e.buckets),a=0;a<s.length;a++){var l=s[a];if(!(e.buckets[l].length<2)){var h=l.split(",");r.rect(.5+parseInt(h[0],10)*e.bucketWidth,.5+parseInt(h[1],10)*e.bucketHeight,e.bucketWidth,e.bucketHeight)}}r.lineWidth=1,r.stroke()},r.inspector=function(t,e){var i,r=(t.engine,t.selected),n=t.render,o=n.options;if(o.hasBounds){var s=n.bounds.max.x-n.bounds.min.x,a=n.bounds.max.y-n.bounds.min.y,l=s/n.options.width,h=a/n.options.height;e.scale(1/l,1/h),e.translate(-n.bounds.min.x,-n.bounds.min.y)}for(var c=0;c<r.length;c++){var u=r[c].data;switch(e.translate(.5,.5),e.lineWidth=1,e.strokeStyle="rgba(255,165,0,0.9)",e.setLineDash([1,2]),u.type){case"body":i=u.bounds,e.beginPath(),e.rect(Math.floor(i.min.x-3),Math.floor(i.min.y-3),Math.floor(i.max.x-i.min.x+6),Math.floor(i.max.y-i.min.y+6)),e.closePath(),e.stroke();break;case"constraint":var p=u.pointA;u.bodyA&&(p=u.pointB),e.beginPath(),e.arc(p.x,p.y,10,0,2*Math.PI),e.closePath(),e.stroke()}e.setLineDash([]),e.translate(-.5,-.5)}null!==t.selectStart&&(e.translate(.5,.5),e.lineWidth=1,e.strokeStyle="rgba(255,165,0,0.6)",e.fillStyle="rgba(255,165,0,0.1)",i=t.selectBounds,e.beginPath(),e.rect(Math.floor(i.min.x),Math.floor(i.min.y),Math.floor(i.max.x-i.min.x),Math.floor(i.max.y-i.min.y)),e.closePath(),e.stroke(),e.fill(),e.translate(-.5,-.5)),o.hasBounds&&e.setTransform(1,0,0,1,0,0);
};var i=function(t,e){var i=document.createElement("canvas");return i.width=t,i.height=e,i.oncontextmenu=function(){return!1},i.onselectstart=function(){return!1},i},c=function(t){var e=t.getContext("2d"),i=window.devicePixelRatio||1,r=e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1;return i/r},u=function(t,e){var i=t.textures[e];return i?i:(i=t.textures[e]=new Image,i.src=e,i)},p=function(t,e){var i=e;/(jpg|gif|png)$/.test(e)&&(i="url("+e+")"),t.canvas.style.background=i,t.canvas.style.backgroundSize="contain",t.currentBackground=e}}()},{"../body/Composite":2,"../collision/Grid":6,"../core/Common":14,"../core/Events":16,"../geometry/Bounds":24,"../geometry/Vector":26}],30:[function(t,e,i){var r={};e.exports=r;var n=t("../body/Composite"),o=t("../core/Common");!function(){var t,e;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout(function(){t(o.now())},1e3/60)},e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r.create=function(t){o.log("RenderPixi.create: Matter.RenderPixi is deprecated (see docs)","warn");var e={controller:r,engine:null,element:null,frameRequestId:null,canvas:null,renderer:null,container:null,spriteContainer:null,pixiOptions:null,options:{width:800,height:600,background:"#fafafa",wireframeBackground:"#222",hasBounds:!1,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1}},i=o.extend(e,t),n=!i.options.wireframes&&"transparent"===i.options.background;return i.pixiOptions=i.pixiOptions||{view:i.canvas,transparent:n,antialias:!0,backgroundColor:t.background},i.mouse=t.mouse,i.engine=t.engine,i.renderer=i.renderer||new PIXI.WebGLRenderer(i.options.width,i.options.height,i.pixiOptions),i.container=i.container||new PIXI.Container,i.spriteContainer=i.spriteContainer||new PIXI.Container,i.canvas=i.canvas||i.renderer.view,i.bounds=i.bounds||{min:{x:0,y:0},max:{x:i.options.width,y:i.options.height}},i.textures={},i.sprites={},i.primitives={},i.container.addChild(i.spriteContainer),o.isElement(i.element)?i.element.appendChild(i.canvas):o.log('No "render.element" passed, "render.canvas" was not inserted into document.',"warn"),i.canvas.oncontextmenu=function(){return!1},i.canvas.onselectstart=function(){return!1},i},r.run=function(e){!function i(n){e.frameRequestId=t(i),r.world(e)}()},r.stop=function(t){e(t.frameRequestId)},r.clear=function(t){for(var e=t.container,i=t.spriteContainer;e.children[0];)e.removeChild(e.children[0]);for(;i.children[0];)i.removeChild(i.children[0]);var r=t.sprites["bg-0"];t.textures={},t.sprites={},t.primitives={},t.sprites["bg-0"]=r,r&&e.addChildAt(r,0),t.container.addChild(t.spriteContainer),t.currentBackground=null,e.scale.set(1,1),e.position.set(0,0)},r.setBackground=function(t,e){if(t.currentBackground!==e){var i=e.indexOf&&e.indexOf("#")!==-1,r=t.sprites["bg-0"];if(i){var n=o.colorToNumber(e);t.renderer.backgroundColor=n,r&&t.container.removeChild(r)}else if(!r){var s=a(t,e);r=t.sprites["bg-0"]=new PIXI.Sprite(s),r.position.x=0,r.position.y=0,t.container.addChildAt(r,0)}t.currentBackground=e}},r.world=function(t){var e,i=t.engine,o=i.world,s=t.renderer,a=t.container,l=t.options,h=n.allBodies(o),c=n.allConstraints(o),u=[];l.wireframes?r.setBackground(t,l.wireframeBackground):r.setBackground(t,l.background);var p=t.bounds.max.x-t.bounds.min.x,f=t.bounds.max.y-t.bounds.min.y,d=p/t.options.width,_=f/t.options.height;if(l.hasBounds){for(e=0;e<h.length;e++){var g=h[e];g.render.sprite.visible=Bounds.overlaps(g.bounds,t.bounds)}for(e=0;e<c.length;e++){var m=c[e],y=m.bodyA,v=m.bodyB,S=m.pointA,x=m.pointB;y&&(S=Vector.add(y.position,m.pointA)),v&&(x=Vector.add(v.position,m.pointB)),S&&x&&(Bounds.contains(t.bounds,S)||Bounds.contains(t.bounds,x))&&u.push(m)}a.scale.set(1/d,1/_),a.position.set(-t.bounds.min.x*(1/d),-t.bounds.min.y*(1/_))}else u=c;for(e=0;e<h.length;e++)r.body(t,h[e]);for(e=0;e<u.length;e++)r.constraint(t,u[e]);s.render(a)},r.constraint=function(t,e){var i=(t.engine,e.bodyA),r=e.bodyB,n=e.pointA,s=e.pointB,a=t.container,l=e.render,h="c-"+e.id,c=t.primitives[h];return c||(c=t.primitives[h]=new PIXI.Graphics),l.visible&&e.pointA&&e.pointB?(o.indexOf(a.children,c)===-1&&a.addChild(c),c.clear(),c.beginFill(0,0),c.lineStyle(l.lineWidth,o.colorToNumber(l.strokeStyle),1),i?c.moveTo(i.position.x+n.x,i.position.y+n.y):c.moveTo(n.x,n.y),r?c.lineTo(r.position.x+s.x,r.position.y+s.y):c.lineTo(s.x,s.y),void c.endFill()):void c.clear()},r.body=function(t,e){var r=(t.engine,e.render);if(r.visible)if(r.sprite&&r.sprite.texture){var n="b-"+e.id,a=t.sprites[n],l=t.spriteContainer;a||(a=t.sprites[n]=i(t,e)),o.indexOf(l.children,a)===-1&&l.addChild(a),a.position.x=e.position.x,a.position.y=e.position.y,a.rotation=e.angle,a.scale.x=r.sprite.xScale||1,a.scale.y=r.sprite.yScale||1}else{var h="b-"+e.id,c=t.primitives[h],u=t.container;c||(c=t.primitives[h]=s(t,e),c.initialAngle=e.angle),o.indexOf(u.children,c)===-1&&u.addChild(c),c.position.x=e.position.x,c.position.y=e.position.y,c.rotation=e.angle-c.initialAngle}};var i=function(t,e){var i=e.render,r=i.sprite.texture,n=a(t,r),o=new PIXI.Sprite(n);return o.anchor.x=e.render.sprite.xOffset,o.anchor.y=e.render.sprite.yOffset,o},s=function(t,e){var i,r=e.render,n=t.options,s=new PIXI.Graphics,a=o.colorToNumber(r.fillStyle),l=o.colorToNumber(r.strokeStyle),h=o.colorToNumber(r.strokeStyle),c=o.colorToNumber("#bbb"),u=o.colorToNumber("#CD5C5C");s.clear();for(var p=e.parts.length>1?1:0;p<e.parts.length;p++){i=e.parts[p],n.wireframes?(s.beginFill(0,0),s.lineStyle(1,c,1)):(s.beginFill(a,1),s.lineStyle(r.lineWidth,l,1)),s.moveTo(i.vertices[0].x-e.position.x,i.vertices[0].y-e.position.y);for(var f=1;f<i.vertices.length;f++)s.lineTo(i.vertices[f].x-e.position.x,i.vertices[f].y-e.position.y);s.lineTo(i.vertices[0].x-e.position.x,i.vertices[0].y-e.position.y),s.endFill(),(n.showAngleIndicator||n.showAxes)&&(s.beginFill(0,0),n.wireframes?s.lineStyle(1,u,1):s.lineStyle(1,h),s.moveTo(i.position.x-e.position.x,i.position.y-e.position.y),s.lineTo((i.vertices[0].x+i.vertices[i.vertices.length-1].x)/2-e.position.x,(i.vertices[0].y+i.vertices[i.vertices.length-1].y)/2-e.position.y),s.endFill())}return s},a=function(t,e){var i=t.textures[e];return i||(i=t.textures[e]=PIXI.Texture.fromImage(e)),i}}()},{"../body/Composite":2,"../core/Common":14}]},{},[28])(28)}),function(){"SVGPathSeg"in window||(window.SVGPathSeg=function(t,e,i){this.pathSegType=t,this.pathSegTypeAsLetter=e,this._owningPathSegList=i},SVGPathSeg.prototype.classname="SVGPathSeg",SVGPathSeg.PATHSEG_UNKNOWN=0,SVGPathSeg.PATHSEG_CLOSEPATH=1,SVGPathSeg.PATHSEG_MOVETO_ABS=2,SVGPathSeg.PATHSEG_MOVETO_REL=3,SVGPathSeg.PATHSEG_LINETO_ABS=4,SVGPathSeg.PATHSEG_LINETO_REL=5,SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS=6,SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL=7,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS=8,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL=9,SVGPathSeg.PATHSEG_ARC_ABS=10,SVGPathSeg.PATHSEG_ARC_REL=11,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS=12,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL=13,SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS=14,SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL=15,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS=16,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL=17,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS=18,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL=19,SVGPathSeg.prototype._segmentChanged=function(){this._owningPathSegList&&this._owningPathSegList.segmentChanged(this)},window.SVGPathSegClosePath=function(t){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CLOSEPATH,"z",t)},SVGPathSegClosePath.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegClosePath.prototype.toString=function(){return"[object SVGPathSegClosePath]"},SVGPathSegClosePath.prototype._asPathString=function(){return this.pathSegTypeAsLetter},SVGPathSegClosePath.prototype.clone=function(){return new SVGPathSegClosePath((void 0))},window.SVGPathSegMovetoAbs=function(t,e,i){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_MOVETO_ABS,"M",t),this._x=e,this._y=i},SVGPathSegMovetoAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegMovetoAbs.prototype.toString=function(){return"[object SVGPathSegMovetoAbs]"},SVGPathSegMovetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegMovetoAbs.prototype.clone=function(){return new SVGPathSegMovetoAbs((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegMovetoAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegMovetoAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegMovetoRel=function(t,e,i){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_MOVETO_REL,"m",t),this._x=e,this._y=i},SVGPathSegMovetoRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegMovetoRel.prototype.toString=function(){return"[object SVGPathSegMovetoRel]"},SVGPathSegMovetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegMovetoRel.prototype.clone=function(){return new SVGPathSegMovetoRel((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegMovetoRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegMovetoRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoAbs=function(t,e,i){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_ABS,"L",t),this._x=e,this._y=i},SVGPathSegLinetoAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoAbs.prototype.toString=function(){return"[object SVGPathSegLinetoAbs]"},SVGPathSegLinetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegLinetoAbs.prototype.clone=function(){return new SVGPathSegLinetoAbs((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegLinetoAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegLinetoAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoRel=function(t,e,i){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_REL,"l",t),this._x=e,this._y=i},SVGPathSegLinetoRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoRel.prototype.toString=function(){return"[object SVGPathSegLinetoRel]"},SVGPathSegLinetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegLinetoRel.prototype.clone=function(){return new SVGPathSegLinetoRel((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegLinetoRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegLinetoRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicAbs=function(t,e,i,r,n,o,s){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS,"C",t),this._x=e,this._y=i,this._x1=r,this._y1=n,this._x2=o,this._y2=s},SVGPathSegCurvetoCubicAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicAbs]"},SVGPathSegCurvetoCubicAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicAbs.prototype.clone=function(){return new SVGPathSegCurvetoCubicAbs((void 0),this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicRel=function(t,e,i,r,n,o,s){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL,"c",t),this._x=e,this._y=i,this._x1=r,this._y1=n,this._x2=o,this._y2=s},SVGPathSegCurvetoCubicRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicRel]"},SVGPathSegCurvetoCubicRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicRel.prototype.clone=function(){return new SVGPathSegCurvetoCubicRel((void 0),this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticAbs=function(t,e,i,r,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS,"Q",t),this._x=e,this._y=i,this._x1=r,this._y1=n},SVGPathSegCurvetoQuadraticAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticAbs]"},SVGPathSegCurvetoQuadraticAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticAbs.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticAbs((void 0),this._x,this._y,this._x1,this._y1)},Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticRel=function(t,e,i,r,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL,"q",t),this._x=e,this._y=i,this._x1=r,this._y1=n},SVGPathSegCurvetoQuadraticRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticRel]"},SVGPathSegCurvetoQuadraticRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticRel.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticRel((void 0),this._x,this._y,this._x1,this._y1)},Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcAbs=function(t,e,i,r,n,o,s,a){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_ARC_ABS,"A",t),this._x=e,this._y=i,this._r1=r,this._r2=n,this._angle=o,this._largeArcFlag=s,this._sweepFlag=a},SVGPathSegArcAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegArcAbs.prototype.toString=function(){return"[object SVGPathSegArcAbs]"},SVGPathSegArcAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},SVGPathSegArcAbs.prototype.clone=function(){return new SVGPathSegArcAbs((void 0),this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(SVGPathSegArcAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"r1",{get:function(){return this._r1},set:function(t){this._r1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"r2",{get:function(){return this._r2},set:function(t){this._r2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(t){this._largeArcFlag=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(t){this._sweepFlag=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcRel=function(t,e,i,r,n,o,s,a){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_ARC_REL,"a",t),this._x=e,this._y=i,this._r1=r,this._r2=n,this._angle=o,this._largeArcFlag=s,this._sweepFlag=a},SVGPathSegArcRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegArcRel.prototype.toString=function(){return"[object SVGPathSegArcRel]"},SVGPathSegArcRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},SVGPathSegArcRel.prototype.clone=function(){return new SVGPathSegArcRel((void 0),this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(SVGPathSegArcRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"r1",{get:function(){return this._r1},set:function(t){this._r1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"r2",{get:function(){return this._r2},set:function(t){this._r2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(t){this._largeArcFlag=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(t){this._sweepFlag=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalAbs=function(t,e){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS,"H",t),this._x=e},SVGPathSegLinetoHorizontalAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoHorizontalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalAbs]"},SVGPathSegLinetoHorizontalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},SVGPathSegLinetoHorizontalAbs.prototype.clone=function(){return new SVGPathSegLinetoHorizontalAbs((void 0),this._x)},Object.defineProperty(SVGPathSegLinetoHorizontalAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalRel=function(t,e){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL,"h",t),this._x=e},SVGPathSegLinetoHorizontalRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoHorizontalRel.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalRel]"},SVGPathSegLinetoHorizontalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},SVGPathSegLinetoHorizontalRel.prototype.clone=function(){return new SVGPathSegLinetoHorizontalRel((void 0),this._x)},Object.defineProperty(SVGPathSegLinetoHorizontalRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalAbs=function(t,e){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS,"V",t),this._y=e},SVGPathSegLinetoVerticalAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoVerticalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalAbs]"},SVGPathSegLinetoVerticalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},SVGPathSegLinetoVerticalAbs.prototype.clone=function(){return new SVGPathSegLinetoVerticalAbs((void 0),this._y)},Object.defineProperty(SVGPathSegLinetoVerticalAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalRel=function(t,e){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL,"v",t),this._y=e},SVGPathSegLinetoVerticalRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoVerticalRel.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalRel]"},SVGPathSegLinetoVerticalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},SVGPathSegLinetoVerticalRel.prototype.clone=function(){return new SVGPathSegLinetoVerticalRel((void 0),this._y)},Object.defineProperty(SVGPathSegLinetoVerticalRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothAbs=function(t,e,i,r,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS,"S",t),this._x=e,this._y=i,this._x2=r,this._y2=n},SVGPathSegCurvetoCubicSmoothAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothAbs]"},SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicSmoothAbs.prototype.clone=function(){return new SVGPathSegCurvetoCubicSmoothAbs((void 0),this._x,this._y,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothRel=function(t,e,i,r,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL,"s",t),this._x=e,this._y=i,this._x2=r,this._y2=n},SVGPathSegCurvetoCubicSmoothRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothRel]"},SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicSmoothRel.prototype.clone=function(){return new SVGPathSegCurvetoCubicSmoothRel((void 0),this._x,this._y,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothAbs=function(t,e,i){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS,"T",t),this._x=e,this._y=i},SVGPathSegCurvetoQuadraticSmoothAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothAbs]"},SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticSmoothAbs((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothRel=function(t,e,i){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL,"t",t),this._x=e,this._y=i},SVGPathSegCurvetoQuadraticSmoothRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothRel]"},SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticSmoothRel((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),SVGPathElement.prototype.createSVGPathSegClosePath=function(){return new SVGPathSegClosePath((void 0))},SVGPathElement.prototype.createSVGPathSegMovetoAbs=function(t,e){return new SVGPathSegMovetoAbs((void 0),t,e)},SVGPathElement.prototype.createSVGPathSegMovetoRel=function(t,e){return new SVGPathSegMovetoRel((void 0),t,e)},SVGPathElement.prototype.createSVGPathSegLinetoAbs=function(t,e){return new SVGPathSegLinetoAbs((void 0),t,e)},SVGPathElement.prototype.createSVGPathSegLinetoRel=function(t,e){return new SVGPathSegLinetoRel((void 0),t,e)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs=function(t,e,i,r,n,o){return new SVGPathSegCurvetoCubicAbs((void 0),t,e,i,r,n,o)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel=function(t,e,i,r,n,o){return new SVGPathSegCurvetoCubicRel((void 0),t,e,i,r,n,o)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs=function(t,e,i,r){return new SVGPathSegCurvetoQuadraticAbs((void 0),t,e,i,r)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel=function(t,e,i,r){return new SVGPathSegCurvetoQuadraticRel((void 0),t,e,i,r)},SVGPathElement.prototype.createSVGPathSegArcAbs=function(t,e,i,r,n,o,s){return new SVGPathSegArcAbs((void 0),t,e,i,r,n,o,s)},SVGPathElement.prototype.createSVGPathSegArcRel=function(t,e,i,r,n,o,s){return new SVGPathSegArcRel((void 0),t,e,i,r,n,o,s)},SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs=function(t){return new SVGPathSegLinetoHorizontalAbs((void 0),t)},SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel=function(t){return new SVGPathSegLinetoHorizontalRel((void 0),t)},SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs=function(t){return new SVGPathSegLinetoVerticalAbs((void 0),t)},SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel=function(t){return new SVGPathSegLinetoVerticalRel((void 0),t)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs=function(t,e,i,r){return new SVGPathSegCurvetoCubicSmoothAbs((void 0),t,e,i,r)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel=function(t,e,i,r){return new SVGPathSegCurvetoCubicSmoothRel((void 0),t,e,i,r)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs=function(t,e){return new SVGPathSegCurvetoQuadraticSmoothAbs((void 0),t,e)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel=function(t,e){return new SVGPathSegCurvetoQuadraticSmoothRel((void 0),t,e)}),"SVGPathSegList"in window||(window.SVGPathSegList=function(t){this._pathElement=t,this._list=this._parsePath(this._pathElement.getAttribute("d")),this._mutationObserverConfig={attributes:!0,attributeFilter:["d"]},this._pathElementMutationObserver=new MutationObserver(this._updateListFromPathMutations.bind(this)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},SVGPathSegList.prototype.classname="SVGPathSegList",Object.defineProperty(SVGPathSegList.prototype,"numberOfItems",{get:function(){return this._checkPathSynchronizedToList(),this._list.length},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"pathSegList",{get:function(){return this._pathSegList||(this._pathSegList=new SVGPathSegList(this)),this._pathSegList},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"normalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"animatedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"animatedNormalizedPathSegList",{get:function(){return this.pathSegList;
},enumerable:!0}),SVGPathSegList.prototype._checkPathSynchronizedToList=function(){this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords())},SVGPathSegList.prototype._updateListFromPathMutations=function(t){if(this._pathElement){var e=!1;t.forEach(function(t){"d"==t.attributeName&&(e=!0)}),e&&(this._list=this._parsePath(this._pathElement.getAttribute("d")))}},SVGPathSegList.prototype._writeListToPath=function(){this._pathElementMutationObserver.disconnect(),this._pathElement.setAttribute("d",SVGPathSegList._pathSegArrayAsString(this._list)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},SVGPathSegList.prototype.segmentChanged=function(t){this._writeListToPath()},SVGPathSegList.prototype.clear=function(){this._checkPathSynchronizedToList(),this._list.forEach(function(t){t._owningPathSegList=null}),this._list=[],this._writeListToPath()},SVGPathSegList.prototype.initialize=function(t){return this._checkPathSynchronizedToList(),this._list=[t],t._owningPathSegList=this,this._writeListToPath(),t},SVGPathSegList.prototype._checkValidIndex=function(t){if(isNaN(t)||t<0||t>=this.numberOfItems)throw"INDEX_SIZE_ERR"},SVGPathSegList.prototype.getItem=function(t){return this._checkPathSynchronizedToList(),this._checkValidIndex(t),this._list[t]},SVGPathSegList.prototype.insertItemBefore=function(t,e){return this._checkPathSynchronizedToList(),e>this.numberOfItems&&(e=this.numberOfItems),t._owningPathSegList&&(t=t.clone()),this._list.splice(e,0,t),t._owningPathSegList=this,this._writeListToPath(),t},SVGPathSegList.prototype.replaceItem=function(t,e){return this._checkPathSynchronizedToList(),t._owningPathSegList&&(t=t.clone()),this._checkValidIndex(e),this._list[e]=t,t._owningPathSegList=this,this._writeListToPath(),t},SVGPathSegList.prototype.removeItem=function(t){this._checkPathSynchronizedToList(),this._checkValidIndex(t);var e=this._list[t];return this._list.splice(t,1),this._writeListToPath(),e},SVGPathSegList.prototype.appendItem=function(t){return this._checkPathSynchronizedToList(),t._owningPathSegList&&(t=t.clone()),this._list.push(t),t._owningPathSegList=this,this._writeListToPath(),t},SVGPathSegList._pathSegArrayAsString=function(t){var e="",i=!0;return t.forEach(function(t){i?(i=!1,e+=t._asPathString()):e+=" "+t._asPathString()}),e},SVGPathSegList.prototype._parsePath=function(t){if(!t||0==t.length)return[];var e=this,i=function(){this.pathSegList=[]};i.prototype.appendSegment=function(t){this.pathSegList.push(t)};var r=function(t){this._string=t,this._currentIndex=0,this._endIndex=this._string.length,this._previousCommand=SVGPathSeg.PATHSEG_UNKNOWN,this._skipOptionalSpaces()};r.prototype._isCurrentSpace=function(){var t=this._string[this._currentIndex];return t<=" "&&(" "==t||"\n"==t||"\t"==t||"\r"==t||"\f"==t)},r.prototype._skipOptionalSpaces=function(){for(;this._currentIndex<this._endIndex&&this._isCurrentSpace();)this._currentIndex++;return this._currentIndex<this._endIndex},r.prototype._skipOptionalSpacesOrDelimiter=function(){return!(this._currentIndex<this._endIndex&&!this._isCurrentSpace()&&","!=this._string.charAt(this._currentIndex))&&(this._skipOptionalSpaces()&&this._currentIndex<this._endIndex&&","==this._string.charAt(this._currentIndex)&&(this._currentIndex++,this._skipOptionalSpaces()),this._currentIndex<this._endIndex)},r.prototype.hasMoreData=function(){return this._currentIndex<this._endIndex},r.prototype.peekSegmentType=function(){var t=this._string[this._currentIndex];return this._pathSegTypeFromChar(t)},r.prototype._pathSegTypeFromChar=function(t){switch(t){case"Z":case"z":return SVGPathSeg.PATHSEG_CLOSEPATH;case"M":return SVGPathSeg.PATHSEG_MOVETO_ABS;case"m":return SVGPathSeg.PATHSEG_MOVETO_REL;case"L":return SVGPathSeg.PATHSEG_LINETO_ABS;case"l":return SVGPathSeg.PATHSEG_LINETO_REL;case"C":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;case"c":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;case"Q":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;case"q":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;case"A":return SVGPathSeg.PATHSEG_ARC_ABS;case"a":return SVGPathSeg.PATHSEG_ARC_REL;case"H":return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;case"h":return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;case"V":return SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;case"v":return SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;case"S":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;case"s":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;case"T":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;case"t":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;default:return SVGPathSeg.PATHSEG_UNKNOWN}},r.prototype._nextCommandHelper=function(t,e){return("+"==t||"-"==t||"."==t||t>="0"&&t<="9")&&e!=SVGPathSeg.PATHSEG_CLOSEPATH?e==SVGPathSeg.PATHSEG_MOVETO_ABS?SVGPathSeg.PATHSEG_LINETO_ABS:e==SVGPathSeg.PATHSEG_MOVETO_REL?SVGPathSeg.PATHSEG_LINETO_REL:e:SVGPathSeg.PATHSEG_UNKNOWN},r.prototype.initialCommandIsMoveTo=function(){if(!this.hasMoreData())return!0;var t=this.peekSegmentType();return t==SVGPathSeg.PATHSEG_MOVETO_ABS||t==SVGPathSeg.PATHSEG_MOVETO_REL},r.prototype._parseNumber=function(){var t=0,e=0,i=1,r=0,n=1,o=1,s=this._currentIndex;if(this._skipOptionalSpaces(),this._currentIndex<this._endIndex&&"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:this._currentIndex<this._endIndex&&"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,n=-1),!(this._currentIndex==this._endIndex||(this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")&&"."!=this._string.charAt(this._currentIndex))){for(var a=this._currentIndex;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)this._currentIndex++;if(this._currentIndex!=a)for(var l=this._currentIndex-1,h=1;l>=a;)e+=h*(this._string.charAt(l--)-"0"),h*=10;if(this._currentIndex<this._endIndex&&"."==this._string.charAt(this._currentIndex)){if(this._currentIndex++,this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)i*=10,r+=(this._string.charAt(this._currentIndex)-"0")/i,this._currentIndex+=1}if(this._currentIndex!=s&&this._currentIndex+1<this._endIndex&&("e"==this._string.charAt(this._currentIndex)||"E"==this._string.charAt(this._currentIndex))&&"x"!=this._string.charAt(this._currentIndex+1)&&"m"!=this._string.charAt(this._currentIndex+1)){if(this._currentIndex++,"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,o=-1),this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)t*=10,t+=this._string.charAt(this._currentIndex)-"0",this._currentIndex++}var c=e+r;if(c*=n,t&&(c*=Math.pow(10,o*t)),s!=this._currentIndex)return this._skipOptionalSpacesOrDelimiter(),c}},r.prototype._parseArcFlag=function(){if(!(this._currentIndex>=this._endIndex)){var t=!1,e=this._string.charAt(this._currentIndex++);if("0"==e)t=!1;else{if("1"!=e)return;t=!0}return this._skipOptionalSpacesOrDelimiter(),t}},r.prototype.parseSegment=function(){var t=this._string[this._currentIndex],i=this._pathSegTypeFromChar(t);if(i==SVGPathSeg.PATHSEG_UNKNOWN){if(this._previousCommand==SVGPathSeg.PATHSEG_UNKNOWN)return null;if(i=this._nextCommandHelper(t,this._previousCommand),i==SVGPathSeg.PATHSEG_UNKNOWN)return null}else this._currentIndex++;switch(this._previousCommand=i,i){case SVGPathSeg.PATHSEG_MOVETO_REL:return new SVGPathSegMovetoRel(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_MOVETO_ABS:return new SVGPathSegMovetoAbs(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_REL:return new SVGPathSegLinetoRel(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_ABS:return new SVGPathSegLinetoAbs(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:return new SVGPathSegLinetoHorizontalRel(e,this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:return new SVGPathSegLinetoHorizontalAbs(e,this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:return new SVGPathSegLinetoVerticalRel(e,this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:return new SVGPathSegLinetoVerticalAbs(e,this._parseNumber());case SVGPathSeg.PATHSEG_CLOSEPATH:return this._skipOptionalSpaces(),new SVGPathSegClosePath(e);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:var r={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicRel(e,r.x,r.y,r.x1,r.y1,r.x2,r.y2);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:var r={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicAbs(e,r.x,r.y,r.x1,r.y1,r.x2,r.y2);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:var r={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicSmoothRel(e,r.x,r.y,r.x2,r.y2);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:var r={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicSmoothAbs(e,r.x,r.y,r.x2,r.y2);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:var r={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoQuadraticRel(e,r.x,r.y,r.x1,r.y1);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:var r={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoQuadraticAbs(e,r.x,r.y,r.x1,r.y1);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:return new SVGPathSegCurvetoQuadraticSmoothRel(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:return new SVGPathSegCurvetoQuadraticSmoothAbs(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_ARC_REL:var r={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegArcRel(e,r.x,r.y,r.x1,r.y1,r.arcAngle,r.arcLarge,r.arcSweep);case SVGPathSeg.PATHSEG_ARC_ABS:var r={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegArcAbs(e,r.x,r.y,r.x1,r.y1,r.arcAngle,r.arcLarge,r.arcSweep);default:throw"Unknown path seg type."}};var n=new i,o=new r(t);if(!o.initialCommandIsMoveTo())return[];for(;o.hasMoreData();){var s=o.parseSegment();if(!s)return[];n.appendSegment(s)}return n.pathSegList})}();
//# sourceMappingURL=data:application/json;base64,
